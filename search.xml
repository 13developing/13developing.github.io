<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/03/02/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>数据库：聚合函数sum和count之间的区别</title>
    <url>/2023/03/07/%E6%95%B0%E6%8D%AE%E5%BA%93-1/</url>
    <content><![CDATA[<h2 id="聚合函数sum和count之间的区别"><a href="#聚合函数sum和count之间的区别" class="headerlink" title="聚合函数sum和count之间的区别"></a>聚合函数sum和count之间的区别</h2><pre><code>   初识数据库，对于都是用来统计的sum和count我存在着疑惑。用以下的例子可以很好的解释二者之间的区别。
</code></pre>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">id   name   price</span><br><span class="line">1   apple   3.00</span><br><span class="line">2   pear    4.00</span><br><span class="line">select count(price) from fruit; ----执行之后结果为：2  (表示有2条记录)</span><br><span class="line">select  sum(price) from fruit;---执行之后结果为：7:00（表示各记录price字段之和为7.00）</span><br></pre></td></tr></table></figure></div>


<p>从这里我们可以看到，count统计的是所数据表中每一条记录信息，而sum针对的是某一个column中的数 据。以更为直观的说法就是–对于某一column，sum针对纵向的数据，而count针对横向的信息条数。</p>
]]></content>
      <tags>
        <tag>MYSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>java:构造代码块 和 静态代码块的区别</title>
    <url>/2023/03/08/java-%E6%9E%84%E9%80%A0%E4%BB%A3%E7%A0%81%E5%9D%97-%E5%92%8C-%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E5%9D%97%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h2 id="java-：构造代码块-和-静态代码块"><a href="#java-：构造代码块-和-静态代码块" class="headerlink" title="java ：构造代码块 和 静态代码块"></a>java ：构造代码块 和 静态代码块</h2><p>以下是我对于二者区别浅薄的认识 ：</p>
<p>构造代码块：</p>
<ul>
<li><p>{…}花括号包裹起来的代码我们称之为代码块或代码段。而只有一对花括号包裹起来的代码我们称之为构造代码块。</p>
</li>
<li><p>构造代码块在构造方法之前先执行，构造代码块与构造方法一样都是在类被实例化的过程中被调用的。<strong>即每调用一次构造函数，都会在构造函数之前调用 —构造代码块–</strong></p>
</li>
</ul>
<p>如以下案例 ：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.plaf.basic.BasicInternalFrameTitlePane;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> gender;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;    <span class="comment">//构造函数的重载</span></span><br><span class="line">        System.out.println(<span class="string">&quot;我是无参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">int</span> gender)</span> &#123;         <span class="comment">//构造函数的重载</span></span><br><span class="line">        System.out.println(<span class="string">&quot;我是含参构造方法&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;     </span><br><span class="line">        System.out.println(<span class="string">&quot;我是静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;   <span class="comment">//只有括号而没有任何前缀</span></span><br><span class="line">        System.out.println(<span class="string">&quot;我是构造代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小明&quot;</span>, <span class="number">20</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 案例运行结果：</span></span><br><span class="line">    我是静态代码块</span><br><span class="line">	我是构造代码块</span><br><span class="line">	我是无参构造方法</span><br><span class="line">	我是构造代码块</span><br><span class="line">	我是有参构造方法</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>由上述运行结果我们不难得出 staic 代码块 即 <strong>静态代码块</strong>的特点：</p>
<ul>
<li>静态代码块在类加载的时候运行，<strong>并且只运行一次</strong>；</li>
<li>静态代码块的执行优先级：优于各种代码块和构造函数；</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>图床：安装注意点 以及 阿里云OSS相关收费</title>
    <url>/2023/03/08/%E5%9B%BE%E5%BA%8A%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="图床：安装注意点"><a href="#图床：安装注意点" class="headerlink" title="图床：安装注意点"></a>图床：安装注意点</h2><p>最近发现一个特别明显的现象，即随着网页内容的不断增加和图片的不断插入，这导致我的blog本地文件不断的增大的同时，网页的响应速度也开始变慢，往往图片加载较长时间才会一点一点的揭开面纱。<br>这也就导致我不得不使用图床。</p>
<p> <strong>在这里我使用的是阿里云OSS和picgo，以下是csdn上一篇教程：<a class="link"   href="https://blog.csdn.net/m0_51321469/article/details/127340237" >教程跳转 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong></p>
<h4 id="当然在这里有几点要提一下："><a href="#当然在这里有几点要提一下：" class="headerlink" title="当然在这里有几点要提一下："></a>当然在这里有几点要提一下：</h4><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202303081320889.png"
                      alt="picgo设置"
                ></p>
<ul>
<li><p><strong>keyid和keysecret在复制粘贴时，字串前后都不可以存在，这里点可以在<code>picgo设置</code>的配置文件中检查</strong></p>
</li>
<li><p><strong>存储空间名要和阿里云oss中新建的Bucket命名一致，否则上传图片错误</strong></p>
</li>
<li><p><strong>指定存储路径指的是：存储在Bucket路径下的某一个目录，例如这里我的是<code>img/</code>，那么在我的阿Bucket目录下也一定要创建一个子目录命名为<code>img/</code></strong></p>
</li>
<li><p>至于后两项不是特别重要，我没有填写，可以直接忽略。</p>
<pre><code>    当然图床的使用也不是没有缺点，首先就是图床崩溃问题，例如，gitee的图床就曾多次出现崩溃，存储的图片也就会丢失，其次就是在使用图片的时候，要先将图片上传进你的Bucket之中。
</code></pre>
</li>
</ul>
<h2 id="阿里云OSS相关收费"><a href="#阿里云OSS相关收费" class="headerlink" title="阿里云OSS相关收费"></a>阿里云OSS相关收费</h2><pre><code>         而这两点当然是可以解决的，前者当然是使用付费oss进行存储，但是使用后你会发现为么你在开通oss时候是不收费的呢？原因在这里：
         1. 首先开通对象存储OSS是不收费的；
         2. 你在对象存储OSS上创建了Bucket，创建Bucket也是不收费的；
         3. 你在Bucket中上传了文件，该文件存储是收费的，需要支付存储费；
         4. 上传文件到Bucket中产的流量是不收费的，OSS流量只收取公网出流量；
         5. 假设你通过外网下载Bucket中的文件到本地，外网出流量是收费的，需要支付流量费；
         6. 假设你开通了OSS传输加速功能，开通功能是不收费的；
         7. 假设你上传或下载使用了传输加速，产生的传输加速流量是收费的。
         收费详情参考：https://dashi.aliyun.com/site/cloud/oss
         
        
        而你开通了oss之后，文件存储是收费的，需要支付存储费，但是你拥有5 GB/月的免费额度 ，其次，在外网的访问时，也是需要收费的，对象存储OSS分为**包年包月和按量付费两种计费模式**，开通OSS后**默认是按量付费模式**，按量付费是先使用后付费，根据实际使用的存储空间、实际产生的流量，然后乘以对应的单价，来支付对应的费用；包年包月预付费模式，先购买对应的存储包或流量包，实际产生的存储费和流量费，通过存储包或流量包的形式抵扣。
      
</code></pre>
<p>   当然，其实直接开通一年的也不贵，一年9元40GB，对于目前的我来说，只是存储blog图片是足够的。那么，图床崩溃问题是解决了。接下是就是上解决图片上传问题：<br>          <strong>这里实际上利用的是Tpora进行解决，操作很简单，这里也就不多赘述了，附上链接供大家参考:</strong><br>    <a class="link"   href="https://blog.csdn.net/to_free/article/details/114981807?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167825766916800215063593%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=167825766916800215063593&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-6-114981807-null-null.142%5Ev73%5Einsert_down1,201%5Ev4%5Eadd_ask,239%5Ev2%5Einsert_chatgpt&utm_term=typora%E5%9B%BE%E5%BA%8A%E2%80%99&spm=1018.2226.3001.4187" >点击跳转 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>HTML基础</title>
    <url>/2023/03/11/HTML%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="学习及查阅网址"><a href="#学习及查阅网址" class="headerlink" title="学习及查阅网址"></a>学习及查阅网址</h3><p><a href="https://www.w3schools.cn/html/html_colors.asp"><a class="link"   href="https://www.w3schools.cn/html/" >HTML 教程 (w3schools.cn) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></a></p>
<h3 id="什么是-HTML-？"><a href="#什么是-HTML-？" class="headerlink" title="什么是 HTML ？"></a>什么是 HTML ？</h3><p>HTML是超文本标记语言，而非编程语言，用以描述网页。</p>
<p>另外标记语言是一套标记标签（markup tag）</p>
<h3 id="浏览器的内核"><a href="#浏览器的内核" class="headerlink" title="浏览器的内核"></a>浏览器的内核</h3><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202303081947055.png"
                      alt="image-20230308194743834" style="zoom:50%;" 
                >

<h3 id="web标准的构成"><a href="#web标准的构成" class="headerlink" title="web标准的构成"></a>web标准的构成</h3><p>三部分 : 结构 ，表现，行为<br>同时，我们一般将三者相分离，结构写入Html文件中，表现写入css中，行为写入JS中 </p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202303081947930.png"
                      alt="image-20230308194755718" style="zoom:50%;" 
                >

 

<h3 id="语法规范"><a href="#语法规范" class="headerlink" title="语法规范"></a>语法规范</h3><ul>
<li><p>首先是关键词都是由我们的尖括号进行括住&lt;&gt;</p>
</li>
<li><p>HTML标签一般是成对出现的，我们成为双标签  ，一般一个表示开始，一个表示结束,例如 —— <html>  </html>  注意结束标签前面的斜杠&#x3D;</p>
</li>
<li><p>特殊的，也存在单标签例如  <br /></p>
</li>
</ul>
<h3 id="标签关系"><a href="#标签关系" class="headerlink" title="标签关系"></a>标签关系</h3><p>分为两种—— 包含关系，并列关系</p>
<h3 id="HTML基本结构标签"><a href="#HTML基本结构标签" class="headerlink" title="HTML基本结构标签"></a>HTML基本结构标签</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202303081948145.png"
                      alt="image-20230308194812907"
                ></p>
<h3 id="对于一些自动生成语句的解释"><a href="#对于一些自动生成语句的解释" class="headerlink" title="对于一些自动生成语句的解释"></a>对于一些自动生成语句的解释</h3><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>这里语句的解释：**lang 就是我们 language 的缩写，en就是在告诉我们的浏览器，该页面是英文页面 **</p>
<p>若我们想 将它改为&#x3D;&#x3D;中文&#x3D;&#x3D;页面 ，那么我们就修改为：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;  DOC_TYPE 即文档类型  </span><br><span class="line"></span><br><span class="line">该标签不是HTML标签，而是文档申明标签，这一句话就是告诉浏览器：该页面是采取HTML5标准来显示网页</span><br></pre></td></tr></table></figure></div>



<h3 id="乱码"><a href="#乱码" class="headerlink" title="乱码"></a>乱码</h3><p>如果我们在网页的显示过程中，发现乱码，可能是没有加入这么一句：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">这一句的意义就是告诉我们的浏览器：该页面所使用的编码是utf-8</span><br><span class="line">其实他是简写，原型为;</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=utf-8&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="标签名中的head标签"><a href="#标签名中的head标签" class="headerlink" title="标签名中的head标签"></a>标签名中的head标签</h3><p>原文链接<a class="link"   href="https://blog.csdn.net/qq_48894948/article/details/118761310?ops_request_misc=%7B%22request_id%22:%22167238707816800182796139%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=167238707816800182796139&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-118761310-null-null.142%5Ev68%5Epc_new_rank,201%5Ev4%5Eadd_ask,213%5Ev2%5Et3_esquery_v2&utm_term=html%E4%B8%AD%E7%9A%84head&spm=1018.2226.3001.4187" >(11条消息) HTML基础笔记——head标签_Kll .的博客-CSDN博客_head标签 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>	</p>
<h3 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h3><h4 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h4><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">h1~ h6</span><br><span class="line">因为是我们的正文内容的标题，所以我们会在<span class="tag">&lt;<span class="name">body</span>&gt;</span>  <span class="tag">&lt;/<span class="name">body</span>&gt;</span>之间进行写</span><br><span class="line">示例：</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        一级标题</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">        二级标题</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>值得注意的是，每一级标题都是独占一行，后面会&#x3D;&#x3D;自动换行&#x3D;&#x3D;</p>
<h4 id="段落和换行"><a href="#段落和换行" class="headerlink" title="段落和换行"></a>段落和换行</h4><p>段落的标签：<p>  正文</p> </p>
<p>特点：  首先是我们的文段内容会根据浏览器的窗口进行自适应换行</p>
<p>​        	其次是我们的文段段落之间会存有比较大的空隙。</p>
<p>换行的标签 ：   <br />  这是我们学习的第一个单标签，在标签存在处，会直接进行换行</p>
<h3 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h3><ul>
<li>粗体<code>&lt;strong&gt; &lt;/ strong&gt;</code> 或者是<code>&lt;b&gt; &lt;/ b&gt; </code></li>
<li>斜体 <code>&lt;em&gt; &lt;/ em&gt;</code>或者是<code>&lt;i&gt; &lt; /i&gt;</code></li>
<li>删除线<code>&lt;del&gt; &lt;/ del&gt; </code> 或者是 <code>&lt;s&gt; &lt; /s&gt;</code></li>
<li>下划线 <code>&lt;ins&gt;  &lt;/ ins&gt;</code> 或者是 <code>&lt;u&gt; &lt;/ u&gt;</code></li>
</ul>
<h2 id="span和div"><a href="#span和div" class="headerlink" title="span和div"></a>span和div</h2><p>没有语义，是盒子。</p>
<p>div是一个大盒子，一个就占据一整行</p>
<p>而span是小盒子 </p>
<h3 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h3><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">单标签 </span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图像URL&quot;</span> /&gt;</span></span><br><span class="line">src是图像标签的必须属性，用于指定文件的路径和文件名</span><br><span class="line">这里我们需要将图片资源和 html 文件放在一起</span><br></pre></td></tr></table></figure></div>

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202303081948746.png"
                      alt="image-20230308194824522" style="zoom:50%;" 
                >

<p>多项属性设置实例：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img1.phg&quot;</span>  <span class="attr">title</span>=<span class="string">&quot;这是鼠标放置时的文本显示信息&quot;</span> /&gt;</span>  这里需要我们注意的就是最末尾的 /不可以忘记</span><br><span class="line">alt属性是当我们图片显示不出来的时候，所显示的文字</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202303081948352.png"
                      alt="image-20230308194851080"
                ></p>
<h3 id="HTML的路径"><a href="#HTML的路径" class="headerlink" title="HTML的路径"></a>HTML的路径</h3><h4 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h4><ul>
<li><p>同一级的路径  ：若想对与 html文件 是同一级的文件，可以直接进行引用</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">eg：  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot; img.jpg&quot;</span> /&gt;</span>  例如这里的 src 就是直接进行路径赋值</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>下一级路径： 与html同级的文件夹images中存放图片</p>
<p>符号  ——  &#x2F;</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">eg : <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/ img.jpg&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>上一级路径 ： 在html文件中的上一级文件中</p>
<p>符号 —— ..&#x2F;</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">eg : <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../ img.jpg&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h4 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h4><p>实际上在这里我遇到了不小的困难，绝对路径图片打不开，还没有解决</p>
<h3 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h3><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">&quot; 跳转页面的网址&quot;</span>  <span class="attr">target</span> = <span class="string">&quot;目标窗口的弹出方式&quot;</span>  &gt;</span></span><br><span class="line">    target  :    _self 为默认值      指当前窗口进行跳转</span><br><span class="line">    				_blank为在新窗口的打开方式</span><br><span class="line">    实例：</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.biquge3.cc/article/60619/38777946.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> &gt;</span>  夜的命名术 <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<h4 id="链接的分类"><a href="#链接的分类" class="headerlink" title="链接的分类"></a>链接的分类</h4><p><strong>外部链接</strong>：即我们引用其他外部的网站就行超链接行为	</p>
<p><strong>内部链接</strong>：即我们本地的 html文件 之间进行跳转</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;try2.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span> &gt;</span>  内部链接 <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>空链接</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">&quot;#&quot;</span> &gt;</span>   空链接  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="空格代码"><a href="#空格代码" class="headerlink" title="空格代码"></a>空格代码</h3><p><code>&amp;nbsp;&amp;nbsp;</code>   只要加上此代码就会空两格 ，以此类推</p>
<h3 id="综合实例——下载文件"><a href="#综合实例——下载文件" class="headerlink" title="综合实例——下载文件"></a>综合实例——下载文件</h3><p>​      文件结构：<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202303081949132.png"
                      alt="image-20230308194901907" style="zoom:50%;" 
                ></p>
<p>start文件代码</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>小胡的图片下载网站<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    图片预览</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;89.png&quot;</span> <span class="attr">title</span>=<span class="string">&quot;舞女&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;舞女图片加载失败&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;44.png&quot;</span> <span class="attr">title-</span>=<span class="string">&quot;冰汽时代游戏截图&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;冰汽时代游戏截图加载失败&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;123.jpg&quot;</span> <span class="attr">title</span>=<span class="string">&quot;壁纸&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;高清壁纸加载失败&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;44.png&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span> 游戏截图下载  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;123.jpg&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span> 壁纸下载 <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;89.png&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span> 舞女图片下载  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;download.html &quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank &quot;</span>&gt;</span> <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span> rar格式下载 <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>download文件</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>zip_download<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;images.rar &quot;</span>  &gt;</span>   <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span> rar格式下载  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>在这里我们看到，zip文件的连接是直接打开，而普通图片的连接是查看，但是可以另存</p>
<h3 id="锚点链接"><a href="#锚点链接" class="headerlink" title="锚点链接"></a>锚点链接</h3><p>即本页面内容的目录，快速定位该页面某种内容位置</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot; # ...&quot;</span>&gt;</span>    跳转目录  <span class="tag">&lt;/<span class="name">a</span>&gt;</span>   首先值得我们注意的就是  锚点链接的内容  #</span><br><span class="line">锚点链接后面跳转至的必须是标题，同时注意id的一致性</span><br><span class="line"></span><br><span class="line">eg：</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;#finally&quot;</span>&gt;</span> 我要跳转 <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">&quot;finally&quot;</span>&gt;</span>    锚点终点 <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="注释等特殊字符"><a href="#注释等特殊字符" class="headerlink" title="注释等特殊字符"></a>注释等特殊字符</h3><p>注释 ： <!--  内容   -->   </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202303081949789.png"
                      alt="image-20230308194920522"
                ></p>
<h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line"> &lt;tr&gt;</span><br><span class="line"> &lt;td&gt;单元格内的文字&lt;/td&gt;</span><br><span class="line"> ...</span><br><span class="line"> &lt;/tr&gt;</span><br><span class="line"> ...</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><table> </table> 是用于定义表格的标签。
</li>
<li><tr> </tr> 标签用于定义表格中的行，必须嵌套在 <table> </table>标签中。
</li>
<li><td> </td> 用于定义表格中该行的单元格，必须嵌套在<tr></tr>标签中。
</li>
<li><p>字母 td 指表格数据（table data），即数据单元格的内容。</p>
<p>示例 ： <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202303112105815.png"
                      alt="image-20230311210456637" style="zoom:50%;" 
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202303112105858.png"
                      alt="image-20230311210541722" style="zoom: 50%;" 
                ></p>
</li>
</ul>
<h4 id="表头单元格"><a href="#表头单元格" class="headerlink" title="表头单元格"></a>表头单元格</h4><th> </th>  注意此时就不需要写 td ，直接利用我们的 th 来替换 td，可以使得我们的表头加粗并且居中

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202303112106336.png"
                      alt="image-20230311210610202" style="zoom:50%;" 
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202303112106873.png"
                      alt="image-20230311210620735" style="zoom:50%;" 
                ></p>
<h4 id="部分表格的相关属性"><a href="#部分表格的相关属性" class="headerlink" title="部分表格的相关属性"></a>部分表格的相关属性</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202303112106034.png"
                      alt="image-20230311210652879"
                ></p>
<p>同样的还有  <code>height</code>（单元格高度） <code>bgcolor背景色   bordercolor</code> </p>
<p>注意这是在<table> </table>中进行操作的  例如：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">这里比较好用的有 border 属性</span><br><span class="line">下面是我们的示例：</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span>&gt;</span>籍贯<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span> 小红a <span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span> 北京朝阳 <span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span> 小明b <span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span> 新疆某某 <span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span> 小刚d <span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span> 大连某某 <span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202303112107063.png"
                      alt="image-20230311210702923"
                ></p>
<p><code>cellpadding</code>  是我们的文字与单元格边框之间的距离</p>
<p><code>cellspacing</code>  是边框之间的距离</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span>&gt;</span>籍贯<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span> 小红a <span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span> 北京朝阳 <span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span> 小明b <span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span> 新疆某某 <span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span> 小刚d <span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span> 大连某某 <span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202303112107898.png"
                      alt="image-20230311210710767" style="zoom:50%;" 
                >

<h4 id="表格结构标签"><a href="#表格结构标签" class="headerlink" title="表格结构标签"></a>表格结构标签</h4><p>分为  <code>&lt;thead&gt; 表头 &lt;tbody&gt; 表主体  两部分</code></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202303112107224.png"
                      alt="image-20230311210719088" style="zoom:50%;" 
                >

<p><code>注意是放在我们的  &lt;table&gt;  中的</code></p>
<h4 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h4><p>跨行合并 rowspan &#x3D;“合并单元格的个数”  （上下单元格合并）</p>
<ul>
<li><pre><code>目标单元格为最上侧的单元格
</code></pre>
</li>
</ul>
<p>跨列合并 colspan &#x3D; “合并单元格的个数”（左右单元格合并）</p>
<ul>
<li><pre><code>目标单元格为最左侧
</code></pre>
</li>
</ul>
<p>步骤：</p>
<p>1、确定合并方式（跨行还是跨列）<br>2、找到目标单元格写代码<br>3、删除多余单元格</p>
<p>示例</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;5&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;td&gt;&lt;/td&gt;--&gt;</span>  这是合并后的删除</span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;td&gt;&lt;/td&gt;--&gt;</span>  合并后的删除</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202303112107645.png"
                      alt="image-20230311210744505" style="zoom:50%;" 
                >

<h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h3><h4 id="无序列表-："><a href="#无序列表-：" class="headerlink" title="无序列表  ："></a>无序列表  ：</h4><p>顾名思义，无序列表中的列表选项是并列且无序的，无优先级之分</p>
<p><code>比较重要的是 &lt;ul&gt; 标签中只可以加&lt;li&gt;标签 不可以放&lt;P&gt;等其他标签，也不可以在&lt;li&gt;标签之外加文字，</code></p>
<p>但是 &lt; li&gt;之中可以存放其他的任何标签</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">类似于table  和 tr 、td</span><br><span class="line">无序列表中也有着分层  即： </span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span> 列表项1    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span> 列表项2    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span> 列表项3    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202303112107821.png"
                      alt="image-20230311210759692"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202303112108181.png"
                      alt="image-20230311210824027" style="zoom:50%;" 
                ></p>
<h4 id="有序列表-上图"><a href="#有序列表-上图" class="headerlink" title="有序列表         				(上图)"></a>有序列表         				(上图)</h4><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> 列表项1    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span> 列表项2    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span> 列表项3    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">同样，<span class="tag">&lt;<span class="name">ol</span>&gt;</span>标签之间只可以用<span class="tag">&lt;<span class="name">li</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span>  但是<span class="tag">&lt;<span class="name">li</span>&gt;</span>之间任意</span><br></pre></td></tr></table></figure></div>

<h4 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h4><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>  关注我们<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span> 新浪微博<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dd</span>&gt;</span> 官方微信<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dd</span>&gt;</span> 联系我们<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">注意事项同 上，dl之间只可以用 <span class="tag">&lt;<span class="name">dd</span>&gt;</span> <span class="tag">&lt;<span class="name">dt</span>&gt;</span>  </span><br></pre></td></tr></table></figure></div>

<h4 id="x3D-x3D-去除子项的圆点-x3D-x3D"><a href="#x3D-x3D-去除子项的圆点-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;去除子项的圆点&#x3D;&#x3D;"></a>&#x3D;&#x3D;去除子项的圆点&#x3D;&#x3D;</h4><p>在CSS 中加上： list-style：none ;</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line"> list - style : none ; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h3><p>三部分构成：  表单域   表单控件（表单元素）  提示信息</p>
<h4 id="表单域：实现信息的收集和传递"><a href="#表单域：实现信息的收集和传递" class="headerlink" title="表单域：实现信息的收集和传递"></a>表单域：实现信息的收集和传递</h4><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span>  会把范围内的表单元素提交给服务器</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot; url地址&quot;</span> <span class="attr">method</span> =<span class="string">&quot;提交方式&quot;</span> <span class="attr">name</span>=<span class="string">&quot; 表单域名称&quot;</span>&gt;</span></span><br><span class="line">    各种表单元素控件</span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<table>
<thead>
<tr>
<th>action</th>
<th>url地址</th>
<th align="center">用于指定接收并处理表单数据的服务器的 url 地址</th>
</tr>
</thead>
<tbody><tr>
<td>method</td>
<td>get &#x2F; post</td>
<td align="center">用于设置表单数据的提交方式  get 或者是 post</td>
</tr>
<tr>
<td>name</td>
<td>名称</td>
<td align="center">用于指定表单的名称，以区分同一个页面的多个表单</td>
</tr>
</tbody></table>
<h4 id="表单控件-（input"><a href="#表单控件-（input" class="headerlink" title="表单控件 （input)"></a>表单控件 （input)</h4><ul>
<li><p>input  输入表单元素</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">注意我们的 input  是单标签</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;属性值&quot;</span>    /&gt;</span>  type的取值不同有着不同效果   </span><br></pre></td></tr></table></figure></div></li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202303112121976.png"
                      alt="image-20230311212116746"
                ></p>
<p>  ​		在这里我们要注意的是  checked元素 只可以给 单选框选项 或 多选框选项中的一个加上（即默认的选项只可以有一个）</p>
<ul>
<li><h4 id="select-下拉表单元素"><a href="#select-下拉表单元素" class="headerlink" title="select 下拉表单元素"></a>select 下拉表单元素</h4><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span> 选项1 <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span> 选项2 <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span> 选项3 <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><h4 id="textarea-文本域元素"><a href="#textarea-文本域元素" class="headerlink" title="textarea 文本域元素"></a>textarea 文本域元素</h4><p>实现多行文本输入的控件</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">&quot;这是每行可以显示的字符数&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;这是行数&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="lt-label-gt-标签"><a href="#lt-label-gt-标签" class="headerlink" title="&lt; label&gt;  标签"></a>&lt; label&gt;  标签</h3><p>label 标签为input元素定义的标注 （ 标签  ），其用于绑定一个表单元素，当点击标签内的文本时，浏览器就会自动将焦点（光标）转到或选择对应的表单元素上，以提高用户体验</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span> =<span class="string">&quot; 下文id &quot;</span>&gt;</span>  内容 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio &quot;</span> <span class="attr">id</span> =<span class="string">&quot;...&quot;</span> /&gt;</span> </span><br><span class="line"></span><br><span class="line">************* 	只有这里的for属性要设置为 对应的 id	*******************</span><br><span class="line"></span><br><span class="line">示例： </span><br><span class="line">性别 :<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sexmale&quot;</span>&gt;</span> 男 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex0&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sexmale&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sexfemale&quot;</span>&gt;</span> 女 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex0&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sexfemale&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span> html.test <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;xxx.php&quot;</span> <span class="attr">methed</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    用户名 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;请输入用户名&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;6&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>密码 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;12&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--性别这里必须要有相同的 name 才可以实现多选一   label标签  --&gt;</span></span><br><span class="line">    性别 :<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sexmale&quot;</span>&gt;</span> 男 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex0&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sexmale&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sexfemale&quot;</span>&gt;</span> 女 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex0&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sexfemale&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--这是多选 --&gt;</span></span><br><span class="line">    爱好 : 吃饭<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span> 睡觉 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>打豆豆<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;免费注册&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span>    <span class="comment">&lt;!--submit是将我们的form中的数据提交到后台服务器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span>  <span class="comment">&lt;!--reset就把表单清空为初始状态呢--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    普通按钮  button  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;发送短信验证码&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    file属性  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传头像&quot;</span> <span class="attr">name</span>=<span class="string">&quot;img&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h3><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>小胡的图片下载网站<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>欢迎来到小胡下载网站 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#links&quot;</span>&gt;</span> 去跳转 <span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/girl.jpg&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span> <span class="attr">title</span>=<span class="string">&quot;girl&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/winter.jpg&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500&quot;</span> <span class="attr">title</span>=<span class="string">&quot;winter&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--注册页面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;table align=&quot;center&quot; border=&quot;1&quot; cellpadding=&quot;5&quot; cellspacing=&quot;0&quot; width=&quot;300&quot; height=&quot;200&quot;&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span> 姓名 ：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span> 密码 ：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span> 性别 ：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span> 男 <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;female&quot;</span>&gt;</span> 女 <span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--            &lt;td&gt; &lt;select&gt; &lt;option&gt; 男&lt;/option&gt; &lt;option&gt; 女&lt;/option&gt;&lt;/select&gt;&lt;/td&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;60&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span> 自我介绍 ：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">row</span>=<span class="string">&quot;100&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;40&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span> 籍贯 ：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span> 华中<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span> 西北<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span> 华南<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span> 华北<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;tr colspan=&quot;2&quot;&gt;&lt;/tr&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span> 表格操作 ：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;免费注册&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span>    <span class="comment">&lt;!--submit是将我们的form中的数据提交到后台服务器--&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span>  <span class="comment">&lt;!--reset就把表单清空为初始状态呢--&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;links&quot;</span>&gt;</span> 相关链接 <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;download.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>下载图片压缩包<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.bilibili.com/?spm_id_from=333.1007.0.0&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/bilibili.png&quot;</span></span></span><br><span class="line"><span class="tag">                                                                                   <span class="attr">height</span>=<span class="string">&quot;100&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://lol.qq.com/main.shtml&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/lol.png&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
]]></content>
  </entry>
  <entry>
    <title>CSS基础</title>
    <url>/2023/04/12/CSS%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p>鉴于HTML的页面的局限性，我们利用CSS来解决，中文：层叠样式表，是一种标记语言。</p>
<p>CSS最大的价值 ：由 HTML 专注去做结构呈现，样式由 CSS 来完成，实现结构与样式的相分离，CSS由两部分组成，选择器以及若干条声明。</p>
<p><strong>CSS是在&lt; head&gt;中插入标签 &lt; style&gt; &lt; style&gt;,并在其中设置样式，与 HTML 中的&lt; body&gt;相分离</strong>。</p>
<h3 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h3><ul>
<li>基础选择器 ：标签选择器、类选择器、id选择器、通配符选择器</li>
<li>复合选择器</li>
</ul>
<h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><p>利用 HTML 中的标签进行选择，为页面中的某一类标签操作，以达到快速页面中某一类标签的样式</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS_study<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span> &#123;  <span class="comment">/*选择器 &#123; 样式设置 ；&#125;*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: chartreuse;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 我是修改颜色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><p>当我们需要在页面中选择某一个或者几个标签时，即差异化选择不同的标签，使用类选择器</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line">  .类名 &#123;</span><br><span class="line">属性1：属性值；</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">实例：</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS_study<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: chartreuse;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.try</span> &#123; 	<span class="comment">/*注意这里的点不可以丢*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;try&quot;</span>&gt;</span> 我是修改颜色<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!--这里使用类选择器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>薛之谦<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> 认真的雪<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;try&quot;</span>&gt;</span> 丑八怪<span class="tag">&lt;/<span class="name">li</span>&gt;</span>   <span class="comment">&lt;!--这里使用类选择器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> 演员<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="多类名"><a href="#多类名" class="headerlink" title="多类名"></a>多类名</h4><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.red</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.font35</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;<span class="comment">/* 这里的px是像素 */</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">     <span class="attribute">font-size</span>: <span class="number">35px</span>; <span class="comment">/*字体字号*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;red font35&quot;&gt; 多类名的使用 &lt;/<span class="selector-tag">div</span>&gt;   用空格隔开类名</span><br></pre></td></tr></table></figure></div>

<h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><p>和类选择器的最大的区别就是 ： id只可以用一次</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"> <span class="selector-id">#id</span>名 &#123;</span><br><span class="line"> 属性：属性值</span><br><span class="line">     ...</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">div</span> id=&quot;...&quot;&gt; &lt;/<span class="selector-tag">div</span>&gt;   类似于类选择器</span><br></pre></td></tr></table></figure></div>

<h4 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h4><p>作用于页面所有的标签  ，’” * “‘ 定义</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">*  &#123;</span><br><span class="line">属性： 属性值</span><br><span class="line"></span><br><span class="line">...&#125;</span><br><span class="line">eg：</span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>; <span class="comment">/*这是清楚页面内所有的内外边距*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>通配符选择器不需要调用，自动就会给所有的元素使用样式</p>
<h3 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h3><h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><p>又称为包含选择器，当我们需要将某个父标签中的所有子元素筛选出来</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">例如我们需要将 <span class="selector-tag">ol</span> 中的 <span class="selector-tag">li</span> 筛选出</span><br><span class="line"><span class="selector-tag">ol</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>：pink;</span><br><span class="line">&#125;</span><br><span class="line">我们要注意的是 ，<span class="selector-tag">ol</span> <span class="selector-tag">li</span> 这代表我们只修改 <span class="selector-tag">li</span> 中的内容，但是如果 <span class="selector-tag">li</span> 中仍然有标签，我们需要继续一层一层往下寻找</span><br><span class="line">   eg：   <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span></span><br></pre></td></tr></table></figure></div>

<p>如果我们有两个 ul，需求第二个ul中的 li内容 变色</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">可以为目标<span class="selector-tag">ul</span> 添加类 再进行 后代选择器</span><br><span class="line"> <span class="selector-class">.class</span> <span class="selector-tag">li</span> ...</span><br></pre></td></tr></table></figure></div>



<h4 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h4><p>只能选择某元素最近一级的子元素  </p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">父元素 &gt; 子元素 &#123; &#125;</span><br><span class="line">其会作用于所有第一级子标签，筛选出第一级所有指定的标签</span><br><span class="line"><span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;我是<span class="selector-tag">p</span>标签<span class="number">1</span>&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">span</span>&gt;我是<span class="selector-tag">span</span>标签&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;我是<span class="selector-tag">p</span>标签<span class="number">2</span>&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">例如上述<span class="selector-tag">div</span>，<span class="selector-tag">div</span>&gt;<span class="selector-tag">p</span>  会作用两句<span class="selector-tag">p</span>标签</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h4><p>选择多组标签，同时为他们定义相同的样式，多用于集体申明 。<strong>任何形式的选择器也可加入并集选择器</strong></p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> ,<span class="selector-tag">p</span> ,<span class="selector-tag">span</span> &#123; ... &#125;中间用英文逗号去隔开</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> , <span class="selector-tag">span</span> ,<span class="selector-class">.class</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> , &#123;  &#125;</span><br></pre></td></tr></table></figure></div>

<p>约定并集选择器中各项竖着写 ：</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> , </span><br><span class="line"><span class="selector-tag">span</span> ,</span><br><span class="line"><span class="selector-class">.class</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>  &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h4><p>其用于向某些选择器添加特殊的效果，常见的有链接伪类，表单伪类，结构伪类</p>
<h5 id="链接伪类"><a href="#链接伪类" class="headerlink" title="链接伪类"></a>链接伪类</h5><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> : link        选择所有未被访问的链接</span><br><span class="line">a : visited   选择所有已被访问的链接</span><br><span class="line">a : hover    选择鼠标指针位于其上的链接     即鼠标经过时字体显现的颜色</span><br><span class="line">a : active    选择活动链接 （鼠标按下未弹起的链接）   即鼠标按下未松开时显现的颜色</span><br></pre></td></tr></table></figure></div>

<p>语法规范：  链接伪类有固定的顺序 ： link–&gt;  visited–&gt;  hover–&gt;  active </p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">在CSS中另外开辟 </span><br><span class="line"><span class="selector-tag">a</span> ：link &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h5 id="inofocus-伪类选择器"><a href="#inofocus-伪类选择器" class="headerlink" title="inofocus 伪类选择器"></a>inofocus 伪类选择器</h5><p>用于获取焦点的<strong>表单元素</strong>  ，焦点即光标,一般与 input 相关。</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span> : focus &#123;</span><br><span class="line">		....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="div盒子"><a href="#div盒子" class="headerlink" title="div盒子"></a>div盒子</h3><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"> <span class="selector-class">.red</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;<span class="comment">/* 这里的px是像素 */</span></span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;red&quot;&gt; &lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="字体属性"><a href="#字体属性" class="headerlink" title="字体属性"></a>字体属性</h3><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: ‘微软雅黑’；（Microsoft Yahei）</span><br><span class="line">多个字体逗号隔开</span><br><span class="line"></span><br><span class="line">font-size：<span class="number">20px</span>;   设置字体大小</span><br><span class="line">eg：</span><br><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>：<span class="number">35px</span>;  这是设置<span class="selector-tag">body</span>内容字体大小，字体样式同样适用</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">// 但是这里要注意，标题文字大小需要我们另外设置，<span class="selector-tag">body</span>操作内容无法设置</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304120841052.png"
                      alt="image-20230412084129642"
                ></p>
<p>font-style  文本样式</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304120841341.png"
                      alt="image-20230412084153001" style="zoom: 50%;" 
                >

<h3 id="字体的复合属性"><a href="#字体的复合属性" class="headerlink" title="字体的复合属性"></a>字体的复合属性</h3><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">		<span class="attribute">font-weight</span>: </span><br><span class="line">            font-size:</span><br><span class="line">            font-size:</span><br><span class="line">            font-family:</span><br><span class="line">            顺序：  font :  font-style  font-weight font-size / line-hetght font-family  </span><br><span class="line">            //一定要注意顺序  另外，font-family  font-size 不可以省略</span><br><span class="line">&#125;</span><br><span class="line">&lt;/stye&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h3><h4 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h4><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、预定值的颜色</span><br><span class="line"><span class="number">2</span>、十六进制 ： <span class="selector-id">#123456</span></span><br><span class="line">rgb ：rgb(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>)  或者  rgb(<span class="number">100%</span>, <span class="number">0%</span>, <span class="number">0%</span>)</span><br></pre></td></tr></table></figure></div>

<h4 id="文本对齐"><a href="#文本对齐" class="headerlink" title="文本对齐"></a>文本对齐</h4><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-align</span> 设置元素内文本水平对齐的方式</span><br><span class="line">取值：  center  、<span class="attribute">left</span> （默认）、<span class="attribute">right</span></span><br></pre></td></tr></table></figure></div>

<h4 id="文本装饰"><a href="#文本装饰" class="headerlink" title="文本装饰"></a>文本装饰</h4><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-decoration</span></span><br><span class="line"><span class="attribute">none</span>   无</span><br><span class="line">underline  下划线</span><br><span class="line">overline 上划线 </span><br><span class="line">line-through 删除线</span><br><span class="line"></span><br><span class="line">eg： 我们的连接都是默认有下划线并且是蓝色的</span><br><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">html</span> lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-<span class="number">8</span>&quot;&gt;</span><br><span class="line">    &lt;title&gt;zip_download&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="selector-class">.decoration</span> &#123;</span><br><span class="line">            <span class="attribute">text-decoration</span>: none;</span><br><span class="line">            <span class="attribute">color</span>: black;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">a</span> class=&quot;decoration&quot; href=&quot;https://www.xslcv.com/girl/<span class="number">43105</span>/<span class="number">22433616</span>.html<span class="string">&quot;&gt; &lt;h1&gt; 下载&lt;/h1&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure></div>

<h4 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h4><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-indent</span>：<span class="number">10px</span>;  首行缩进<span class="number">10</span>像素</span><br><span class="line"><span class="attribute">text-indent</span>：<span class="number">10em</span>;  <span class="selector-tag">em</span>指的是当前文本一个文字的宽度</span><br></pre></td></tr></table></figure></div>

<h4 id="行间距"><a href="#行间距" class="headerlink" title="行间距"></a>行间距</h4><p> <strong>line-height</strong> 设置文本行之间的距离  （行高）,行间距是设置上下间距的高度来进行行间距的控制</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304120842696.png"
                      alt="image-20230412084209370" style="zoom:50%;" 
                >

<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">26px</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="CSS的引入方式"><a href="#CSS的引入方式" class="headerlink" title="CSS的引入方式"></a>CSS的引入方式</h3><h4 id="1、行内样式表（行内式）"><a href="#1、行内样式表（行内式）" class="headerlink" title="1、行内样式表（行内式）"></a>1、行内样式表（行内式）</h4><p>当我们需要修改的 属性 或者是 样式 比较简单时，</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">color</span>: red<span class="string">&quot; ; font-size: 12px ; &gt;.......   &lt;/div&gt;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="2、内部样式表（嵌入式）"><a href="#2、内部样式表（嵌入式）" class="headerlink" title="2、内部样式表（嵌入式）"></a>2、内部样式表（嵌入式）</h4><p>即将我们的CSS代码全部抽取出来，集中放到 style 标签中。</p>
<p>理论上可以放到html中的任何位置，但是我们通常将它放在我们的 head 中</p>
<h4 id="3、外部样式表（链接式）"><a href="#3、外部样式表（链接式）" class="headerlink" title="3、外部样式表（链接式）"></a>3、外部样式表（链接式）</h4><p>样式比较多的时，我们可以在html 文件中单独创建一个新的 CSS 文件，之后将CSS文件引入HTML 文件中</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">   &lt;link rel=&quot;stylesheet&quot; href=&quot;new<span class="selector-class">.css</span>（ 这是我们的相对路径 ）&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"> 注意这里是在&lt;/head&gt; 标签的上方进行添加 </span><br><span class="line"></span><br><span class="line">同时 CSS 文件的内部无需添加 &lt;style&gt; 标签，同时注意 CSS 文件保存之后才可以在 <span class="selector-tag">HTML</span> 文件中进行作用</span><br><span class="line"></span><br><span class="line">外部样式比表最大的优点就是可以实现多个页面的作用</span><br></pre></td></tr></table></figure></div>



<h3 id="图片对齐"><a href="#图片对齐" class="headerlink" title="图片对齐"></a>图片对齐</h3><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">p</span> class=&quot;自定义类&quot;&gt;</span><br><span class="line">&lt;<span class="selector-tag">img</span> <span class="attribute">src</span>=&quot;...&quot; &gt;</span><br><span class="line">&lt;/<span class="selector-tag">p</span>&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="chorm调试工具"><a href="#chorm调试工具" class="headerlink" title="chorm调试工具"></a>chorm调试工具</h3><p>代开chorm浏览器，F12按键或者右键空白处–&gt;检查      Elements</p>
<h3 id="Emmet-语法"><a href="#Emmet-语法" class="headerlink" title="Emmet  语法"></a>Emmet  语法</h3><p>使用缩写以提高HTML&#x2F;CSS的编写速度</p>
<h4 id="1、HTML结构语法"><a href="#1、HTML结构语法" class="headerlink" title="1、HTML结构语法"></a>1、HTML结构语法<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304120842797.png"
                     
                ></h4><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">对于id 和类名  ，默认是<span class="selector-tag">div</span>  下面是修改部分：</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.class</span>   </span><br><span class="line"><span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span><span class="selector-id">#123</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.demo</span>$*<span class="number">5</span>  下面是效果：↓       即实现数字序号的自增</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;demo1&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;demo2&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;demo3&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;demo4&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;demo5&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure></div>



<h4 id="2、CSS结构语法"><a href="#2、CSS结构语法" class="headerlink" title="2、CSS结构语法"></a>2、CSS结构语法</h4><p>即简写 ：打字母的手写  +  table  例如：</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">ti2em   + tabel 自动生成 <span class="attribute">text-indent</span>  ： <span class="number">2em</span>；</span><br><span class="line">h200 +<span class="selector-tag">table</span>   </span><br><span class="line"> w300 ....</span><br></pre></td></tr></table></figure></div>

<h3 id="CSS元素显示模式"><a href="#CSS元素显示模式" class="headerlink" title="CSS元素显示模式"></a>CSS元素显示模式</h3><p>html 元素分为： <strong>块元素 、行内元素</strong></p>
<h5 id="1、常见块元素-div-、h1-、p、ul、li"><a href="#1、常见块元素-div-、h1-、p、ul、li" class="headerlink" title="1、常见块元素 : div 、h1 、p、ul、li"></a>1、常见块元素 : div 、h1 、p、ul、li</h5><p>特点： </p>
<ul>
<li><p>独占一行</p>
</li>
<li><p>宽度、高度、内外边距可控</p>
</li>
<li><p>宽度默认是容器的100%</p>
</li>
<li><p>是一个盒子，里面可以存放其他的元素</p>
<p><strong>注意点：</strong></p>
</li>
</ul>
<p>文字类（例如 p、h ）的元素中不可以加块级元素</p>
<h5 id="2、常见行内元素-lt-a-gt-、-lt-em-gt-lt-del-gt-lt-span-gt"><a href="#2、常见行内元素-lt-a-gt-、-lt-em-gt-lt-del-gt-lt-span-gt" class="headerlink" title="2、常见行内元素  &lt; a&gt; 、&lt; em&gt; &lt; del&gt; &lt; span &gt;"></a>2、常见行内元素  &lt; a&gt; 、&lt; em&gt; &lt; del&gt; &lt; span &gt;</h5><p>特点：</p>
<ul>
<li>一行可以显示多个</li>
<li><strong>高宽直接设置是无效的</strong></li>
<li>默认宽度是其本身的宽度</li>
<li>其中只可以存放文字元素或者是其他行内元素</li>
</ul>
<p>注意：</p>
<p>特殊的，&lt; a&gt;中可以存放块级元素，但是转化为块级更为安全</p>
<h4 id="3、行内块元素"><a href="#3、行内块元素" class="headerlink" title="3、行内块元素"></a>3、行内块元素</h4><p>同时具有行内元素和块级元素的特点，例如： img 、input 、td</p>
<p>特点：</p>
<ul>
<li>和相邻行内元素在同一行中，但是之间会有空隙，一行可以显示多个</li>
<li>默认宽度是本身内容的宽度</li>
<li>高度、宽度、内外边距都是可以设置的</li>
</ul>
<h3 id="显示模式的转换"><a href="#显示模式的转换" class="headerlink" title="显示模式的转换"></a>显示模式的转换</h3><p>转化为块级元素： <strong>display ： block；</strong></p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">是在style中进行修改：  例如下面的修改&lt;<span class="selector-tag">a</span>&gt;为块级元素</span><br><span class="line">&lt;<span class="selector-tag">a</span> href=&quot;www......&quot;  &gt;   &lt;/<span class="selector-tag">a</span>&gt;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    w100px;</span><br><span class="line">    h50px;</span><br><span class="line">    <span class="attribute">display</span> : block ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>转化为行内元素 ： display ： inline ；</p>
<p>转化为行内块 ： display ： inline-block ；</p>
<p>应用：对于行内元素 span ，我们可以设置为行内块元素，设置其宽高，一行显示多个</p>
<h3 id="模式转化实例"><a href="#模式转化实例" class="headerlink" title="模式转化实例"></a>模式转化实例</h3><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>实验案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;eg.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> &gt;</span> sapn1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> &gt;</span> sapn1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> &gt;</span> sapn1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> &gt;</span> sapn1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">232</span>, <span class="number">123</span>, <span class="number">68</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">83</span>, <span class="number">87</span>, <span class="number">88</span>);</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="单行文字居中技巧"><a href="#单行文字居中技巧" class="headerlink" title="单行文字居中技巧"></a>单行文字居中技巧</h4><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">水平居中： <span class="attribute">text-align</span> ：center ；</span><br><span class="line">垂直居中 ： 行高等于盒子高度 </span><br><span class="line">eg ： </span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">height</span> : <span class="number">40px</span> ;</span><br><span class="line">    <span class="attribute">line-height</span> : <span class="number">40px</span> ;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304120842055.png"
                      alt="image-20230412084230688"
                ></p>
<h3 id="CSS背景"><a href="#CSS背景" class="headerlink" title="CSS背景"></a>CSS背景</h3><h4 id="背景颜色："><a href="#背景颜色：" class="headerlink" title="背景颜色："></a>背景颜色：</h4><p>blackground-color 默认的为透明</p>
<p>可以设置为 两种数值： transparent  |   color </p>
<h4 id="背景图片："><a href="#背景图片：" class="headerlink" title="背景图片："></a>背景图片：</h4><p>background-image: url(图片地址)；</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    h...</span><br><span class="line">    w..</span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">图片地址</span>)    ；</span><br><span class="line"> &#125;   如果我们的盒子大于图片的尺寸，图片默认以平铺的效果占据整个盒子</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>值得我们注意的是，背景颜色和背景图片同时显示的时候，颜色会存在于最底层，背景图片会压住我们的底色</strong></p>
<h4 id="背景自适应父级"><a href="#背景自适应父级" class="headerlink" title="背景自适应父级"></a>背景自适应父级</h4><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-size</span>：<span class="number">100%</span> <span class="number">20%</span>；  即缩放图片宽为原来<span class="number">100%</span>  高位<span class="number">20%</span></span><br></pre></td></tr></table></figure></div>

<h4 id="背景平铺"><a href="#背景平铺" class="headerlink" title="背景平铺"></a>背景平铺</h4><p>background-repeat :  repeat | no-repeat | repeat-x | repeat-y </p>
<h4 id="背景图片的位置"><a href="#背景图片的位置" class="headerlink" title="背景图片的位置"></a>背景图片的位置</h4><p><strong>方位名词</strong></p>
<p>background-position : x   y ;</p>
<p>后面的坐标 xy 可以替换为方位名词或者精确单位</p>
<p>left top 和 top left  是一样的  ，XY位置可交换</p>
<p>注意 替换为 X 的方位名词  left center  right</p>
<p>替换 Y 的方位名词 top bottom center</p>
<ul>
<li>省略：</li>
</ul>
<p>第二个参数省略，y轴就会是垂直居中</p>
<p>第一个省略，x轴就是水平居中显示</p>
<p><strong>精确像素</strong></p>
<p>background-position: x y ;</p>
<p>这里的 x 是距离左侧边界的距离 ，y是距离上边界的距离  ，单位是像素</p>
<p>若是省略只写一个数字，那么该数字一定是x的坐标，另外一项就会是垂直居中</p>
<p><strong>混合单位</strong></p>
<blockquote>
<p>精确单位和方位名词混合使用，但是这个时候要注意 ：第一个一定是指点的 x , 另外一个一定是 y</p>
</blockquote>
<h4 id="背景固定（背景附着）"><a href="#背景固定（背景附着）" class="headerlink" title="背景固定（背景附着）"></a>背景固定（背景附着）</h4><p>即滚动页面的时候，我们背景是否随之滚动</p>
<p>background-attachment  属性设置背景图像是固定或者随着页面的其余部分滚动</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">取值： fixed  、 scroll</span><br></pre></td></tr></table></figure></div>

<h4 id="提倡用背景的复合写法"><a href="#提倡用背景的复合写法" class="headerlink" title="提倡用背景的复合写法"></a>提倡用背景的复合写法</h4><p>约定书写顺序 ： 背景颜色 地址 平铺 背景滚动 背景位置     （实际上顺序并无影响）</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span> : black <span class="built_in">url</span>(<span class="string">...</span>) no-repeat fixed center top ;</span><br></pre></td></tr></table></figure></div>

<h4 id="背景色半透明"><a href="#背景色半透明" class="headerlink" title="背景色半透明"></a>背景色半透明</h4><p>&#x3D;&#x3D;background ：rgba( 0 , 0 , 0 , 0.3 )**前面是颜色 rgb , 后面是透明度 取值在 0~1 之间  </p>
<p>0.3可以简写为 .3</p>
<h3 id="鼠标悬停背景切换-案例"><a href="#鼠标悬停背景切换-案例" class="headerlink" title="鼠标悬停背景切换 案例"></a>鼠标悬停背景切换 案例</h3><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">html</span> lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-<span class="number">8</span>&quot;&gt;</span><br><span class="line">    &lt;title&gt;实验案例&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;eg<span class="selector-class">.css</span>&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">a</span>  href=&quot;https://yz.lol.qq.com/zh_CN/champion/malphite/<span class="string">&quot; target=&quot;</span>_blank<span class="string">&quot; class=&quot;</span>stone<span class="string">&quot;&gt;导航1&lt;/a&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">										-----------------CSS部分------------------</span></span><br><span class="line"><span class="string">a &#123;</span></span><br><span class="line"><span class="string">    display: inline-block;</span></span><br><span class="line"><span class="string">    width: 200px;</span></span><br><span class="line"><span class="string">    height: 80px;</span></span><br><span class="line"><span class="string">    text-decoration: none;+</span></span><br><span class="line"><span class="string">    color: black;</span></span><br><span class="line"><span class="string">    line-height: 80px;</span></span><br><span class="line"><span class="string">    text-align: center;</span></span><br><span class="line"><span class="string">    background-color: pink;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">.stone  &#123;</span></span><br><span class="line"><span class="string">    background-image: url(images/stone.webp);</span></span><br><span class="line"><span class="string">    /*background-position: center center;*/</span></span><br><span class="line"><span class="string">    background-size: 70%;   图片自适应为原来大小的 70%</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">.stone:hover&#123;         这里有一点要注意 冒号后面加空格会报错   同时类名之后没有加 &lt;a</span></span><br><span class="line"><span class="string">    background-image: url(images/stone2.webp);</span></span><br><span class="line"><span class="string">    background-size: 70%;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure></div>

<h3 id="CSS三大特性"><a href="#CSS三大特性" class="headerlink" title="CSS三大特性"></a>CSS三大特性</h3><p>1、层叠性 ：主要解决样式的冲突 ：相同的选择器设置相同的样式，这时若有冲突会实现覆盖（层叠）；  执行按照顺序结构。</p>
<p>2、继承性 ： 子标签继承父级标签样式</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">例如：</span><br><span class="line">&lt;<span class="selector-tag">div</span>&gt; </span><br><span class="line">&lt;<span class="selector-tag">p</span>&gt;   &lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">此时我们为<span class="selector-tag">div</span>设置字体等属性，同样会继承到 <span class="selector-tag">p</span> 上 </span><br></pre></td></tr></table></figure></div>

<p>可以被继承的属性： text-  、  font-   、   line-  以及 color</p>
<ul>
<li>行高是可以被继承的，另外行高可以不跟上单位px，但是省略后单位就是 em</li>
</ul>
<p>3、优先级</p>
<p>选择器相同时，按照就近原则</p>
<p>选择器不同时按照权重：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304120842453.png"
                      alt="image-20230412084239110"
                ><strong>优先级由上往下递增</strong></p>
<p>元素选择器即标签选择器</p>
<p><strong>!important 用法 ：</strong></p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">color</span> ：red !important；   注意分号之前</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>**注意继承过来的权重为 0&#x3D;&#x3D;</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> id=&quot;father&quot;   &gt;     &lt;<span class="selector-tag">p</span>&gt;  &lt;/<span class="selector-tag">p</span>&gt;    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br><span class="line">CSS :</span><br><span class="line">#father &#123;</span><br><span class="line">    <span class="attribute">color</span> ：red ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span> : pink  ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这里虽然id选择器的优先级高于元素选择器，但是由于id选择器是继承过来的，所以权重是0，即，一旦我们对于某个子元素定义新的样式，就以新的为主 </p>
<p><strong>复合标签的优先级</strong></p>
<p>复合选择器会有权重叠加的情况：</p>
<p>ul li { color : red; }  优先级： 0 0 0 1+ 0 0 0 1 </p>
<p>li {  color :pink ;}   0 0 0 1</p>
<p>注意我们的权重相加的时候<strong>没有进位</strong></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304120842949.png"
                      alt="image-20230412084248615" style="zoom:50%;" 
                >

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304120842476.png"
                      alt="image-20230412084259140" style="zoom: 50%;" 
                >

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304120843406.png"
                      alt="image-20230412084314042" style="zoom:50%;" 
                >

<h3 id="盒子模型（Box-Model）"><a href="#盒子模型（Box-Model）" class="headerlink" title="盒子模型（Box Model）"></a>盒子模型（Box Model）</h3><p>四部分： 边框 border，内边距 padding ，外边距 margin，实际内容 content</p>
<h4 id="border"><a href="#border" class="headerlink" title="border"></a>border</h4><p>内边距是边框是内容之间的距离，外边距是盒子之间的距离</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border</span> : border-width || border-style || border-color</span><br><span class="line"></span><br><span class="line">border-width : medium | thin | thick | length </span><br><span class="line">medium : 　默认宽度</span><br><span class="line">thin : 　小于默认宽度</span><br><span class="line">thick : 　大于默认宽度</span><br><span class="line">length : 　由浮点数字和单位标识符组成的长度值。不可为负值。</span><br><span class="line"></span><br><span class="line">border-style : none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset  </span><br><span class="line">none : 　无边框。与任何指定的border-width值无关 </span><br><span class="line">hidden : 　隐藏边框。IE不支持 </span><br><span class="line">dotted : 　在MAC平台上IE4+与WINDOWS和UNIX平台上IE5.<span class="number">5</span>+为点线。否则为实线 </span><br><span class="line">dashed : 　在MAC平台上IE4+与WINDOWS和UNIX平台上IE5.<span class="number">5</span>+为虚线。否则为实线 </span><br><span class="line">solid : 　实线边框 </span><br><span class="line">double : 　双线边框。两条单线与其间隔的和等于指定的border-width值 </span><br><span class="line">groove : 　根据border-color的值画<span class="number">3</span>D凹槽 </span><br><span class="line">ridge : 　根据border-color的值画菱形边框 </span><br><span class="line">inset : 　根据border-color的值画<span class="number">3</span>D凹边 </span><br><span class="line">outset : 　根据border-color的值画<span class="number">3</span>D凸边 </span><br><span class="line"></span><br><span class="line">border-color : color </span><br><span class="line">如果提供全部四个参数值，将按上－右－下－左的顺序作用于四个边框。</span><br><span class="line">如果只提供一个，将用于全部的四条边。</span><br><span class="line">如果提供两个，第一个用于上－下，第二个用于左－右。</span><br><span class="line">如果提供三个，第一个用于上，第二个用于左－右，第三个用于下。</span><br><span class="line">四个则为：从上边框开始，顺时针旋转</span><br><span class="line">要使用该属性，必须先设定对象的height或width属性，或者设定position属性为absolute。</span><br><span class="line">如果border-width等于<span class="number">0</span>或border-style设置为none，本属性将失去作用。 </span><br></pre></td></tr></table></figure></div>

<p>边框的复合写法是存在的，即：</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border</span> ：<span class="number">1px</span> double red   //注意这里没有顺序</span><br></pre></td></tr></table></figure></div>

<p><strong>分别控制边框四周：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">border-top  / bottom  /   left   /  right    </span><br></pre></td></tr></table></figure></div>

<p><strong>对于表格中边框的应用</strong></p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">对于所有单元格边框的应用</span><br><span class="line"><span class="selector-tag">table</span>, <span class="selector-tag">td</span>， <span class="selector-tag">th</span> &#123;</span><br><span class="line"><span class="attribute">border</span>....</span><br><span class="line">&#125;</span><br><span class="line">单独对 <span class="selector-tag">table</span> 是针对外层边框</span><br><span class="line"></span><br><span class="line">表示相邻边框合并在一起，否则边框会进行堆叠</span><br></pre></td></tr></table></figure></div>

<p>边框会影响盒子的实际大小，因此我们在制作的时候要注意减去 border-width 的两倍，以保证盒大小是预期效果。</p>
<h4 id="内边距-padding"><a href="#内边距-padding" class="headerlink" title="内边距 padding"></a>内边距 padding</h4><p>padding -left &#x2F; right &#x2F; top &#x2F; bottom ；</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">padding-left  : 50px ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="C:\Users\Forming\AppData\Roaming\Typora\typora-user-images\image-20230111084018278.png"
                      alt="image-20230111084018278" style="zoom:67%;" 
                >

<p>&#x3D;&#x3D;padding 也会影响盒子的实际大小**</p>
<p>利用padding巧妙设计盒子： <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304120843927.png"
                      alt="image-20230412084324582"
                ></p>
<h4 id="盒子外边距-margin"><a href="#盒子外边距-margin" class="headerlink" title="盒子外边距 margin"></a>盒子外边距 margin</h4><p>同样的 margin -left &#x2F; right &#x2F; top  &#x2F;  bottom</p>
<p>简写方式与 padding 一致  ，同时注意我们的外边距不会缩小后者扩大盒子</p>
<p>eg：</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">块级盒子水平居中  ：</span><br><span class="line">前提条件：    盒子已经有明确的指定宽度</span><br><span class="line">					左右外边距都设置为  auto</span><br><span class="line">写法：   <span class="attribute">margin-left</span>-auto ;   <span class="attribute">margin-right</span>-auto;</span><br><span class="line">			 <span class="attribute">margin</span>: auto;</span><br><span class="line">			 <span class="attribute">margin</span>: <span class="number">0</span> auto ;</span><br></pre></td></tr></table></figure></div>

<p><strong>要使得行内元素或者行内块元素水平居中</strong> ：</p>
<p>我们就给其父元素设置 为 ： text-align：center ；</p>
<h3 id="案例（盒子中图片居中）"><a href="#案例（盒子中图片居中）" class="headerlink" title="案例（盒子中图片居中）"></a>案例（盒子中图片居中）</h3><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">html</span> lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-<span class="number">8</span>&quot;&gt;</span><br><span class="line">    &lt;title&gt;实验案例&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;eg<span class="selector-class">.css</span>&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span>&gt;&lt;<span class="selector-tag">img</span> <span class="attribute">src</span>=&quot;images/winter<span class="selector-class">.jpg</span>&quot; <span class="attribute">width</span>=&quot;<span class="number">300px</span>&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br><span class="line"> ****=================CSS ****========================</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: orange;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="comment">/*图片水平居中，就为我们的父级标签设置  text-align: center;*/</span></span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="嵌套块元素塌陷问题"><a href="#嵌套块元素塌陷问题" class="headerlink" title="嵌套块元素塌陷问题"></a>嵌套块元素塌陷问题</h3><p>问题描述代码</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">html</span> lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-<span class="number">8</span>&quot;&gt;</span><br><span class="line">    &lt;title&gt;实验案例&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;eg<span class="selector-class">.css</span>&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;father&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;son&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br><span class="line"></span><br><span class="line">****========================CSS========================</span><br><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>:<span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:pink;</span><br><span class="line">    <span class="attribute">margin-top</span>:<span class="number">30px</span>;     //即<span class="selector-tag">div</span>嵌套，为 子<span class="selector-tag">div</span> 设置外边距会导致 父<span class="selector-tag">div</span> 同时往下移动 （父元素塌陷），而达不到子<span class="selector-tag">div</span>有外边距的效果</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>解决方案：</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>  、为父级 <span class="selector-tag">div</span> 设置内边距 <span class="attribute">padding</span> </span><br><span class="line"></span><br><span class="line"><span class="number">2</span>  、为父级 <span class="selector-tag">div</span> 设置透明边框</span><br><span class="line">这里有一个很有意思的一点，当我们的盒子中是有字体的时候，增设边框会影响盒子的大小，但是若 <span class="selector-tag">div</span> 中不存在内容，增设边框不会导致我们的盒子大小变化。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>  、为父级元素添加 <span class="attribute">overflow</span> ： hidden </span><br></pre></td></tr></table></figure></div>

<h3 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a>外边距合并</h3><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">即当我们存在上下两个盒子的时候，为上盒子设置  <span class="attribute">margin-bottom</span> ：<span class="number">10px</span>;</span><br><span class="line">								  为下盒子设置  <span class="attribute">margin-top</span> ：<span class="number">20px</span> ; 结果两个盒子之间的距离并不是<span class="number">30px</span>，而是<span class="number">20px</span>；</span><br></pre></td></tr></table></figure></div>

<p>解决方案 : 尽量只给我们邻接的一个盒子添加外边距</p>
<h3 id="清除内外边距"><a href="#清除内外边距" class="headerlink" title="清除内外边距"></a>清除内外边距</h3><p>不同浏览器的网页默认的会有不同的内外边距，大多数操作时，会清除所有的内外边距。</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">CSS首行设置</span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span> : <span class="number">0</span> ;</span><br><span class="line">    <span class="attribute">padding</span> : <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>行内元素考虑到兼容性的问题，尽量只设置左右边距，但是转化为行内块元素 或者 块元素 就可以了。</strong></p>
<h3 id="案例-（产品展示）"><a href="#案例-（产品展示）" class="headerlink" title="案例 （产品展示）"></a>案例 （产品展示）</h3><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">html</span> lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-<span class="number">8</span>&quot;&gt;</span><br><span class="line">    &lt;title&gt;实验案例&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;eg<span class="selector-class">.css</span>&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;<span class="attribute">all</span>&quot; &gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;father&quot;&gt;&lt;<span class="selector-tag">p</span> class=&quot;head&quot;&gt;热评产品&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> class=&quot;son first&quot;&gt;&lt;<span class="selector-tag">img</span> <span class="attribute">src</span>=&quot;images/<span class="number">1</span><span class="selector-class">.jpg</span>&quot; alt=&quot;image&quot; <span class="attribute">width</span>=&quot;<span class="number">200px</span>&quot;&gt;</span><br><span class="line">            &lt;<span class="selector-tag">span</span> class=&quot;pro&quot;&gt;这是我们的产品<span class="number">1</span>&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">            &lt;<span class="selector-tag">span</span> class=&quot;say&quot;&gt;这是产品描述&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">            &lt;<span class="selector-tag">span</span> class=&quot;writer&quot;&gt;作者信息&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">        &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> class=&quot;son&quot;&gt;&lt;<span class="selector-tag">img</span> <span class="attribute">src</span>=&quot;images/<span class="number">2</span><span class="selector-class">.jpg</span>&quot; alt=&quot;image&quot; <span class="attribute">width</span>=&quot;<span class="number">200px</span>&quot;&gt;</span><br><span class="line">            &lt;<span class="selector-tag">span</span> class=&quot;pro&quot;&gt;这是我们的产品<span class="number">1</span>&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">            &lt;<span class="selector-tag">span</span> class=&quot;say&quot;&gt;这是产品描述&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">            &lt;<span class="selector-tag">span</span> class=&quot;writer&quot;&gt;作者信息&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">        &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> class=&quot;son&quot;&gt;&lt;<span class="selector-tag">img</span> <span class="attribute">src</span>=&quot;images/<span class="number">3</span><span class="selector-class">.jpg</span>&quot; alt=&quot;image&quot; <span class="attribute">width</span>=&quot;<span class="number">200px</span>&quot;&gt;</span><br><span class="line">            &lt;<span class="selector-tag">span</span> class=&quot;pro&quot;&gt;这是我们的产品<span class="number">1</span>&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">            &lt;<span class="selector-tag">span</span> class=&quot;say&quot;&gt;这是产品描述&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">            &lt;<span class="selector-tag">span</span> class=&quot;writer&quot;&gt;作者信息&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">        &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> class=&quot;son&quot;&gt;&lt;<span class="selector-tag">img</span> <span class="attribute">src</span>=&quot;images/<span class="number">4</span><span class="selector-class">.jpg</span>&quot; alt=&quot;image&quot; <span class="attribute">width</span>=&quot;<span class="number">200px</span>&quot;&gt;</span><br><span class="line">            &lt;<span class="selector-tag">span</span> class=&quot;pro&quot;&gt;这是我们的产品<span class="number">1</span>&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">            &lt;<span class="selector-tag">span</span> class=&quot;say&quot;&gt;这是产品描述&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">            &lt;<span class="selector-tag">span</span> class=&quot;writer&quot;&gt;作者信息&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">        &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br><span class="line"></span><br><span class="line">****===================CSS===================</span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">images/street.jpg</span>);</span><br><span class="line">    <span class="attribute">background-position</span>: center center;</span><br><span class="line">    <span class="comment">/*opacity:0.8;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">images/street.jpg</span>);</span><br><span class="line">    <span class="attribute">background-position</span>: center center;</span><br><span class="line">    <span class="comment">/*opacity:0.4;*/</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f7f7f7</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">2px</span> inset grey ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*span &#123;*/</span></span><br><span class="line"><span class="comment">/*    display: block;*/</span></span><br><span class="line"><span class="comment">/*    width: 80%;*/</span></span><br><span class="line"><span class="comment">/*    height: 80px;*/</span></span><br><span class="line"><span class="comment">/*    background-color: skyblue;*/</span></span><br><span class="line"><span class="comment">/*&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.head</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">5px</span> ridge orange;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>:<span class="number">0.8</span>;<span class="comment">/*设置透明度*/</span></span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">220px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">5px</span> <span class="number">5px</span> <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.first</span>  &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">35px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pro</span> &#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:gold;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.say</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:orangered;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.writer</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: right;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">background-color</span>:pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="圆角边框"><a href="#圆角边框" class="headerlink" title="圆角边框"></a>圆角边框</h3><p>在盒子CSS中加入   &#x3D;&#x3D;border - radius&#x3D;&#x3D;</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">			<span class="attribute">border</span> - radius : <span class="number">10px</span> 或者是百分比;   //后面的数值是四个角圆形的半径</span><br><span class="line">&#125;  </span><br><span class="line">如果 <span class="attribute">border</span> - radius : <span class="number">50%</span> ；则设置了一个圆形盒子 （前提是正方形盒子）</span><br><span class="line">若是常规长方形 ：设置半径为高的一半，可以得到曲边矩形</span><br></pre></td></tr></table></figure></div>

<p>可以设置四个值： 顺序是从左上角开始，顺时针依次。三个值也可以，详情见博客。</p>
<p>另外四个角单独设置：border - top - left -radius ：</p>
<p>​								  border - bottom -right -radius ：<strong>记住 top &#x2F; bottom 永远在第一项</strong></p>
<h3 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h3><p><strong>box -shadow</strong></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304120843160.png"
                      alt="image-20230412084335799" style="zoom:50%;" 
                >

<p>h-shadow : 影子在水平方向相对于物体的位置</p>
<p>v-shadow : y轴上相对于物体的位置</p>
<p>blur ：边缘模糊化</p>
<p>对于这个 color ，我们可以设置透明度的纯色  即 <strong>rgba (  ,   ,    ,   .3)</strong> ;</p>
<p>默认的是 outset  但是写上会报错，inset是内阴影</p>
<p><strong>阴影是不占有空间的，若能有其他盒子紧贴着 ，是会直接覆盖阴影而不影响实际盒子大小</strong></p>
<p>鼠标悬浮时增加阴影效果 </p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">box-shadow</span> : <span class="number">10px</span> <span class="number">10px</span> <span class="number">5px</span> <span class="number">10px</span> black ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="文字阴影"><a href="#文字阴影" class="headerlink" title="文字阴影"></a>文字阴影</h3><p>&#x3D;&#x3D;text - shadow ：h - shadow  v-shadow  blur color ;&#x3D;&#x3D;</p>
<h3 id="浮动-："><a href="#浮动-：" class="headerlink" title="浮动 ："></a>浮动 ：</h3><h5 id="对于一个div-，内部元素只有两种情况，全浮动-或-全不浮"><a href="#对于一个div-，内部元素只有两种情况，全浮动-或-全不浮" class="headerlink" title="对于一个div ，内部元素只有两种情况，全浮动 或 全不浮"></a>对于一个div ，内部元素只有两种情况，全浮动 或 全不浮</h5><p>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</p>
<p>传统网页的三种布局方式 ： </p>
<ul>
<li><p>普通流（标准流）：标签按照默认方式排列，块级元素独占一行，行内元素按照顺序进行排列，碰到父元素边缘自动换行。</p>
</li>
<li><p>浮动流  ： </p>
<p>受限于行内块元素水平摆放中间会有无法控制的空白缝隙，所以我们利用浮动布局，即浮动可以改变盒子默认的排序方式**</p>
<p>网页布局第一准则：多个块元素纵向排列找标准流，横向排列用浮动布局</p>
</li>
<li><p>定位流  ： 不随网页的滚动而改变位置，而是一直定位在屏幕的某个位置</p>
</li>
</ul>
<h4 id="什么是浮动-？"><a href="#什么是浮动-？" class="headerlink" title="什么是浮动 ？"></a>什么是浮动 ？</h4><p>&#x3D;&#x3D;float&#x3D;&#x3D; 属性用于创建浮动框 ，将其移到一边，直到左边缘或右边缘触及父级块或者另一个浮动框边缘</p>
<p>float ：none &#x2F; left &#x2F; right ；向左&#x2F;右浮动</p>
<p>对于两个div ：</p>
<ul>
<li><p>如果想要两个div 想要水平居于同行 ，则需要在两个div中都加上float ：left ；</p>
</li>
<li><p>若是只给后面一个盒子加上，两个盒子会依旧是两行</p>
</li>
<li><p>若是只给前面的盒子加上，后面的盒子会忽视前一个盒子而重叠，但是文字不重叠.并且是float盒子压住标准流元素</p>
</li>
<li><p><strong>前面的盒子浮动会压住后面不浮动盒子，但是盒子的内容不会压住</strong></p>
<p>之所以浮动不会压住后方盒子的文字，是因为浮动本身设计是为了左文字环绕效果的。</p>
</li>
</ul>
<h4 id="浮动特性"><a href="#浮动特性" class="headerlink" title="浮动特性"></a>浮动特性</h4><ul>
<li><p>浮动的元素会脱离标准流</p>
<ul>
<li>脱离标准流的控制 （浮），移动到指定的位置 （动）  俗称脱标</li>
<li>浮动的盒子不在保留原先的位置</li>
</ul>
</li>
<li><p>浮动的元素会一行内显示并且顶部对齐，若是超出会进行自动的换行</p>
</li>
<li><p>浮动元素会具有<strong>行内块元素的性质</strong> ： 任何元素都可浮动，浮动后的元素都会具有行内块元素的性质，可设置长、宽 。若是我们未设置浮动元素的高或者宽，则会根据内容自适应 。</p>
</li>
</ul>
<h4 id="浮动元素经常和标准流父级搭配使用"><a href="#浮动元素经常和标准流父级搭配使用" class="headerlink" title="浮动元素经常和标准流父级搭配使用"></a>浮动元素经常和标准流父级搭配使用</h4><p><strong>为约束浮动元素的位置，我们通常用标准流父元素排列位置，之后内部子元素采取浮动排列左右位置</strong>，这符合网页布局第一准则（三种搭配使用）</p>
<h4 id="若是想要我们的浮动元素存在距离，就直接设置其外边距等"><a href="#若是想要我们的浮动元素存在距离，就直接设置其外边距等" class="headerlink" title="若是想要我们的浮动元素存在距离，就直接设置其外边距等"></a>若是想要我们的浮动元素存在距离，就直接设置其外边距等</h4><h3 id="浮动案例一-：小米导航链接栏"><a href="#浮动案例一-：小米导航链接栏" class="headerlink" title="浮动案例一 ：小米导航链接栏"></a>浮动案例一 ：小米导航链接栏</h3><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">html</span> lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-<span class="number">8</span>&quot;&gt;</span><br><span class="line">    &lt;title&gt;实验案例&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;eg<span class="selector-class">.css</span>&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;<span class="attribute">all</span>&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;<span class="attribute">float</span> meau&quot;&gt;</span><br><span class="line">        &lt;<span class="selector-tag">a</span> class=&quot;text&quot;href=&quot;#&quot; &gt;选项&lt;/<span class="selector-tag">a</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">a</span> class=&quot;text&quot;href=&quot;#&quot;&gt;选项&lt;/<span class="selector-tag">a</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">a</span> class=&quot;text&quot;href=&quot;#&quot;&gt;选项&lt;/<span class="selector-tag">a</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">a</span> class=&quot;text&quot;href=&quot;#&quot;&gt;选项&lt;/<span class="selector-tag">a</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">a</span> class=&quot;text&quot;href=&quot;#&quot;&gt;选项&lt;/<span class="selector-tag">a</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">a</span> class=&quot;text&quot;href=&quot;#&quot;&gt;选项&lt;/<span class="selector-tag">a</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">a</span> class=&quot;text&quot;href=&quot;#&quot;&gt;选项&lt;/<span class="selector-tag">a</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">a</span> class=&quot;text&quot;href=&quot;#&quot;&gt;选项&lt;/<span class="selector-tag">a</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">a</span> class=&quot;text&quot;href=&quot;#&quot;&gt;选项&lt;/<span class="selector-tag">a</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">a</span> class=&quot;text&quot;href=&quot;#&quot;&gt;选项&lt;/<span class="selector-tag">a</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;<span class="attribute">float</span> image&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br><span class="line"></span><br><span class="line">**===============================CSS=====================</span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.all</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">20px</span> <span class="number">655px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1126px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">460px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.meau</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">234px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">420px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">73</span>, <span class="number">76</span>, <span class="number">83</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">204px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">42px</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">   <span class="attribute">line-height</span>: <span class="number">42px</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">103</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.image</span> &#123;</span><br><span class="line">    <span class="attribute">float</span><span class="selector-pseudo">:left</span> ;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">892px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">460px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">images/xiaomi.jpg</span>);</span><br><span class="line">    <span class="attribute">background-position</span>:top right;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">120%</span> <span class="number">100%</span>;    <span class="comment">/*因为我们的图片过大，有大量无效空白，因此放大*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="清除浮动布局"><a href="#清除浮动布局" class="headerlink" title="清除浮动布局"></a>清除浮动布局</h3><p>即不给父盒子高度，而是利用浮动元素来撑开，但是如果这时会出现一个情况，因为div中全是浮动元素，此时盒子会缩成一条横线，因为浮动特性 : 标准流和浮动是两条路 。 </p>
<p>清除浮动的本质： </p>
<ul>
<li>清除浮动元素造成的影响 。</li>
<li>如果盒子本身有高度则不需要清除浮动 。</li>
<li>清除浮动之后，<strong>父级就会根据浮动的盒子自动检测高度，父级有了高度</strong>，就不会影响后面的标准流</li>
</ul>
<p>语法：  <strong>选择器 {  clear：  属性值 ；}</strong></p>
<p>属性值  ： left  &#x2F;  right  &#x2F;  both  不允许左侧浮动； 同时清除两侧浮动影响 ；</p>
<p>清除浮动的策略  ： 闭合浮动  </p>
<p><strong>清除浮动的方法</strong></p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">额外标签法 （隔墙法）</span><br><span class="line">		在最后一个浮动元素后面添加 一个盒子  并且归属一个自定义类 ,类的内部定义如下 &#123;  <span class="attribute">clear</span> ： both ; &#125;</span><br><span class="line">		或者直接简写 &lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">clear</span>: both;&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">		注意我们新添加用以隔开的元素必须是块级元素</span><br><span class="line"></span><br><span class="line">**========================================================</span><br><span class="line"></span><br><span class="line">父元素添加 <span class="attribute">overflow</span> 属性</span><br><span class="line">		为父级盒子CSS添加  <span class="attribute">overflow</span> ： hidden  ；</span><br><span class="line"></span><br><span class="line">**========================================================</span><br><span class="line"></span><br><span class="line">父级添加 after 伪元素</span><br><span class="line">	   为父级元素<span class="selector-tag">html</span>中加类 clearfix   &lt;<span class="selector-tag">div</span> class=&quot;box clearfix&quot; &gt;</span><br><span class="line">	   在CSS中添加</span><br><span class="line"><span class="selector-class">.clearfix</span>: after &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span> : <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span> : both ;</span><br><span class="line">    <span class="attribute">visibility</span> : hidden ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    *zoom : <span class="number">1</span> ;</span><br><span class="line">&#125;</span><br><span class="line">			</span><br><span class="line">父级添加双伪元素</span><br></pre></td></tr></table></figure></div>

<p>实际上这是一个值得思考和总结的问题，首先就是为什么要学习清除浮动元素 ，这是因为在某些情况下，我们外层限制位置的 div 不方便设置高度，如此就可以利用内部元素来撑开盒子，但是此时我们的外部div只是一条线，只起到和上部标准流元素构成结构的作用，而由于我们浮动元素的特性 ：与标准流的布局是分开的  ，因此后部的标准流元素会跟在该线后面 ，而导致被浮动元素覆盖 ，而我们要想将后部元素与浮动元素保持距离，就会用到此时的清除浮动元素的影响 。</p>
<h3 id="CSS书写规范"><a href="#CSS书写规范" class="headerlink" title="CSS书写规范"></a>CSS书写规范</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304120843280.png"
                      alt="image-20230412084348921"
                ></p>
<h3 id="全页面开发日志："><a href="#全页面开发日志：" class="headerlink" title="全页面开发日志："></a>全页面开发日志：</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304120843316.png"
                      alt="image-20230412084357928"
                ></p>
<h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><ul>
<li>定位可以让多个块级盒子在一行没有缝隙的排列显示</li>
<li>可以让盒子在父级盒子中自由的移动或者固定在屏幕中的某个位置，并且压住其他盒子 ，即desktop</li>
</ul>
<p><strong>定位 &#x3D; 定位模式 + 边偏移</strong></p>
<p>定位模式 ：position属性，   其取值 ：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304120844656.png"
                      alt="image-20230412084407315"
                ></p>
<p>边偏移 ：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304120844591.png"
                     
                ></p>
<h4 id="static-默认定位方式"><a href="#static-默认定位方式" class="headerlink" title="static   默认定位方式"></a>static   默认定位方式</h4><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123; <span class="attribute">position</span> ： static ； &#125;</span><br></pre></td></tr></table></figure></div>

<p>即按照标准流特性摆放位置，它没有边偏移 ；</p>
<h4 id="相对定位-：-relative"><a href="#相对定位-：-relative" class="headerlink" title="相对定位 ： relative"></a>相对定位 ： relative</h4><p>相对于原来位置来说的</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line">				<span class="attribute">position</span> ：relative  ；</span><br><span class="line">    <span class="attribute">top</span> : <span class="number">100px</span> ;</span><br><span class="line">    <span class="attribute">left</span> :  <span class="number">100px</span> ;  向距离自己原来位置左边框 <span class="number">100px</span>  的位置移动</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>这里有一个值得注意的特点 ： 若有两个盒子上下邻接，若上者进行相对定位  top : 100px ; left :  100px ;   那么下者是不会移动的，会被覆盖</strong></p>
<h4 id="绝对定位-：-absolute"><a href="#绝对定位-：-absolute" class="headerlink" title="绝对定位 ： absolute"></a>绝对定位 ： absolute</h4><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line">				<span class="attribute">position</span> ：relative  ；</span><br><span class="line">    <span class="attribute">top</span> : <span class="number">100px</span> ;</span><br><span class="line">    <span class="attribute">left</span> :  <span class="number">100px</span> ;  向距离自己原来位置左边框 <span class="number">100px</span>  的位置移动</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>是相对于祖先元素来说的，<strong>若是没有 祖先元素 或是 祖先元素没有定位 那么就会以浏览器边界为准</strong></p>
</li>
<li><p>如果祖先元素（包括父级）有定位 ，那么以最近一级有定位的元素为参考移动  ，即父级无定位，爷爷及有定位时，是以爷为准</p>
</li>
<li><p>最重要的一点 ： <strong>绝对定位不再占有原先的盒子</strong> ，后面的盒子会升上去</p>
</li>
</ul>
<h4 id="口诀-：-子绝父相"><a href="#口诀-：-子绝父相" class="headerlink" title="口诀 ： 子绝父相"></a><strong>口诀 ： 子绝父相</strong></h4><p>指的是子盒子如果使用绝对定位，那么父级就要使用相对定位 </p>
<ul>
<li><p><strong>子级绝对定位，不会占有位置，可以放到父级盒子中的任何一个位置而不影响其他兄弟盒子。</strong></p>
</li>
<li><p>父级加定位以限制子级盒子的位置</p>
</li>
<li><p>父级布局时需要占有位置，一次<strong>必须是相对定位</strong>。</p>
</li>
</ul>
<h4 id="固定定位-：-fixed"><a href="#固定定位-：-fixed" class="headerlink" title="固定定位 ： fixed"></a>固定定位 ： fixed</h4><p>即不随网页的滚动而移动的元素 。</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123; <span class="attribute">position</span> ： fixed ；</span><br><span class="line"><span class="attribute">top</span> ：</span><br><span class="line"><span class="attribute">right</span> : </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>以浏览器的可视窗口为基准，与父元素毫无关系 ，不占有原先位置。</p>
<h3 id="案例-（对齐版心-回到顶部）"><a href="#案例-（对齐版心-回到顶部）" class="headerlink" title="案例 （对齐版心 回到顶部）"></a>案例 （对齐版心 回到顶部）</h3><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">position</span> : fixed ;    </span><br><span class="line"><span class="attribute">bottom</span> : <span class="number">50px</span> ;        比较奇怪的一点就是这里<span class="attribute">top</span> 或者是<span class="attribute">bottom</span> 必须写一个，才会显示</span><br><span class="line"><span class="attribute">left</span> : <span class="number">50%</span> ;				这个的意思左侧直接横移网页一半</span><br><span class="line"><span class="attribute">margin-left</span> :  <span class="number">500px</span> ;  		这个<span class="number">500px</span>是我们已知的版心的一半</span><br></pre></td></tr></table></figure></div>

<h3 id="粘性定位-sticky"><a href="#粘性定位-sticky" class="headerlink" title="粘性定位 sticky"></a>粘性定位 sticky</h3><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line"><span class="attribute">position</span> ： sticky  ；</span><br><span class="line"><span class="attribute">top</span> ：   即我们可视窗口移动的时候 ， 距离顶部有多少像素时，会固定 </span><br><span class="line"> . . .</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>以浏览器的可视窗口为参照点来移动元素</p>
</li>
<li><p>占有原先的位置</p>
</li>
<li><p>必须相加一个任意方向的边偏移才会有效</p>
</li>
</ul>
<h3 id="定位叠放次序"><a href="#定位叠放次序" class="headerlink" title="定位叠放次序"></a>定位叠放次序</h3><p>定位叠放次序 ： z - index   用它来控制盒子的前后次序（ z 轴 ）</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line"><span class="attribute">z-index</span> : <span class="number">1</span> ;  数值可以是正数 负数 ，默认是auto ，数值越大盒子越上</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这里是用于解决盒子在定位后的层叠次序问题。</p>
<ul>
<li>同时注意只有定位后的盒子才有 z - index 属性</li>
<li>数字后面是不可以加单位的。</li>
</ul>
<h3 id="绝对定位盒子的居中"><a href="#绝对定位盒子的居中" class="headerlink" title="绝对定位盒子的居中"></a>绝对定位盒子的居中</h3><p>加了 absolute 的盒子是不可以用 margin ： 0 auto ； 实现居中的  </p>
<p>其方法类似于我们的 返回顶部</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">position</span> ： absolute   ；</span><br><span class="line"><span class="attribute">left</span> ： <span class="number">50%</span>；</span><br><span class="line"><span class="attribute">margin</span> - <span class="attribute">left</span> ：绝对定位盒子宽度的一半的 负数</span><br></pre></td></tr></table></figure></div>

<h3 id="定位的特殊特性"><a href="#定位的特殊特性" class="headerlink" title="定位的特殊特性"></a>定位的特殊特性</h3><ul>
<li><p>添加了 <strong>绝对定位 或者是 相对定位</strong> 的盒子 ，可以设置高与宽</p>
</li>
<li><p>添加了 <strong>绝对定位 或者是 相对定位</strong> 的盒子 ，如是不设置 宽和高 ，那么盒子的宽度和高度都是直接以内容为主，会恰好盖住我们的盒子  。</p>
</li>
</ul>
<h3 id="元素的显示与隐藏"><a href="#元素的显示与隐藏" class="headerlink" title="元素的显示与隐藏"></a>元素的显示与隐藏</h3><p>1 、 display</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span> ： <span class="attribute">none</span> ；隐藏元素</span><br><span class="line"><span class="attribute">display</span> ：block ； 除了 有转化为块级元素 之外还有 显示元素的作用 </span><br></pre></td></tr></table></figure></div>

<p>display作用之后，位置也不会保留 ，后方的元素会直接顶上</p>
<p>2 、 visibility</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304120844355.png"
                      alt="image-20230412084421995" style="zoom:50%;" 
                >

<p>这里和display不同的是，位置是保留的。</p>
<p>3 、 overflow </p>
<p>比较特殊的是，overflow 是对于溢出盒子的部分 进行显示和隐藏设置</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304120844900.png"
                      alt="image-20230412084429557"
                ></p>
<p>这里值得注意的是 auto 的作用和 scroll 的区别 ：auto 会在需要滚动条的时候自动加上，但是 scroll 无论文本的长度始终都会显示</p>
<p>但是若是盒子之中用了 定位 ，我们要慎用 overflow 。</p>
<h3 id="案例-：土豆网播放遮罩"><a href="#案例-：土豆网播放遮罩" class="headerlink" title="案例 ：土豆网播放遮罩"></a>案例 ：土豆网播放遮罩</h3><p><strong>这里为什么不用浮动来做呢，按理说，我们前一个盒子用浮动，后面不浮，那么浮动盒子就会压住后面的，此时为浮动盒子增加透明色就可实现遮罩效果，但是经过实验，发现浮动不会压住内容，即后面的盒子如果插入图片，那么float遮罩也会被挤出父级盒，但是如果为后面的不浮动的盒子改为背景图片，可以出现遮罩效果，因此局限性比较高</strong></p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;stone&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;<span class="attribute">mask</span>&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">img</span> <span class="attribute">src</span>=&quot;images/stone2<span class="selector-class">.webp</span>&quot; alt=&quot;石头人&quot;&gt;    </span><br><span class="line"></span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">**============================CSS==============================</span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span> : <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.stone</span> &#123; </span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto ;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mask</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.stone</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.stone</span>：hover <span class="selector-class">.mask</span> &#123;    hover 的妙用</span><br><span class="line">    <span class="attribute">display</span> ： block ；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>在遮罩时候，我们一定要注意必须是mask在盒子的第一位 。</strong></p>
<p>还有就是 hover 的妙用 ， .stone：hover .mask  指的是 当鼠标经过 stone 盒子时候 ，里面的 mask 进行操作。</p>
<h3 id="精灵图"><a href="#精灵图" class="headerlink" title="精灵图"></a>精灵图</h3><p>减少服务器请求和接收的次数，以达到提高页面加载速度的目的</p>
<p>核心原理 ： 将网页中一些小的背景图片整合到一张较大的图中。</p>
<p><strong>精灵图的运用是主要针对 较小的 背景图，是将多个背景图整合到一张大的图片中，整合后的大图被称为 精灵图</strong>				主要借助的是  background - position </p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span> - <span class="selector-tag">img</span> ： url（图片地址 ）</span><br><span class="line"><span class="attribute">background</span> - <span class="attribute">position</span> :   <span class="number">180px</span> <span class="number">50px</span> ;  这一句的意思是 将精灵图 右移<span class="number">180</span> 下移 <span class="number">50</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">或者是连写 ： <span class="attribute">background</span> ： url （） x y ；</span><br></pre></td></tr></table></figure></div>

<h3 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h3><p>精灵图的不足：  1、展示图较大  2 、图片本身的放大或者是缩小会失真  3 、整合图一旦制作完成想要更改十分不便</p>
<ul>
<li>展示的是图标，本质是字体</li>
</ul>
<p>字体图标的优点  ：</p>
<ul>
<li>轻量级 ： 一个字体图标的加载比图片的加载快许多 ，一旦字体加载，图片也就会十分快捷的渲染，减少了服务器请求。</li>
<li>本质是文字，可以很便捷的修改颜色大小等属性</li>
<li>几乎支持所有的浏览器类型 。</li>
</ul>
<p>遇到比较小，样式简单的的图标时，我们选用字体图标</p>
<p>这里要注意文件解压后要与 html文件 同级 ，同时在使用的时候注意地址的补全，因为是字体，所以我们可以使用通用的字体属性来调整图片的大小 。</p>
<p><strong>这里有一点要注意，在伪类元素的时候，我们不可以为其添加类，因此可以采取以下的额方法：</strong></p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;iconfont&quot;</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&#x27;\e66e&#x27;</span>;   <span class="comment">/*  这里要注意，是将 &amp;#x 改为了 \  否则是无法显示效果的 */</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="三角形的绘制"><a href="#三角形的绘制" class="headerlink" title="三角形的绘制"></a>三角形的绘制</h3><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> <span class="number">2</span> &#123;</span><br><span class="line">    <span class="attribute">width</span> ： <span class="number">0</span>；</span><br><span class="line">    <span class="attribute">height</span> ： <span class="number">0</span> ；</span><br><span class="line">    <span class="attribute">border</span> ：<span class="number">5px</span> solid transparent ；  设置边框的粗细来控制三角的大小 。</span><br><span class="line">    <span class="attribute">border</span> - <span class="attribute">top</span> / <span class="attribute">left</span> ...  ：pink ； 这里就时根据需要进行 绘制三角</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p><strong>妈的坑死了，这里有一点要极其注意，即这里的下边框的修改 ，是 border - bottom - color ；</strong> </p>
<h3 id="案例-三角的应用"><a href="#案例-三角的应用" class="headerlink" title="案例 三角的应用"></a>案例 三角的应用</h3><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">html</span> lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-<span class="number">8</span>&quot;&gt;</span><br><span class="line">    &lt;title&gt;实验案例&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;eg<span class="selector-class">.css</span>&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;meau&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">span</span> class=&quot;iconfont&quot;&gt;&amp;<span class="selector-id">#xe679</span>;&lt;<span class="selector-tag">span</span> class=&quot;tan&quot;&gt;&lt;/<span class="selector-tag">span</span>&gt;&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">span</span> class=&quot;iconfont&quot;&gt;&amp;<span class="selector-id">#xe666</span>;&lt;<span class="selector-tag">span</span> class=&quot;tan&quot;&gt;&lt;/<span class="selector-tag">span</span>&gt;&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">span</span> class=&quot;iconfont&quot;&gt;&amp;<span class="selector-id">#xe66f</span>;&lt;<span class="selector-tag">span</span> class=&quot;tan&quot;&gt;&lt;/<span class="selector-tag">span</span>&gt;&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">span</span> class=&quot;iconfont&quot;&gt;&amp;<span class="selector-id">#xe66e</span>;&lt;<span class="selector-tag">span</span> class=&quot;tan&quot;&gt;&lt;/<span class="selector-tag">span</span>&gt;&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">span</span> class=&quot;iconfont&quot;&gt;&amp;<span class="selector-id">#xe687</span>;&lt;<span class="selector-tag">span</span> class=&quot;tan&quot;&gt;&lt;/<span class="selector-tag">span</span>&gt;&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">****===============================================</span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;iconfont&#x27;</span>;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;font_uil9qdi5xu/iconfont.ttf?t=1674110414611&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;truetype&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.iconfont</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;iconfont&quot;</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">    -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span><br><span class="line">    -moz-osx-<span class="attribute">font-smoothing</span>: grayscale;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tan</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line"><span class="attribute">left</span>:<span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">70px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">10px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-bottom-color</span>: black;!important;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.iconfont</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.tan</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="更改鼠标样式"><a href="#更改鼠标样式" class="headerlink" title="更改鼠标样式"></a>更改鼠标样式</h3><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cursor</span> ： pointer ；</span><br></pre></td></tr></table></figure></div>

<p>text ：光标表示文本</p>
<p>wait ：光标表示程序正忙(通常是一只表或沙漏)</p>
<p>help： 光标表示帮助(通常是一个问号)</p>
<p>default ：默认光标，通常是一个箭头</p>
<p>&#x3D;&#x3D;auto ：默认，浏览器设置的光标**</p>
<p>crosshair ：光标表示十字线</p>
<p>&#x3D;&#x3D;pointer ：光标表示指示链接的指针(一只手)**</p>
<p>move： 光标表示对象可被移动</p>
<p>not-allowed 禁止</p>
<h3 id="轮廓线-outline"><a href="#轮廓线-outline" class="headerlink" title="轮廓线  outline"></a>轮廓线  outline</h3><p>去掉 input 默认的蓝色边框 ：</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span> &#123; <span class="attribute">outline</span> : <span class="number">0</span> ; &#125; 或者是  <span class="attribute">outline</span> &#123;  <span class="attribute">outline</span> ： <span class="attribute">none</span> ；&#125;   </span><br></pre></td></tr></table></figure></div>

<h3 id="禁止文本域的拖拽-resize"><a href="#禁止文本域的拖拽-resize" class="headerlink" title="禁止文本域的拖拽  resize"></a>禁止文本域的拖拽  resize</h3><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">		<span class="attribute">resize</span> ： <span class="attribute">none</span> ；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>这里还有一点是值得注意 : html 中 ，textarea两个标签中不能加空格，最好直接贴着写，这样可以防止文本框初始化的时候空格区域</strong></p>
<h3 id="vertical-align"><a href="#vertical-align" class="headerlink" title="vertical-align"></a>vertical-align</h3><p>利用它使得 表单 或是 图片 的垂直对齐  ，值得注意的是，它只对<strong>行内元素</strong>或<strong>行内块元素</strong>有效。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304120844142.png"
                      alt="image-20230412084441780" style="zoom:50%;" 
                >



<h3 id="盒中图片的空白缝隙问题"><a href="#盒中图片的空白缝隙问题" class="headerlink" title="盒中图片的空白缝隙问题"></a>盒中图片的空白缝隙问题</h3><p>1 、使用&#x3D;&#x3D;vertical - align : bottom&#x2F;bottom&#x2F;top ; 解决</p>
<p>因为行内块元素是与我们的基线对齐，我们通过设置来实现与地线等对齐</p>
<p>2 、因为只有行内块元素，行内元素才与基线对齐，因此<strong>将图片转化为块级元素</strong>即可解决</p>
<h3 id="溢出文字省略号显示"><a href="#溢出文字省略号显示" class="headerlink" title="溢出文字省略号显示"></a>溢出文字省略号显示</h3><h4 id="单行文本省略"><a href="#单行文本省略" class="headerlink" title="单行文本省略"></a>单行文本省略</h4><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">step ：</span><br><span class="line"><span class="number">1</span> 、 先强制一行内显示文本</span><br><span class="line">		white - space ：nowrap ；（ <span class="attribute">normal</span> 是自动换行 ）</span><br><span class="line"><span class="number">2</span> 、 超出的部分隐藏</span><br><span class="line">		<span class="attribute">overflow</span> ： hidden ；</span><br><span class="line"><span class="number">3</span> 、 文字用省略号替代超纯的部分</span><br><span class="line">		text - <span class="attribute">overflow</span> ：ellipsis ；</span><br></pre></td></tr></table></figure></div>

<h4 id="多行文本省略问题"><a href="#多行文本省略问题" class="headerlink" title="多行文本省略问题"></a>多行文本省略问题</h4><p>有较大兼容性问题 </p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">overflow ：hidden ；</span><br><span class="line">text - overlow ：ellipsis； </span><br><span class="line">display ：-webkit-box；弹性伸缩模型盒子显示</span><br><span class="line">-webkit-line-clamp ： 2 ；  限制在一个块元素显示的文本行数</span><br><span class="line">-webkit-box-orient ：vertical ；设置或检索伸缩盒子对象的子元素的排列方式</span><br></pre></td></tr></table></figure></div>

<h3 id="margin-负值的去边框重叠"><a href="#margin-负值的去边框重叠" class="headerlink" title="margin 负值的去边框重叠"></a>margin 负值的去边框重叠</h3><p>用于解决浮动盒子边框重叠部分 。</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">margin-left</span>:-<span class="number">1px</span>;   重点就是这里缩进的负值，是缩进边框的宽度 。 并且是注意  <span class="attribute">margin</span> -  <span class="attribute">left</span>  </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>但是当我们需要 hover 时边框改变颜色，此时会发现，因为后方盒子margin 为负值 ，此时会覆盖前方盒子的一部分，中间的盒子边框只改变三条，这个时候我们要想解决这个问题 ：</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>  、 该盒子没有定位 ：这时可以为盒子添加相对定位  ：  <span class="attribute">position</span> ： reletive ；</span><br><span class="line"><span class="number">2</span>  、 盒子都有定位 ，此时运用 z- index ;</span><br><span class="line">	    style 中添加  z - index ： <span class="number">1</span> ；</span><br><span class="line"></span><br><span class="line">这里要注意的是如果盒子没有定位，我们用<span class="attribute">z-index</span> 是没有用的</span><br></pre></td></tr></table></figure></div>



<h3 id="文字环绕浮动元素"><a href="#文字环绕浮动元素" class="headerlink" title="文字环绕浮动元素"></a>文字环绕浮动元素</h3><p>因为盒子浮动时，虽然会压住标准流，但是标准流中的内容是不会覆盖的，而是被挤开，这也就出现了所谓的文字环绕效果 。 </p>
<h3 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h3><p>当我们需要多个元素共同居中时，可以为该集体的父盒子 添加属性 ： text - align ： center ；就可以实现。</p>
<p>注意将我们父盒子中的元素 都转化为 行内块 元素  。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304120844377.png"
                      alt="image-20230412084451038"
                ></p>
<h3 id="CSS三角的妙用"><a href="#CSS三角的妙用" class="headerlink" title="CSS三角的妙用"></a>CSS三角的妙用</h3><p>直角三角</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*border-top: 100px solid coral;*/</span></span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">100px</span> solid transparent; <span class="attribute">top</span>的值不可以为 <span class="number">0</span> ，否则直接无法显示</span><br><span class="line">    															同时 <span class="attribute">top</span> 的数值控制高</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">0</span> solid skyblue;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">0</span> solid skyblue;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">100px</span> solid skyblue; 		<span class="attribute">right</span>的数值控制底边的宽度</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>极简写法：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304120844887.png"
                     
                ></p>
<h3 id="案例-：-斜线盒子"><a href="#案例-：-斜线盒子" class="headerlink" title="案例 ： 斜线盒子"></a>案例 ： 斜线盒子</h3><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">html</span> lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-<span class="number">8</span>&quot;&gt;</span><br><span class="line">    &lt;title&gt;实验案例&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;eg<span class="selector-class">.css</span>&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;fa&quot;&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;red&quot;&gt;原价很贵！！&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;box&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;skyblue&quot;&gt; 我们降价啦&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fa</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.red</span>&#123;</span><br><span class="line">    <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*border-top: 100px solid coral;*/</span></span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">100px</span> solid red;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">0</span> solid skyblue;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">0</span> solid skyblue;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">100px</span> solid <span class="number">#f5f5f5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.skyblue</span> &#123;</span><br><span class="line">    <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="CSS初始化"><a href="#CSS初始化" class="headerlink" title="CSS初始化"></a>CSS初始化</h3><p>因为css样式在不同浏览器中有着不同的规格，所以我们通常要进行初始化。</p>
<p>下面是网易的CSS初始化代码  ： </p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">overflow-y</span>: scroll;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font</span>: <span class="number">12px</span> <span class="string">&quot;\5B8B\4F53&quot;</span>, sans-serif;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>, <span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">li</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, pre, <span class="selector-tag">form</span>, <span class="selector-tag">fieldset</span>, <span class="selector-tag">input</span>, <span class="selector-tag">textarea</span>, <span class="selector-tag">blockquote</span>, <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span>, <span class="selector-tag">td</span>, <span class="selector-tag">tr</span>, <span class="selector-tag">th</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">list-style-type</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">vertical-align</span>: top;<span class="comment">/*取消图片底侧的空白缝隙*/</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ol</span>, <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;<span class="comment">/*取消圆点*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">address</span>, <span class="selector-tag">cite</span>, <span class="selector-tag">code</span>, <span class="selector-tag">em</span>, <span class="selector-tag">th</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
  </entry>
  <entry>
    <title>XML的初步了解</title>
    <url>/2023/08/29/XML%E7%9A%84%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="XML的初步了解"><a href="#XML的初步了解" class="headerlink" title="XML的初步了解"></a>XML的初步了解</h2><p>可扩展性标记语言，其目的是用于传输和存储数据，而 HTML 是用于展示数据。XML的标签必须是自定义，同时要注意标签名必须要有一定的含义。</p>
<h3 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h3><p>对于我们的 xml ，其有着一定的语法。</p>
<h4 id="1、根节点"><a href="#1、根节点" class="headerlink" title="1、根节点"></a>1、根节点</h4><p>对于整体的xml’内容，我们必须要有一个根标签 ( 根节点 )，也即下处的 <strong><root> </root></strong></p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span>&gt;</span>hu<span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">msg</span>&gt;</span>this is a try<span class="tag">&lt;/<span class="name">msg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="2、头部声明"><a href="#2、头部声明" class="headerlink" title="2、头部声明"></a>2、头部声明</h4><p>必须位于第一行</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot; 1.0 &quot;</span>  encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="3、标签的成对"><a href="#3、标签的成对" class="headerlink" title="3、标签的成对"></a>3、标签的成对</h4><p>不同于 HTML 存在的单标签， xml 中的所有元素标签都必须是成对出现，标签大小写敏感。</p>
<p>标签不可以如以下情况交叉</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="4、注释"><a href="#4、注释" class="headerlink" title="4、注释"></a>4、注释</h4><p>语法同 html  ，注意注释是不可以进行嵌套的</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--   comment  --&gt;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="5、符号的实体引用-（-转义字符-）"><a href="#5、符号的实体引用-（-转义字符-）" class="headerlink" title="5、符号的实体引用  （ 转义字符 ）"></a>5、符号的实体引用  （ 转义字符 ）</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202308270928664.png"
                      alt="image-20230827092810623"
                ></p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span>if salary   &lt;     1000 then<span class="tag">&lt;/<span class="name">message</span>&gt;</span>  错误</span><br><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span>if salary  <span class="symbol">&amp;lt;</span> 1000 then<span class="tag">&lt;/<span class="name">message</span>&gt;</span> 正确</span><br></pre></td></tr></table></figure></div>

<h4 id="6、属性与标签"><a href="#6、属性与标签" class="headerlink" title="6、属性与标签"></a>6、属性与标签</h4><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">person</span>  <span class="attr">a</span>=<span class="string">&#x27;123&#x27;</span> <span class="attr">b</span>=<span class="string">&#x27;456&#x27;</span> &gt;</span> <span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br><span class="line">这里的 person 是标签，a ，b是我们的属性</span><br><span class="line">  注意每个标签可以有多个属性，但是每个属性不可以相同，属性值用引号</span><br></pre></td></tr></table></figure></div>

<h4 id="7、CDATA区"><a href="#7、CDATA区" class="headerlink" title="7、CDATA区"></a>7、CDATA区</h4><p>全称 character data</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">语法： &lt;! [ CDATA [ 我们实际的内容 ] ]</span><br></pre></td></tr></table></figure></div>

<p>使用 CDATA 区域 ，编译器会直接忽略，而直接显示原始的内容。</p>
<h3 id="2、简单的处理指令"><a href="#2、简单的处理指令" class="headerlink" title="2、简单的处理指令"></a>2、简单的处理指令</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot; 1.0 &quot;</span>  encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span>  这里声明了版本和字符集  ，注意只可以放在第一行</span><br><span class="line"></span><br><span class="line">&lt;? xml-stylesheet type=&quot;text/css&quot; href=&quot;a.css&quot;?&gt;  指定的css样式表</span><br></pre></td></tr></table></figure></div>

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202308290839514.png"
                      alt="image-20230829083937327" style="zoom: 200%;" 
                >

<p>这里的css样式的指定实际上只是普通的标签选择器。</p>
<h3 id="3、XML的约束"><a href="#3、XML的约束" class="headerlink" title="3、XML的约束"></a>3、XML的约束</h3><p>xml 中存在着两种约束。dtd 和 schema  。</p>
<p>约束就是规则，xml的约束就是指定 xml 文档中可以出现哪些元素以及不可以出现那些元素。</p>
<h4 id="1、DTD"><a href="#1、DTD" class="headerlink" title="1、DTD"></a>1、DTD</h4><p>DTD（Document Type Deﬁnition），文档类型定义，用来约束XML文档。规定XML文档中元素的名称，子元素的名称及顺序，元素的属性等。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!ELEMENT <span class="title function_">students</span> <span class="params">(student+)</span>  &gt;   这里定义了一个元素 student  并且规定这里的 student出现一次或者多次，如果没有+号，则默认为只可以出现一次</span><br><span class="line">        &lt;!ELEMENT <span class="title function_">student</span> <span class="params">(name,age,sex)</span>&gt;    意为student包含三类</span><br><span class="line">        &lt;!ELEMENT <span class="title function_">name</span> <span class="params">(#PCDATA)</span>&gt;    #PCDATA 即直接为文本内容</span><br><span class="line">        &lt;!ELEMENT <span class="title function_">age</span> <span class="params">(#PCDATA)</span>&gt;</span><br><span class="line">        &lt;!ELEMENT <span class="title function_">sex</span> <span class="params">(#PCDATA)</span>&gt;</span><br><span class="line">        &lt;!ATTLIST student number ID #REQUIRED&gt; </span><br><span class="line">student number ID : student标签中 有一个ID属性 叫做 number  ，#required 即规定必须</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>常见的符号：<br>问号？：表示该对象出现0次或1次<br>星号 * ：表示该对象出现0次或多次<br>加号 + ：表示该对象出现1次或多次<br>竖线 | ：表示在列出的对象中选择一个<br>逗号 , ：表示对象按照指定的顺序出现</p>
<h4 id="3、DTD的引入"><a href="#3、DTD的引入" class="headerlink" title="3、DTD的引入"></a>3、DTD的引入</h4><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;！DOCTYPE student SYSTEM &quot;student.dtd&quot; &gt;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/css&quot;</span> href=<span class="string">&quot;a.css&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">students</span>  <span class="keyword">SYSTEM</span> <span class="string">&quot;student.dtd&quot;</span>&gt;</span>  system后面跟的是同目录下的文件名    students是一个父标签，后面的约束存在于他的子目录下，经过尝试后发现不可以直接使用</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">students</span>&gt;</span>   父级标签</span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span> <span class="attr">number</span>=<span class="string">&quot;number_123&quot;</span>&gt;</span>   这里的id属性与前端一致</span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>lisa<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  注意逗号是顺序，不可以调转顺序，不可以缺少</span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>26<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>female<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>这里第一感受是该约束与  CSS 中的选择器极其的相似</strong></p>
<h4 id="4、DTD的三种引入方式"><a href="#4、DTD的三种引入方式" class="headerlink" title="4、DTD的三种引入方式"></a>4、DTD的三种引入方式</h4><h5 id="1、内部引入"><a href="#1、内部引入" class="headerlink" title="1、内部引入"></a>1、内部引入</h5><blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=<span class="string">&quot;text/css&quot;</span> href=<span class="string">&quot;a.css&quot;</span>?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE student [      <span class="comment">//  这里实际上就是所谓的内部引入  ，和前端的css引入方式有点类似  ，注意是方括号和前面的   !DOCTYPE</span></span><br><span class="line"></span><br><span class="line">&lt;!ELEMENT <span class="title function_">students</span> <span class="params">(student+)</span>  &gt;   </span><br><span class="line">     &lt;!ELEMENT <span class="title function_">student</span> <span class="params">(name,age,sex)</span>&gt;    </span><br><span class="line">     &lt;!ELEMENT <span class="title function_">name</span> <span class="params">(#PCDATA)</span>&gt;  </span><br><span class="line">     &lt;!ELEMENT <span class="title function_">age</span> <span class="params">(#PCDATA)</span>&gt;</span><br><span class="line">     &lt;!ELEMENT <span class="title function_">sex</span> <span class="params">(#PCDATA)</span>&gt;</span><br><span class="line">     &lt;!ATTLIST student number ID #REQUIRED&gt; </span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">&lt;students&gt;   父级标签</span><br><span class="line"> &lt;student number=<span class="string">&quot;number_123&quot;</span>&gt;   这里的id属性与前端一致</span><br><span class="line">     &lt;name&gt;lisa&lt;/name&gt;  注意逗号是顺序，不可以调转顺序，不可以缺少</span><br><span class="line">     &lt;age&gt;<span class="number">26</span>&lt;/age&gt;</span><br><span class="line">     &lt;sex&gt;female&lt;/sex&gt;</span><br><span class="line"> &lt;/student&gt;</span><br><span class="line">&lt;/students&gt;</span><br></pre></td></tr></table></figure></div>


</blockquote>
<h5 id="2、public-外部引入"><a href="#2、public-外部引入" class="headerlink" title="2、public  外部引入"></a>2、public  外部引入</h5><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">使用公共的DTD约束</span><br><span class="line">&lt; !DOCTYPE 根元素名称 PUBLIC &quot;DTD名称&quot;  &quot;DTD文档的URL&quot;  &gt;</span><br><span class="line"></span><br><span class="line">注意这里的 public  而不是 SYSTEM</span><br></pre></td></tr></table></figure></div>



<h5 id="3、第三种即我们类似内部链接的-CSS方式"><a href="#3、第三种即我们类似内部链接的-CSS方式" class="headerlink" title="3、第三种即我们类似内部链接的  CSS方式"></a>3、第三种即我们类似内部链接的  CSS方式</h5><h4 id="2、Schema-x2F-ˈskiːmə-x2F"><a href="#2、Schema-x2F-ˈskiːmə-x2F" class="headerlink" title="2、Schema     &#x2F;ˈskiːmə&#x2F;"></a>2、Schema     &#x2F;ˈskiːmə&#x2F;</h4><ul>
<li>Schema是新的XML文档约束, 比DTD强大很多，是DTD 替代者；</li>
<li>Schema本身也是XML文档，但Schema文档的扩展名为xsd，而不是xml。</li>
<li>Schema 功能更强大，内置多种简单和复杂的数据类型</li>
<li>Schema 支持命名空间 (一个XML中可以引入多个约束文档)</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>JAVA基础</title>
    <url>/2023/08/30/JAVA%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h3 id="1、命名规则"><a href="#1、命名规则" class="headerlink" title="1、命名规则"></a>1、命名规则</h3><p>由字母、数字、下划线“_”、美元符号“$”或者“￥”组成，并且首字符不能是数字。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202308300846538.png"
                      alt="image-20230830084603179" style="zoom: 67%;" 
                >

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202303151520090.png"
                      alt="image-20230315152028005" style="zoom:67%;" 
                >



<h3 id="2、基本数据类型"><a href="#2、基本数据类型" class="headerlink" title="2、基本数据类型"></a>2、基本数据类型</h3><p>注意这里存在有别于C++的基本数据语法：</p>
<h4 id="float后面要加上F，在double所赋数值的后面要加上D，否则会报错"><a href="#float后面要加上F，在double所赋数值的后面要加上D，否则会报错" class="headerlink" title="float后面要加上F，在double所赋数值的后面要加上D，否则会报错"></a>float后面要加上<strong>F</strong>，在double所赋数值的后面要加上<strong>D</strong>，否则会报错</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> a=<span class="number">1.66F</span>;</span><br><span class="line"><span class="type">double</span> b=<span class="number">1.22D</span>;</span><br><span class="line">同时对于我们的浮点型的输出问题，二者都是用 %f 并且保留小数的方法同c++</span><br><span class="line">    System.out.printf(<span class="string">&quot;%f&quot;</span>,a);</span><br></pre></td></tr></table></figure></div>

<h4 id="bool-–-gt-boolean"><a href="#bool-–-gt-boolean" class="headerlink" title="bool  –&gt;  boolean"></a>bool  –&gt;  boolean</h4><p>并且，取值严格，不可以为 0 &#x2F; 1 ，而必须是  false 或者是 true ；<strong>默认值为false</strong></p>
<h4 id="int-和-integer-的区别"><a href="#int-和-integer-的区别" class="headerlink" title="int 和 integer  的区别"></a>int 和 integer  的区别</h4><p><a class="link"   href="https://blog.csdn.net/weixin_44143702/article/details/106300696?ops_request_misc=%7B%22request_id%22:%22166942908916782427443465%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=166942908916782427443465&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-106300696-null-null.142%5Ev66%5Epc_rank_34_queryrelevant25,201%5Ev3%5Eadd_ask,213%5Ev2%5Et3_esquery_v2&utm_term=java%E4%B8%ADint%E5%92%8Cinteger%E7%9A%84%E5%8C%BA%E5%88%AB&spm=1018.2226.3001.4187" >(173条消息) Java中 Int和Integer的区别_Summer丶snow的博客-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">100</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">100</span>;<span class="comment">//一般的情况下，int和integer类型是无区别的</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (b == c)</span><br><span class="line">            System.out.println(<span class="string">&quot;bc相等&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">&quot;bc不相等&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (a == c)</span><br><span class="line">            System.out.println(<span class="string">&quot;ac相等&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">&quot;ac不相等&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (a == b)</span><br><span class="line">            System.out.println(<span class="string">&quot;ab相等&quot;</span>);  <span class="comment">//因为非new生成的Integer变量指向的是java常量池中的对象，而new Integer()																//生成的变量指向堆中新建的对象，两者在内存中的地址不同</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">&quot;ab不相等&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">&quot;b+c=%d&quot;</span>,b+c);   <span class="type">int</span> 和 Integer之间可以之间进行我们的加减</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出的结果：</span><br><span class="line">				bc相等</span><br><span class="line">				ac相等</span><br><span class="line">				ab不相等</span><br><span class="line">				b+c=<span class="number">200</span></span><br></pre></td></tr></table></figure></div>

<p>JVM会自动维护八种基本类型的常量池，int常量池中初始化-128~127的范围，所以当为Integer i&#x3D;127时，在自动<strong>装箱</strong>过程中是取自常量池中的数值，而当Integer i&#x3D;128时，128不在常量池范围内，所以在自动装箱过程中需new 128，所以地址不一样。</p>
<h3 id="3、类型转化"><a href="#3、类型转化" class="headerlink" title="3、类型转化"></a>3、类型转化</h3><p>我们的类型转换也有着两种，即显式和隐式，强制类型转换同c++</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span>  &gt; <span class="type">float</span> &gt; <span class="type">long</span> &gt; <span class="type">int</span> &gt; <span class="type">short</span>( <span class="type">char</span> ) &gt; <span class="type">byte</span>  </span><br><span class="line">       这里我们要看到，小的转化为大的 ，是没有任何问题的，可隐式， 但是 大数据类型转化为较小的数据类型要考虑数据截断 ，即丢失，因此，需要强制转化</span><br></pre></td></tr></table></figure></div>

<p><a class="link"   href="https://blog.csdn.net/jaredray/article/details/123754327?ops_request_misc=%7B%22request_id%22:%22166943209016800184173850%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=166943209016800184173850&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-123754327-null-null.142%5Ev66%5Epc_rank_34_queryrelevant25,201%5Ev3%5Eadd_ask,213%5Ev2%5Et3_esquery_v2&utm_term=java%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2&spm=1018.2226.3001.4187" >(173条消息) java中常见类型的转换以及方法总结_jaredray的博客-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/qq_47897078/article/details/120038031?ops_request_misc=&request_id=&biz_id=102&utm_term=java%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-120038031.nonecase&spm=1018.2226.3001.4187" >(173条消息) Java数据类型转换超详解_齐天大荒的博客-CSDN博客_java数据类型的转换 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">首先就是针对比较特殊的String类型，因为其他的都是基本的数据类型，而我们的String是类</span><br><span class="line">    <span class="number">1</span>、String -&gt; <span class="type">char</span> ([])</span><br><span class="line">    String.charAt(index)（返回值为<span class="type">char</span>）可以得到String中某一指定位置的<span class="type">char</span>。</span><br><span class="line">    String.toCharArray()（返回值为<span class="type">char</span>[ ]）可以得到将包含整个String的<span class="type">char</span> 数组 。这样我们就能够使用从<span class="number">0</span>开始的位置索引来访问string中的任意位置的元素。</span><br><span class="line">    </span><br><span class="line">    <span class="number">2</span>、String -&gt; <span class="type">int</span></span><br><span class="line">    Integer.parseInt(str) 进行转换，返回str所代表的的<span class="type">int</span>值大小。</span><br><span class="line">    例如 string a=<span class="number">1231</span>; <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span>Integer.parseInt(a);  所以 a=<span class="number">1231</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="number">3</span>、String -&gt; Integer 使用Integer.valueOf(str)，返回Integer对象。</span><br><span class="line">        </span><br><span class="line">    <span class="number">4</span>、<span class="type">char</span> -&gt; <span class="type">int</span></span><br><span class="line">        <span class="type">char</span> -&gt; <span class="type">int</span> 使用 (<span class="type">int</span>) (<span class="type">char</span>-‘<span class="number">0</span>’) 转换，返回值为<span class="type">int</span>值大小</span><br><span class="line">        这实际上就是我们的显示转换</span><br><span class="line">        </span><br></pre></td></tr></table></figure></div>

<h4 id=""><a href="#" class="headerlink" title=""></a></h4><h3 id="4、输入-输出"><a href="#4、输入-输出" class="headerlink" title="4、输入 输出"></a>4、输入 输出</h3><ul>
<li><p>输入：</p>
</li>
<li><p>&#96;&#96;&#96;java<br>头：  import java.util.* ；<br>语法 ：  Scanner sc&#x3D; new Scanner (System.in) ;</p>
<p>常见的承接  ：nextInt() ,nextBoolean() ,</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  **next（）  和nextLine()  的区别**</span><br><span class="line"></span><br><span class="line">  + next  在我们读取的时候会自动忽略字符前面的无效字符，例如 tap 空格等，遇到空格 / enter 停止 ，</span><br><span class="line"></span><br><span class="line">  + 但是nextline 不会空格、tap，他会一直读取直到  Enter 为止  ；</span><br><span class="line"></span><br><span class="line">+ 输出：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">存在于默认包 java.lang 中 ，不需要进行特别的引入</span><br><span class="line">System.out.printf（）;</span><br><span class="line">System.out.printfln ( ) :   // 换行 </span><br><span class="line">System .out. printf ( )</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="5、关键字-final"><a href="#5、关键字-final" class="headerlink" title="5、关键字 final"></a>5、关键字 final</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span>  <span class="type">int</span> a=<span class="number">10</span> ; 和 <span class="type">int</span> a=<span class="number">10</span> ；  的区别 </span><br><span class="line">这里实际上就是 C++ 中的 const ；</span><br><span class="line">    <span class="keyword">final</span>  <span class="type">int</span> a=<span class="number">10</span> 意为  a为常量，不可修改 </span><br><span class="line">    <span class="type">int</span> a=<span class="number">10</span>  ，  a为变量，可以修改数值</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>被final 修饰的类不可以被<strong>继承</strong></p>
</li>
<li><p>被final 修饰的方法不可以被<strong>重写</strong></p>
</li>
<li><p>被final 修饰的变量**数值不可改变 **</p>
</li>
</ul>
<h3 id="6、数组"><a href="#6、数组" class="headerlink" title="6、数组"></a>6、数组</h3><ul>
<li>一维数组的声明和初始化</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"> ********************************************  一维动态初始化  ********************************************</span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];  </span><br><span class="line"><span class="type">int</span>   arr[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line"><span class="comment">// 可以拆分 </span></span><br><span class="line"><span class="type">int</span>[] arr;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//或者更加直接的  :</span></span><br><span class="line">								arr[ <span class="number">1</span> ] = <span class="number">1</span>;	</span><br><span class="line">								arr[ <span class="number">2</span> ] = <span class="number">1</span>; </span><br><span class="line">  									 ......</span><br><span class="line"> ********************************************    一维静态初始化   ********************************************</span><br><span class="line">    <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;; </span><br><span class="line"><span class="comment">// 可以拆分 </span></span><br><span class="line"><span class="type">int</span>[] arr;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">********************************************   静态初始化省略格式  ********************************************</span><br><span class="line">    <span class="type">int</span> [ ]  arr = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line">********************************************  Arrays.fill 函数初始化  ********************************************</span><br><span class="line">java中的数组初始值都为零，若快速填充一个其他值的数组，即将数组批量填充相同的值，可以用 Arrays.fill 方法，但只能填充一个一维数组，     **      多维数组还得用循环。  **</span><br><span class="line"> 					函数头文件 ： <span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line">用法 ： Arrays.fill （array，value）；  <span class="comment">// 即将我们array数组所有数值填充为 value </span></span><br><span class="line">            Arrays.fill （array，begin，end，value）； <span class="comment">// 即将array数组 的下标区间 【 begin， end  ） 填充为 value </span></span><br><span class="line">eg : </span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">        Arrays.fill(arr, <span class="number">1</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr));  <span class="comment">// [1, 1, 1, 1, 1]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<ul>
<li>二维数组的声明和初始化</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">动态初始化：</span><br><span class="line"><span class="type">int</span> [][] a= <span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">10</span>] [<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> [][] a= <span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">10</span>] [ ];  <span class="comment">//外层行数必须指定，内层长度可以伸缩 </span></span><br><span class="line"></span><br><span class="line">静态初始化 ：</span><br><span class="line">    <span class="type">int</span> [] [] a= &#123; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">1</span>,<span class="number">5</span>&#125; &#125;;</span><br></pre></td></tr></table></figure></div>

<h3 id="7、数组的遍历-以及-复制"><a href="#7、数组的遍历-以及-复制" class="headerlink" title="7、数组的遍历 以及 复制"></a>7、数组的遍历 以及 复制</h3><p>for循环： 略 ；</p>
<p><strong>for each</strong>  遍历</p>
<p><strong>这里我们要注意的一点是：虽然数组初始化为 0 ，但是当用for each来遍历数组到未赋值位置时，会报错数组越界，反之，使用for来循环整个数组则不会报错数组越界</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[]= &#123;..... &#125;；</span><br><span class="line"><span class="keyword">for</span>( <span class="type">int</span> k : a ) &#123; ....  &#125; </span><br><span class="line">    </span><br><span class="line">eg：</span><br><span class="line">  <span class="type">int</span> a[]= &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> &#125;;</span><br><span class="line">     <span class="keyword">for</span>( <span class="type">int</span> k : a ) &#123;       <span class="comment">//一维遍历</span></span><br><span class="line">  System.out. printf(<span class="string">&quot;%d &quot;</span>,k);   &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">		*****************************************  二维数组的遍历    ***********************************************</span><br><span class="line"><span class="type">int</span>[][] data = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; data[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">        data[i][j] = i * j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span>[] data1 : data) &#123;     <span class="comment">//注意这里的外层 申请的是  int 【】</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> data2 : data1)   <span class="comment">// 内层是正常访问的 一维数组 </span></span><br><span class="line">        System.out.printf(<span class="string">&quot;%d\t&quot;</span>, data2);   <span class="comment">// 打印的是内层</span></span><br><span class="line">    System.out.println();   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>数组的复制：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">头 ： java.lang.System;</span><br><span class="line">方法：</span><br><span class="line">    arraycopy(源数组，原数组复制起始位置,被赋值数组，被赋值数组的起始位置，复制的长度) ; </span><br><span class="line">eg :</span><br><span class="line">      <span class="type">int</span> a[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        <span class="type">int</span> b[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, b, <span class="number">0</span>, <span class="number">4</span>);   <span class="comment">//拷贝</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k : b) System.out.printf(<span class="string">&quot;%d &quot;</span>, k);   <span class="comment">//遍历</span></span><br><span class="line"></span><br><span class="line">输出 ：<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br></pre></td></tr></table></figure></div>

<h3 id="8、数组的排序"><a href="#8、数组的排序" class="headerlink" title="8、数组的排序"></a>8、数组的排序</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">头文件 ： <span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line">Arrays . sort(数组名);  <span class="comment">// 默认全部排序  ，默认的是升序</span></span><br><span class="line">Arrays.sort(数组名，排序起始下标，终止下标 )；</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span>[] a = &#123;-<span class="number">1</span>，-<span class="number">3</span>，-<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">        Arrays.sort(a);			<span class="comment">//	排序</span></span><br><span class="line">   </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d &quot;</span>, a[i]);   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">        <span class="keyword">for</span> each （<span class="type">int</span> k: a)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="9、访问修饰符"><a href="#9、访问修饰符" class="headerlink" title="9、访问修饰符"></a>9、访问修饰符</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202303151828573.png"
                      alt="image-20230315182844378"
                ></p>
<h3 id="10、统计类的对象个数-（C-和-JAVA区别）"><a href="#10、统计类的对象个数-（C-和-JAVA区别）" class="headerlink" title="10、统计类的对象个数 （C++ 和 JAVA区别）"></a>10、统计类的对象个数 （C++ 和 JAVA区别）</h3><p>区别就在于初始化上</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">JAVA:</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">eg</span> &#123;</span><br><span class="line">    eg() &#123;  <span class="comment">//无参构造，count++</span></span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> count;  <span class="comment">//最重要的一点就是count 不需要赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get_count</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">eg</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">eg</span>();</span><br><span class="line">        <span class="type">eg</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">eg</span>();</span><br><span class="line">        <span class="type">eg</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">eg</span>();</span><br><span class="line">        System.out.println(c.get_count());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line">CPP :</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">student</span>(string name1, string num1) &#123;</span><br><span class="line">		num = num1;</span><br><span class="line">		name = name1;</span><br><span class="line">		count++;  <span class="comment">//增加</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">getcount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> count;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	string num;</span><br><span class="line">	string name;</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span>  count;   <span class="comment">//在这里不可以初始化  ，要在该类的外侧进行初始化</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> student::count = <span class="number">0</span>;  <span class="comment">//这里是最值得我们注意的地方</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="function">student <span class="title">a</span><span class="params">(<span class="string">&quot;李华&quot;</span>,<span class="string">&quot;12313&quot;</span>)</span></span>;</span><br><span class="line">	<span class="function">student <span class="title">b</span><span class="params">(<span class="string">&quot;张华&quot;</span>, <span class="string">&quot;12313&quot;</span>)</span></span>;</span><br><span class="line">	<span class="function">student <span class="title">c</span><span class="params">(<span class="string">&quot;孙华&quot;</span>, <span class="string">&quot;12313&quot;</span>)</span></span>;</span><br><span class="line">	cout &lt;&lt; a.<span class="built_in">getcount</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt;b.<span class="built_in">getcount</span>()  &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; c.<span class="built_in">getcount</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">    <span class="number">3</span></span><br><span class="line">    <span class="number">3</span></span><br><span class="line">    <span class="number">3</span></span><br></pre></td></tr></table></figure></div>

<h3 id="11、类的内存"><a href="#11、类的内存" class="headerlink" title="11、类的内存"></a>11、类的内存</h3><p>java把内存分为两种：<strong>栈 和 堆</strong></p>
<ul>
<li><p><strong>栈内存</strong> 用以存放 <strong>基本数据类型</strong> 的变量 和 <strong>对象的引用变量</strong>   ，当一段代码块中定义一个变量时，栈自动为变量分配内存空间，当超过作用域后，被分配的内存被释放。</p>
</li>
<li><p><strong>堆内存</strong> 用以存放 <code>new</code>创建的对象和数组</p>
</li>
<li><p>堆中存在一个数组或者对象的时候，栈中可以创建一个特殊的变量，让栈中这个变量的取值等于数组或者是对象在堆内存中的<strong>首地址</strong>，该变量就变成了堆中对应数组或对象的引用变量。 </p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 粗略代码示意：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>&#123; .... &#125;</span><br><span class="line">main（）&#123;</span><br><span class="line">student a= <span class="keyword">new</span> <span class="title class_">student</span>() ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>内存空间分配示意图：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202303151929090.png"
                      alt="image-20230315192911002" style="zoom:50%;" 
                ></li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">上图代码：</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">eg</span> &#123;</span><br><span class="line">    eg(String tname, <span class="type">int</span> teno) &#123;</span><br><span class="line">        eno = teno;</span><br><span class="line">        name = tname;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> eno;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">eg</span> <span class="variable">e1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">eg</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">eg</span> <span class="variable">e2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">eg</span>(<span class="string">&quot;jack&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="type">eg</span> <span class="variable">e3</span> <span class="operator">=</span> e1; <span class="comment">// 注意这里 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">      这里要重点注意的是，此处只在堆空间中开辟了两块空间，也即 eg 只存在两个实例对象， 对e3的对象内容进行修改，e1的对象内容会同步变化，因为他们引用的是一个实体对象，即本质是：e3 只是 e1 指向的内存空间的第二个引用变量。</span><br></pre></td></tr></table></figure></div>

<h3 id="12、可变参数"><a href="#12、可变参数" class="headerlink" title="12、可变参数"></a>12、可变参数</h3><ul>
<li><strong>在最后一个形参上加”…”就表示该形参可以接受多个参数值，多个参数值被当做数组传入</strong></li>
<li><strong>可变参数只能做为函数的最后一个参数，前面有没有其他参数都可以，一个函数最多只能有一个可变参数。</strong></li>
<li>不可以作为方法的重载。</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">element</span><span class="params">(Integer... args)</span>&#123; . . .  &#125;</span><br><span class="line"></span><br><span class="line">一个小的实例：</span><br><span class="line">  <span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">my_try</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">okchange</span><span class="params">(<span class="type">int</span>... a)</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;输出是: &quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> t : a) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d &quot;</span>, t);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        my_try  t=<span class="keyword">new</span> <span class="title class_">my_try</span>();</span><br><span class="line">        t.okchange(a);   <span class="comment">//这里传的 是数组</span></span><br><span class="line">        t.okchange(n);   <span class="comment">// 这里传的是 单个的数字</span></span><br><span class="line">        t.okchange(<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>);  <span class="comment">//这是直接传递我们的多个数字</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">out ：</span><br><span class="line">    输出是: <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> </span><br><span class="line">	输出是: <span class="number">10</span> </span><br><span class="line">	输出是: <span class="number">1</span> <span class="number">5</span> <span class="number">6</span> <span class="number">9</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="13、this"><a href="#13、this" class="headerlink" title="13、this"></a>13、this</h3><p>除开我们常见的调用本类成员变量和方法，这再提一个少见的 this  调用构造方法：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">eg</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">c</span> &#123;</span><br><span class="line">    <span class="type">int</span> width, length;</span><br><span class="line"></span><br><span class="line">    c() &#123;    <span class="comment">//  这里是无参函数</span></span><br><span class="line">        width = length = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    c(<span class="type">int</span> width) &#123;    <span class="comment">// 这里是一个参数的构造</span></span><br><span class="line">        <span class="built_in">this</span>();   <span class="comment">// this调用无参构造</span></span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    c(<span class="type">int</span> width, <span class="type">int</span> length) &#123;    <span class="comment">// 两个参数的构造  </span></span><br><span class="line">        <span class="built_in">this</span>(width);   <span class="comment">//  this  调用含单参构造</span></span><br><span class="line">        <span class="built_in">this</span>.length = length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>感觉用到的不多，但是可以解决对于同一个对象多次初始化的情况，并且速度肯定是比 每次传一个参数，都对应的覆盖一遍的快</p>
<p><strong>静态方法中不可使用类</strong>，这也就代表着我们的main中是不可以用 this 的</p>
<h3 id="14、super"><a href="#14、super" class="headerlink" title="14、super"></a>14、super</h3><p>在子类继承父类时，<strong>是无法继承构造函数的</strong>，因此，在子类的构造函数中，我们必须要在构造函数的<strong>第一行</strong>调用父类构造函数，这一点和c++不同，因为c++可以使用初始化列表，而java常采用 super来调用父类构造 ，实例如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">a</span> &#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line"></span><br><span class="line">    a() &#123;     <span class="comment">// a的无参构造</span></span><br><span class="line">        x = y = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    a(<span class="type">int</span> x, <span class="type">int</span> y) &#123;   <span class="comment">//含参</span></span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">b</span> <span class="keyword">extends</span> <span class="title class_">a</span> &#123;  <span class="comment">//继承</span></span><br><span class="line">    <span class="type">int</span> z;</span><br><span class="line">    b(<span class="type">int</span> z) &#123;   </span><br><span class="line">        <span class="built_in">super</span>();   <span class="comment">//调用父类的构造初始化 a b</span></span><br><span class="line">        <span class="built_in">this</span>.z = z;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    b(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z) &#123;  </span><br><span class="line">        <span class="built_in">super</span>(x, y);    <span class="comment">//这里我们传递的参数要注意</span></span><br><span class="line">        <span class="built_in">this</span>.z = z;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p><em>当然super的另外一个用处就是调用父类中被 重定义或者是重写 的变量</em></p>
<p><strong>this 和 super 调用构造的区别</strong>：</p>
<ul>
<li>this 是在本类中调用构造，而super 是在子类中调用</li>
<li>this 和 super 不会同时出现，因为他们都需要在某个构造函数的第一行</li>
</ul>
<h3 id="15、转型"><a href="#15、转型" class="headerlink" title="15、转型"></a>15、转型</h3><p>转型分为上转型和下转型，上转型 ： 子类对象到父类对象的类型转换 （自动转换）； 下转型 ： 父类对象到子类对象的类型转换 （强制转换）。</p>
<p>上转型： <code>父类名 父类对象变量 = new 子类名（）；</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">eg :</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;   <span class="comment">//抽象类</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">CalArea</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rect</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="type">int</span> width, length;</span><br><span class="line"></span><br><span class="line">    Rect(<span class="type">int</span> width, <span class="type">int</span> length) &#123;   <span class="comment">//构造</span></span><br><span class="line">        <span class="built_in">this</span>.length = length;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">CalArea</span><span class="params">()</span> &#123;    <span class="comment">// 重写函数</span></span><br><span class="line">        System.out.printf(<span class="string">&quot;长方体的面积是: %d \n&quot;</span>, width * length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123; <span class="comment">//构造</span></span><br><span class="line">    <span class="type">double</span> radius;</span><br><span class="line"></span><br><span class="line">    Circle(<span class="type">double</span> radius) &#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">CalArea</span><span class="params">()</span> &#123;   <span class="comment">// 重写函数</span></span><br><span class="line">        System.out.printf(<span class="string">&quot;圆的面积是: %.3f\n&quot;</span>, <span class="number">3.14</span> * radius * radius);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Shape</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rect</span>(<span class="number">2</span>, <span class="number">5</span>);    <span class="comment">//上转型</span></span><br><span class="line">        a.CalArea();   </span><br><span class="line">        <span class="type">Shape</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">2.2</span>);</span><br><span class="line">        b.CalArea();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> 输出 ：</span><br><span class="line">     长方体的面积是: <span class="number">10</span> </span><br><span class="line">	 圆的面积是: <span class="number">15.198</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>上转型不可调用子类 新增变量 或者 方法</li>
<li>上转型调用的方法是被子类重写的方法</li>
</ul>
<p><strong>上转型实现后，是向多态跨越了一步。</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">下转型： </span><br><span class="line">   <span class="type">Animal</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();<span class="comment">//向上转型</span></span><br><span class="line">        a2.move();</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">c2</span> <span class="operator">=</span> (Cat) a2;   <span class="comment">//向下转型 </span></span><br><span class="line">        c2.catchMouse();</span><br></pre></td></tr></table></figure></div>

<h3 id="16、抽象类"><a href="#16、抽象类" class="headerlink" title="16、抽象类"></a>16、抽象类</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> class 类名 &#123;</span><br><span class="line">    成员变量；</span><br><span class="line">         访问修饰符 返回值类型  方法（）&#123; ... &#125; ；</span><br><span class="line">    访问修饰符 <span class="keyword">abstract</span>  方法（） ；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>抽象方法不可定义方法体，需要在方法声明之后加上分号 </p>
</li>
<li><p>抽象类中可以包含成员变量，一般方法体，抽象方法，构造方法，但是即使有构造函数也不可以实例化，只能被子类用来进行父类成员的初始化</p>
</li>
<li><p>子类需要重写所有抽象方法</p>
</li>
<li><p>抽象类多被用来作为上转型对象实现多态机制。</p>
</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">抽象类的实际意义 示例： </span><br><span class="line">    <span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;   <span class="comment">// 父类shape</span></span><br><span class="line">    String shapename;</span><br><span class="line"></span><br><span class="line">    Shape(String s) &#123;</span><br><span class="line">        shapename = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">calarea</span><span class="params">()</span>;   <span class="comment">//  抽线函数必须被子类实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">rec</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="type">int</span> w, l;</span><br><span class="line"></span><br><span class="line">    rec(String s, <span class="type">int</span> w, <span class="type">int</span> l) &#123;</span><br><span class="line">        <span class="built_in">super</span>(s);<span class="comment">// 这shape的构造函数</span></span><br><span class="line">        <span class="built_in">this</span>.w = w;</span><br><span class="line">        <span class="built_in">this</span>.l = l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> <span class="title function_">calarea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> w * l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="type">double</span> radius;</span><br><span class="line"></span><br><span class="line">    circle(String s, <span class="type">double</span> r) &#123;</span><br><span class="line">        <span class="built_in">super</span>(s);</span><br><span class="line">        <span class="built_in">this</span>.radius = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> <span class="title function_">calarea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3.14</span> * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cylinder</span> &#123;   <span class="comment">//  柱体</span></span><br><span class="line">    Shape s;<span class="comment">//  这也是一个组合类</span></span><br><span class="line">    <span class="type">double</span> height;</span><br><span class="line"></span><br><span class="line">    cylinder(Shape s, <span class="type">double</span> height) &#123;<span class="comment">// 构造函数</span></span><br><span class="line">        <span class="built_in">this</span>.s = s;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">CalVolume</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;%s柱体的体积是%.4f&quot;</span>, s.shapename, s.calarea() * height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">circle</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">circle</span>(<span class="string">&quot;圆形&quot;</span>, <span class="number">1.5</span>);</span><br><span class="line">        <span class="type">cylinder</span> <span class="variable">c_v</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">cylinder</span>(c, <span class="number">5</span>);</span><br><span class="line">        c_v.CalVolume();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">       这里我们特别要注意的就是柱体类的构造函数中，Shape类的传值中，我们传递了Shape 的子类，并且，在柱体类中，调用了柱体类中的shape 类 s 的方法，其方法显示为重写后的类，这里我们也就可以体会到了抽象类的意义和用法 ，</span><br><span class="line">       但是经过实验，发现，即使shape类不是抽象类，calarea 不是抽象方法，这种用法也是支持的。</span><br></pre></td></tr></table></figure></div>

<h3 id="17、接口-以及-接口回调"><a href="#17、接口-以及-接口回调" class="headerlink" title="17、接口   以及  接口回调"></a>17、接口   以及  接口回调</h3><p>为什么使用接口？     ——  主要解决多继承问题</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">接口声明：</span><br><span class="line">interface 接口名&#123;  ...  &#125;</span><br><span class="line"></span><br><span class="line">接口继承接口：</span><br><span class="line">    interface 接口名 extends 接口<span class="number">2</span> ，接口<span class="number">3</span>  &#123;...&#125;</span><br><span class="line"></span><br><span class="line">实现类：</span><br><span class="line">    class 类名  implements 接口名</span><br></pre></td></tr></table></figure></div>

<ul>
<li>类可以继承接口，但是接口只可以继承接口</li>
<li>接口中中的变量都是静态常量 （默认为public static final )，方法都是抽象方法 （默认为 public abstract ）</li>
<li>实现类 必须实现 implements 后面接口中的所有方法，并且所有的方法必须是 public 属性</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">USB</span> &#123;     <span class="comment">//声明接口</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">write</span><span class="params">()</span>;   <span class="comment">//默认的都是  public  abstract</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">YouPan</span> <span class="keyword">implements</span> <span class="title class_">USB</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;U盘正在通过USB功能读取数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;U盘正在通过USB功能写入数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JianPan</span> <span class="keyword">implements</span> <span class="title class_">USB</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;键盘正在通过USB功能读取数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;键盘正在通过USB功能写入数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">YouPan</span> <span class="variable">youPan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">YouPan</span>();      <span class="comment">//这里是常规的类声明</span></span><br><span class="line">        youPan.read(); </span><br><span class="line">        youPan.write();</span><br><span class="line"></span><br><span class="line">        <span class="type">JianPan</span> <span class="variable">jianPan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JianPan</span>();</span><br><span class="line">        jianPan.read();</span><br><span class="line">        jianPan.write();</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//接口回调</span></span><br><span class="line">        <span class="type">USB</span> <span class="variable">youPan2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">YouPan</span>();     <span class="comment">//USB接口类引用可以指向一个实现了USB接口的对象  </span></span><br><span class="line"></span><br><span class="line">        youPan2.read();</span><br><span class="line">        youPan2.write();</span><br><span class="line"></span><br><span class="line">        <span class="type">USB</span> <span class="variable">jianPan2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JianPan</span>();    <span class="comment">//USB接口类引用可以指向一个实现了USB接口的对象</span></span><br><span class="line"></span><br><span class="line">        jianPan2.read();</span><br><span class="line">        jianPan2.write();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="18、内部类"><a href="#18、内部类" class="headerlink" title="18、内部类"></a>18、内部类</h3><p>类的定义是可以嵌套的，当我们的内部类的内容只对于外部类才有意义时，就可考虑采取内部类</p>
<ul>
<li><strong>内部类可以访问外部类的所有成员，包括私有类</strong>，而外部类不可以直接访问内部类的私有成员，但是可以通过内部类的对象进行访问</li>
<li>内部类分为 <strong>实例内部类</strong>和 <strong>静态内部类</strong> ，其中 实例内部类 的对象必须在 **外部类的对象 **存在的实例的情况下才可以创建。</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">outer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">y</span> <span class="operator">=</span> <span class="string">&quot;外部类&quot;</span>;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">inner</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ix</span> <span class="operator">=</span> <span class="number">15</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">String</span> <span class="variable">iy</span> <span class="operator">=</span> <span class="string">&quot;内部类&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">inner_f</span><span class="params">()</span> &#123;</span><br><span class="line">            x += <span class="number">110</span>;    <span class="comment">//内部类访问外部私有成员</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">outer_f</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">inner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">inner</span>();    <span class="comment">//外部方法中创建内部类对象</span></span><br><span class="line">        <span class="comment">//  ix=15;    会报错，外部类不可以直接访问内部类的私有成员</span></span><br><span class="line">        in.inner_f();<span class="comment">//利用内部类的对象使用内部类方法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">localinner</span> &#123;  <span class="comment">//创建局部内部类     即在外部类的某个方法中创建的内部类</span></span><br><span class="line">            <span class="keyword">void</span> <span class="title function_">localinner_f</span><span class="params">()</span> &#123;</span><br><span class="line">                x = <span class="number">215</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">localinner</span> <span class="variable">tlocalinner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">localinner</span>();   <span class="comment">//在 局部内部类 所属方法中创建 局部内部类的对象</span></span><br><span class="line">        tlocalinner.localinner_f();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">outer</span> <span class="variable">touter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">outer</span>();</span><br><span class="line">        touter.outer_f();</span><br><span class="line">        outer.<span class="type">inner</span> <span class="variable">inn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">outer</span>().<span class="keyword">new</span> <span class="title class_">inner</span>();  <span class="comment">//在主函数中创建内部类的对象的格式</span></span><br><span class="line">        inn.inner_f();</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在外部类以外的类中访问内部类 ：</p>
<p><code>        外部类.内部类 内部类对象=new 外部类( ) .new 内部类( ) ;</code></p>
<h3 id="19、匿名对象-和-匿名类"><a href="#19、匿名对象-和-匿名类" class="headerlink" title="19、匿名对象 和 匿名类"></a>19、匿名对象 和 匿名类</h3><h4 id="匿名对象-："><a href="#匿名对象-：" class="headerlink" title="匿名对象 ："></a>匿名对象 ：</h4><p>只创建对象而没有引用即 只有堆空间的内存，而无栈空间的引用 。<strong>因此该对象只可以用一次</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">示例：</span><br><span class="line">			<span class="keyword">new</span>   <span class="title class_">cylinder</span>（“圆柱体”, s，<span class="number">30</span>）.calvoiume( ) ;</span><br></pre></td></tr></table></figure></div>

<h4 id="匿名类-："><a href="#匿名类-：" class="headerlink" title="匿名类 ："></a>匿名类 ：</h4><p>创建一个对象的时候可以吧类体的定义和对象的创建组合在一起，此类是某一个类的去掉头部声明的派生类类体，此时创建的对象就叫做匿名类</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">格式 ：</span><br><span class="line"> 			<span class="keyword">new</span> 类名（ 实参列表 ）&#123;</span><br><span class="line"> 			继承“类名” 的子类类体</span><br><span class="line"> 			&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>类名是某个已经存在的的类</li>
<li>此类是继承”类名”的派生子类，可以重写父类中的方法</li>
<li><strong>匿名类是内部类</strong>，可以访问外部类的所有方法 和 变量</li>
<li>匿名类创建的对象一般<strong>作为参数进行传递</strong></li>
<li>匿名类中不可以定义静态变量和方法</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">a_f</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是一个父类&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test_f</span><span class="params">(A a)</span> &#123;   <span class="comment">//传递的是一个类</span></span><br><span class="line">        a.a_f();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        test_f(                 <span class="comment">//  匿名类</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">A</span>() &#123;</span><br><span class="line">                    <span class="keyword">void</span> <span class="title function_">a_f</span><span class="params">()</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;匿名类的输出&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="20、接口的匿名类"><a href="#20、接口的匿名类" class="headerlink" title="20、接口的匿名类"></a>20、接口的匿名类</h3><p><code>new 接口名( )&#123;   实现 &quot;接口名 &quot; 的类 &#125; </code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">a_f</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test_f</span><span class="params">(A a)</span> &#123;   <span class="comment">//传递的是一个类</span></span><br><span class="line">        a.a_f();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        test_f(                 <span class="comment">//  接口的匿名类</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">A</span>() &#123;</span><br><span class="line">                  <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">a_f</span><span class="params">()</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;匿名类的输出&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="21、异常类"><a href="#21、异常类" class="headerlink" title="21、异常类"></a>21、异常类</h3><p>java中异常类的父类是 Exception 类，其拥有诸多子类</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">常见异常类：</span><br><span class="line">算术异常类：ArithmeticExecption</span><br><span class="line"></span><br><span class="line">空指针异常类：NullPointerException</span><br><span class="line"></span><br><span class="line">类型强制转换异常：ClassCastException</span><br><span class="line"></span><br><span class="line">数组负下标异常：NegativeArrayException</span><br><span class="line"></span><br><span class="line">数组下标越界异常：ArrayIndexOutOfBoundsException</span><br><span class="line"></span><br><span class="line">违背安全原则异常：SecturityException</span><br><span class="line"></span><br><span class="line">文件已结束异常：EOFException</span><br><span class="line"></span><br><span class="line">文件未找到异常：FileNotFoundException</span><br><span class="line"></span><br><span class="line">字符串转换为数字异常：NumberFormatException</span><br><span class="line"></span><br><span class="line">操作数据库异常：SQLException</span><br><span class="line"></span><br><span class="line">输入输出异常：IOException</span><br><span class="line"></span><br><span class="line">方法未找到异常：NoSuchMethodException</span><br><span class="line"></span><br><span class="line">java.lang.AbstractMethodError</span><br><span class="line"></span><br><span class="line">抽象方法错误。当应用试图调用抽象方法时抛出。</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>示例：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wangxing.test1;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMain</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">//1.当我们无法判断try&#123;&#125;何种具体异常的时候，</span></span><br><span class="line">		<span class="comment">//我们可以在catch块的参数中通过定义Exception/Throwable类的对象来代替具体异常类型。</span></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		try &#123;</span></span><br><span class="line"><span class="comment">			int res=10/0;</span></span><br><span class="line"><span class="comment">			System.out.println(&quot;res==&quot;+res);</span></span><br><span class="line"><span class="comment">		&#125;catch(Exception e) &#123;</span></span><br><span class="line"><span class="comment">			System.out.println(&quot;处理异常!&quot;);</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">		<span class="comment">//2.一个try&#123;&#125;后面可以跟随多个catch块，多个catch块需要按照具体异常的级别由低到高排列</span></span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">		<span class="type">int</span>  numbers[]=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">		numbers[<span class="number">0</span>]=<span class="number">10</span>;</span><br><span class="line">		numbers[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">		<span class="type">int</span> num1=numbers[<span class="number">0</span>];</span><br><span class="line">		<span class="type">int</span> num2=numbers[<span class="number">1</span>];</span><br><span class="line">		<span class="type">int</span> num3=num1/num2;</span><br><span class="line">		numbers[<span class="number">2</span>]=num3;</span><br><span class="line">		System.out.println(<span class="string">&quot;程序执行完毕!!&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">catch</span>(IndexOutOfBoundsException e3) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;处理数组下标越界异常!&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">catch</span>(ArithmeticException e2) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;处理除数为0的异常!&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">catch</span>(Exception e1) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;exception异常!&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">catch</span>(Throwable e) &#123;</span><br><span class="line">            </span><br><span class="line">			System.out.println(<span class="string">&quot;Throwable异常!&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;有无异常都要执行&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>自定义异常类</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202303292000670.png"
                      alt="image-20230329195959569" style="zoom:67%;" 
                >

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PrimeException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span> &#123;   自定义异常类一般是 Exception的子类</span><br><span class="line">    PrimeException(<span class="type">int</span> add) &#123;</span><br><span class="line">     <span class="built_in">this</span>. msg=<span class="string">&quot;出现异常，和为&quot;</span>+add+<span class="string">&quot;,为素数&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">private</span> String msg;</span><br><span class="line">   <span class="keyword">public</span> String  <span class="title function_">getmsg</span><span class="params">()</span>&#123;   <span class="comment">//自定义异常类要重定义getmessage 的方法，用以描述信息</span></span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">is_prime</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i * i &lt;= a; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//如果不是素数就返回 0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">//是素数就返回1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> <span class="keyword">throws</span> PrimeException &#123;</span><br><span class="line">        <span class="type">int</span> a, b，add_out;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        a = sc.nextInt();</span><br><span class="line">        b = sc.nextInt();</span><br><span class="line">        add_out = a + b;</span><br><span class="line">        <span class="keyword">if</span> (is_prime(add_out) == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">PrimeException</span> <span class="variable">ex</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrimeException</span>(add_out);  <span class="comment">//如果符合条件就创建异常类对象并且  抛出</span></span><br><span class="line">            <span class="keyword">throw</span>(ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Main.f();<span class="comment">// 检查是否有 异常类的对象的抛出</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (PrimeException ex) &#123;</span><br><span class="line">            System.out.println(ex.getmsg());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h3 id="22、泛型"><a href="#22、泛型" class="headerlink" title="22、泛型"></a>22、泛型</h3><h4 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line"><span class="keyword">public</span> class 类名 &lt;泛型类型<span class="number">1</span>,...&gt; &#123;  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>+++++++</p>
<ul>
<li><p>泛型类型<strong>必须是引用类型（非基本数据类型）</strong></p>
</li>
<li><p>定义泛型类，在类名后添加一对尖括号，并在尖括号中填写类型参数，参数可以有多个，多个参数使用逗号分隔：</p>
</li>
<li><p>后面的参数类型也是有规范的，不能像上面一样随意，通常类型参数我们都使用大写的单个字母表示：</p>
<blockquote>
<p>T：任意类型 type<br>E：集合中元素的类型 element<br>K：key-value形式 key<br>V： key-value形式 value</p>
</blockquote>
</li>
</ul>
<p>+++++</p>
<p>示例：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GenericClass</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T value;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GenericClass</span><span class="params">(T value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(T value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        GenericClass&lt;String&gt; name = <span class="keyword">new</span> <span class="title class_">GenericClass</span>&lt;&gt;(<span class="string">&quot;mikechen的互联网架构&quot;</span>);</span><br><span class="line">        System.out.println(name.getValue());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        GenericClass&lt;Integer&gt; number = <span class="keyword">new</span> <span class="title class_">GenericClass</span>&lt;&gt;(<span class="number">123</span>);</span><br><span class="line">        System.out.println(number.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h4><p><code>public interface 接口名&lt;泛型类型&gt; &#123;&#125;</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Inter</span>&lt;T&gt; &#123;    <span class="comment">//泛型接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(T t)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InterImpl</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Inter</span>&lt;E&gt; &#123;   <span class="comment">//子类是泛型类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(E t)</span> &#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Inter&lt;String&gt; inter = <span class="keyword">new</span> <span class="title class_">InterImpl</span>&lt;String&gt;();</span><br><span class="line">        inter.show(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h4 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h4><p><code>格式： public &lt;泛型类型&gt; 返回类型 方法名（泛型类型 变量名） &#123;   .... &#125;</code></p>
<h3 id="23、String"><a href="#23、String" class="headerlink" title="23、String"></a>23、String</h3><p>声明：1 、 普通变量声明方式：</p>
<p>​           String 变量名 &#x3D;字符串数据 </p>
<p>​		  2 、类的声明方式 ：</p>
<p>​			String 对象名 &#x3D; new String （）</p>
<p><strong>相关函数如下：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">获取长度：</span><br><span class="line">  str.  length()</span><br><span class="line">  </span><br><span class="line">  字符串比较：</span><br><span class="line"> <span class="type">boolean</span>     <span class="title function_">equals</span><span class="params">(  str )</span>    比较两个字符串是否相同  ，是则返回 <span class="literal">true</span></span><br><span class="line"> <span class="type">boolean</span>   <span class="title function_">equalsIgnoreCase</span><span class="params">( str )</span>    忽略大小写</span><br><span class="line">    <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">()</span>   会根据ASCII 进行比较 ，  大于参数返回正值，小于参数返回负值 ，等于 <span class="keyword">return</span> <span class="number">0</span> </span><br><span class="line">    </span><br><span class="line">    字符串检索 ：</span><br><span class="line">    <span class="type">int</span>  <span class="title function_">indexOf</span><span class="params">( str )</span> 返回第一次出现指定子串str 的父串索引</span><br><span class="line">      <span class="type">int</span>  <span class="title function_">indexOf</span><span class="params">( str ，<span class="type">int</span> num )</span> 从 num开始 ，返回第一次出现指定子串str 的父串索引</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">LastIndexOf</span><span class="params">(str )</span>   从字符串的尾部开始，向前进行搜索  未找到返回 -<span class="number">1</span></span><br><span class="line">        <span class="type">int</span> <span class="title function_">LastIndexOf</span><span class="params">(str，num)</span>   从num开始，向前进行搜索</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    字符串链接 替换 </span><br><span class="line">    concat( str )   将str接到当前字符串尾部</span><br><span class="line">    </span><br><span class="line">    String <span class="title function_">replace</span><span class="params">( <span class="type">char</span> oldChar,<span class="type">char</span> newChar )</span> 将old替换为<span class="keyword">new</span></span><br><span class="line">        <span class="title class_">String</span> replaceAll( <span class="type">char</span> oldChar,<span class="type">char</span> newChar ) 将old替换为<span class="keyword">new</span></span><br><span class="line">    <span class="title class_">replace</span>函数是替换字符串中第一个匹配的字符或字符串，语法为：replace(old, <span class="keyword">new</span>)。其中，old表示要被替换的字符或字符串，<span class="keyword">new</span>表示替换后的字符或字符串。  replaceall函数是替换字符串中    所有匹配的字符或字符串，</span><br><span class="line">    </span><br><span class="line">    toLowerCase()  将所以的转换为小写</span><br><span class="line">    toUpperCase() 将所以的转化为大写</span><br><span class="line">    String <span class="title function_">trim</span><span class="params">()</span>  <span class="comment">// 去除前后的空格</span></span><br><span class="line">    </span><br><span class="line">    截取字符串</span><br><span class="line">    subString(<span class="type">int</span> num) 截取不包含num的，在num之后的串</span><br><span class="line">    eg:</span><br><span class="line">String a=<span class="string">&quot;0123456&quot;</span>;</span><br><span class="line">a=a.substring(<span class="number">1</span>)</span><br><span class="line">    out: a=<span class="number">123456</span></span><br><span class="line">        注意我们的substring 下标是从 <span class="number">1</span>开始的，不是 <span class="number">0</span> </span><br><span class="line">        </span><br><span class="line">         subString(<span class="type">int</span> start，<span class="type">int</span> end ) 截取不包含num的，包含end</span><br></pre></td></tr></table></figure></div>

<p><strong>注意我们的函数都需要有着相应的变量承接</strong></p>
<blockquote>
<p>**String 类和 StringBuffer 类的最大的不同 **：</p>
<p>例如，对于String 对象 str 我们进行某个函数操作吗，需要新对象进行承接，而 str 本身是不会改变的，</p>
<p>但是 对于StringBuffer 的对象我们进行 某函数操作，不需要承接，它自身会随之改变</p>
</blockquote>
<h3 id="24、日期类"><a href="#24、日期类" class="headerlink" title="24、日期类"></a>24、日期类</h3><h4 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h4><p><code>java.util.Date</code>类表示特定的瞬间，精确到毫秒。Date类的构造函数可以把<strong>毫秒值转成日期对象</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">dt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        System.out.println(dt);     <span class="comment">//  打印的是日期</span></span><br><span class="line">      System.out.println(dt.getTime());  <span class="comment">// gettime()  返回的是冲1970-1-1到当前时间 的毫秒数</span></span><br><span class="line">        </span><br><span class="line">        Date dt2=<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2013</span>-<span class="number">1900</span>,<span class="number">6</span>-<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 直接指定时间  注意我们这里，年份必须要减去1900，月份要减去 1 ，上面创建的时间就是 2013 6 1</span></span><br><span class="line">        System.out.println(dt2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出的结果是程序运行的日期，格式如下：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304012023527.png"
                      alt="image-20230401202331471" style="zoom:67%;" 
                >

<p>时间默认的顺序是：星期，月，日，小时，分，秒，年  （ CST为China Standard Time 即中国标准时间 ）</p>
<h4 id="SimpleDateFormat类"><a href="#SimpleDateFormat类" class="headerlink" title="SimpleDateFormat类"></a>SimpleDateFormat类</h4><p><code>java.text.DateFormat</code> 是日期&#x2F;时间格式化子类的抽象类，我们通过这个类可以帮我们完成日期和文本之间的转换,也就是可以在Date对象与String对象之间进行来回转换。<strong>因为DateFormat是抽象类</strong>，所以我们使用时用的都是其子类，这里介绍其子类**SimpleDateFormat **类</p>
<p>tou ：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br></pre></td></tr></table></figure></div>

<p>++++</p>
<p>构造方法为：<code>public SimpleDateFormat( String pattern )</code>   </p>
<blockquote>
<p><strong>参数pattern是一个字符串，代表日期时间的自定义格式</strong>。</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">dt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">DateFormat</span> <span class="variable">df</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日 EEE HH:mm:ss&quot;</span>);   <span class="comment">//   自定义格式</span></span><br><span class="line">        String nowtime=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        nowtime=df.format(dt);   <span class="comment">//   实现初始化的同时，进行了String 和  Date  类的转化</span></span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前时间:&quot;</span>+nowtime);</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------------------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<table>
<thead>
<tr>
<th>标识字母（区分大小写）</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>y</td>
<td>年</td>
</tr>
<tr>
<td>M</td>
<td>月</td>
</tr>
<tr>
<td>d</td>
<td>日</td>
</tr>
<tr>
<td>H</td>
<td>时          0 ~ 23</td>
</tr>
<tr>
<td>h</td>
<td>时          1 ~ 12</td>
</tr>
<tr>
<td>m</td>
<td>分</td>
</tr>
<tr>
<td>s</td>
<td>秒</td>
</tr>
</tbody></table>
<p>​	</p>
]]></content>
  </entry>
  <entry>
    <title>初识  JS</title>
    <url>/2023/08/31/%E5%88%9D%E8%AF%86-JS/</url>
    <content><![CDATA[<h2 id="初识JS"><a href="#初识JS" class="headerlink" title="初识JS"></a>初识JS</h2><p>可以来增强用户和html页面的交互过程，可以来控制html元素，让页面有一些动态的效果，增强用户的体验。  </p>
<blockquote>
<p>1、js源码不需要编译，浏览器可以直接解释运行。</p>
</blockquote>
<blockquote>
<p>2、js是弱类型语言，js变量声明不需要指明类型。</p>
</blockquote>
<h3 id="1、JavaScript的组成"><a href="#1、JavaScript的组成" class="headerlink" title="1、JavaScript的组成"></a>1、JavaScript的组成</h3><table>
<thead>
<tr>
<th align="center">组成部分</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>ECMA Script</strong></td>
<td align="left">构成了JS核心的语法基础</td>
</tr>
<tr>
<td align="center"><strong>BOM</strong></td>
<td align="left">Browser Object Model 浏览器对象模型，用来操作浏览器上的对象</td>
</tr>
<tr>
<td align="center"><strong>DOM</strong></td>
<td align="left">Document Object Model 文档对象模型，用来操作网页中的元素（标签）</td>
</tr>
</tbody></table>
<h3 id="2、JS的引入"><a href="#2、JS的引入" class="headerlink" title="2、JS的引入"></a>2、JS的引入</h3><p>内部引入：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;    ....    &lt;/scipt&gt;</span><br></pre></td></tr></table></figure></div>

<p>外部引入：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;js/文件名.js&quot;</span>&gt; &lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="3、JS输出数据的三种方式"><a href="#3、JS输出数据的三种方式" class="headerlink" title="3、JS输出数据的三种方式"></a>3、JS输出数据的三种方式</h3><h4 id="1、弹窗显示"><a href="#1、弹窗显示" class="headerlink" title="1、弹窗显示"></a>1、弹窗显示</h4><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt; <span class="title function_">alert</span>(<span class="string">&quot;你好&quot;</span>) ;&lt;/script&gt;      注意这里的单双引号都是可以的 ，注意分号 </span><br></pre></td></tr></table></figure></div>

<h4 id="2、在页面中显示"><a href="#2、在页面中显示" class="headerlink" title="2、在页面中显示"></a>2、在页面中显示</h4><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt; <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;输出html内容到页面&#x27;</span>); &lt;/script&gt; </span><br><span class="line"></span><br><span class="line"> <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = x</span><br><span class="line">这一句的意义是将 x 的内容输出到 id 为 demo  的容器/控件中去显示</span><br></pre></td></tr></table></figure></div>

<h4 id="3、输出浏览器到控制台"><a href="#3、输出浏览器到控制台" class="headerlink" title="3、输出浏览器到控制台"></a>3、输出浏览器到控制台</h4><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;输出到浏览器控制台&#x27;</span>);    <span class="comment">//  即在我们的浏览器控制台上进行显示</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="4、注释"><a href="#4、注释" class="headerlink" title="4、注释"></a>4、注释</h3><p>两种方式：即同java ，&#x2F;&#x2F; …      或者   &#x2F;* …  *&#x2F;</p>
<h3 id="5、JS变量"><a href="#5、JS变量" class="headerlink" title="5、JS变量"></a>5、JS变量</h3><h4 id="1、数据类型"><a href="#1、数据类型" class="headerlink" title="1、数据类型"></a>1、数据类型</h4><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="C:\Users\Forming\AppData\Roaming\Typora\typora-user-images\image-20230830192646382.png"
                      alt="image-20230830192646382" style="zoom:50%;" 
                >

<h4 id="2、声明方法"><a href="#2、声明方法" class="headerlink" title="2、声明方法"></a>2、声明方法</h4><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span>  a；   <span class="keyword">let</span>定义局部变量</span><br><span class="line"><span class="keyword">var</span> b；   <span class="keyword">var</span>定义全局变量</span><br><span class="line"><span class="keyword">const</span> c  = value ；  <span class="keyword">const</span> 定义常量</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		&lt;script&gt;</span><br><span class="line">			<span class="comment">//整数类型</span></span><br><span class="line">			<span class="keyword">var</span> a=<span class="number">3</span>;</span><br><span class="line"> </span><br><span class="line">			<span class="comment">// Boolean类型</span></span><br><span class="line">			<span class="keyword">var</span> b=<span class="literal">true</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 定义小数类型  小数和整数类型统称为number类型</span></span><br><span class="line">			<span class="keyword">var</span> score=<span class="number">2.333</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 定义常量类型  常量类型一旦被定义就不能被改变</span></span><br><span class="line">			<span class="keyword">const</span> <span class="variable constant_">PI</span>=<span class="number">3.1415926</span> </span><br><span class="line">			 </span><br><span class="line">		    <span class="comment">//boolean类型 </span></span><br><span class="line">			<span class="keyword">var</span> f=<span class="literal">true</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">var</span> m;   <span class="comment">///若未进行初始化，则无法输出内容到控制台</span></span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(m);</span><br><span class="line">	</span><br><span class="line">			<span class="comment">// 字符串类型 string</span></span><br><span class="line">			<span class="keyword">var</span> o=<span class="string">&quot;dd&quot;</span>;</span><br><span class="line">		&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>



<h3 id="6、typeof判断数据类型"><a href="#6、typeof判断数据类型" class="headerlink" title="6、typeof判断数据类型"></a>6、typeof判断数据类型</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">			<span class="comment">// 使用let关键字 定义字符串</span></span><br><span class="line">			<span class="keyword">let</span> str1 = <span class="string">&quot;你好JS!&quot;</span>;</span><br><span class="line">			<span class="keyword">let</span> str2 =  <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> str1);</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> str2);</span><br><span class="line"> </span><br><span class="line">			<span class="comment">// 定义整数</span></span><br><span class="line">			<span class="keyword">let</span> num1 = <span class="number">1314</span>;</span><br><span class="line">			<span class="keyword">let</span> num2 = <span class="number">13.14</span>;<span class="comment">//四舍五入，保留2位</span></span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> num1);</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> num2);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 定义boolean类型</span></span><br><span class="line">			<span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> flag);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 末定义类型</span></span><br><span class="line">			<span class="keyword">let</span> a;</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> a); ;  <span class="comment">// 输出undefined</span></span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 引用数据类型</span></span><br><span class="line">			<span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> obj)  <span class="comment">//  输出object</span></span><br><span class="line">			</span><br><span class="line">		&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="7、算数运算符"><a href="#7、算数运算符" class="headerlink" title="7、算数运算符"></a>7、算数运算符</h3><p>JS中中的算符可以使得数值和字符串进行运算，底层进行隐式转换。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">&quot;10&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">20</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str + num); <span class="comment">// 1020   注意这里的加号不是30 ，而是更像字符串的相链接</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str - num); <span class="comment">// -10 </span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str * num); <span class="comment">// 200</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str / num); <span class="comment">// 0.5</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="title function_">alert</span>(a/b);<span class="comment">//js相除可以得到小数  ，最后得到0.66666666666</span></span><br><span class="line"> </span><br><span class="line"><span class="title function_">alert</span>(<span class="title function_">typeof</span>(a+c));<span class="comment">// number类与字符串类型相加，字符串拼接  加法得到String ，输出String</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> d = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">var</span> f = <span class="string">&#x27;4&#x27;</span>;</span><br><span class="line"><span class="title function_">alert</span>(d+f);<span class="comment">//拼接的64</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> a1 = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> a2 = <span class="string">&quot;4&quot;</span>;</span><br><span class="line"><span class="title function_">alert</span>(a1-a2);<span class="comment">// -1 如果字符串与number类型进行相减，默认把字符串的数字转成number类型</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> b1 = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> b2 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="title function_">alert</span>(b1-b2);<span class="comment">//输出缩写 NaN ，  即not a number ;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//如果数值与boolean类型为的数据，进行做运算时，会将boolean数据转换成数值。true转为1，false转为0</span></span><br><span class="line"><span class="keyword">var</span> bo1 = <span class="literal">true</span>;  </span><br><span class="line"><span class="keyword">var</span> bo2 = <span class="literal">false</span>;</span><br><span class="line"><span class="title function_">alert</span>(a+bo1);<span class="comment">//3</span></span><br><span class="line"><span class="title function_">alert</span>(a+bo2);<span class="comment">//2</span></span><br></pre></td></tr></table></figure></div>

<h3 id="8、比较运算符-x3D-x3D-、-x3D-x3D-x3D-、！-x3D-、！-x3D-x3D"><a href="#8、比较运算符-x3D-x3D-、-x3D-x3D-x3D-、！-x3D-、！-x3D-x3D" class="headerlink" title="8、比较运算符&#x3D;&#x3D;、&#x3D;&#x3D;&#x3D;、！&#x3D;、！&#x3D;&#x3D;"></a>8、比较运算符&#x3D;&#x3D;、&#x3D;&#x3D;&#x3D;、！&#x3D;、！&#x3D;&#x3D;</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">== : 只比较内容是否相同  根本不比较数据类型 </span><br><span class="line">===：全等于。在比较之前，先判断类型，如果类型不一样，则直接返回<span class="literal">false</span> </span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">22</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="string">&quot;22&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">alert</span>(a==c);<span class="comment">//输出true</span></span><br><span class="line">    <span class="title function_">alert</span>(a===c);<span class="comment">//输出false</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">同样的：</span><br><span class="line"><span class="keyword">let</span> a=<span class="string">&quot;123&quot;</span> ;</span><br><span class="line"><span class="keyword">let</span> b=<span class="number">123</span> ;</span><br><span class="line">!= 的比较为二者相同</span><br><span class="line">而 !== 的比较结果是二者不同，即 !== 也会先进行比较类型</span><br></pre></td></tr></table></figure></div>



<h3 id="9、各类型的布尔值"><a href="#9、各类型的布尔值" class="headerlink" title="9、各类型的布尔值"></a>9、各类型的布尔值</h3><p>JS中对各种数据类型作为布尔值有以下特点：</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="left">用法</th>
</tr>
</thead>
<tbody><tr>
<td align="center">boolean</td>
<td align="left">true为真、false为假</td>
</tr>
<tr>
<td align="center">number</td>
<td align="left">非0为true</td>
</tr>
<tr>
<td align="center">string</td>
<td align="left">除了空字符串(“”)，其他都是true</td>
</tr>
<tr>
<td align="center">null&amp;undefined</td>
<td align="left">都是false</td>
</tr>
<tr>
<td align="center">对象</td>
<td align="left">所有对象都是true</td>
</tr>
</tbody></table>
<h3 id="10、JS流程控制语句"><a href="#10、JS流程控制语句" class="headerlink" title="10、JS流程控制语句"></a>10、JS流程控制语句</h3><h4 id="1、if"><a href="#1、if" class="headerlink" title="1、if"></a>1、if</h4><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">        代码块;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">        代码块;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        代码块;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<h4 id="2、switch"><a href="#2、switch" class="headerlink" title="2、switch"></a>2、switch</h4><p>注意事项：<br>                1、switch表达式一定会先找case,找到后一定要给break<br>                2、switch给位置没有关系，跟case有关<br>                3、如果找到后没有break，可以继续执行，直到找到break或都程序结束</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">	&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"> 			<span class="keyword">var</span> score = <span class="number">90</span>;<span class="comment">//定义一个变量</span></span><br><span class="line"><span class="comment">/* parseInt 取整的一个函数（方法） */</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">switch</span>(<span class="built_in">parseInt</span>(score/<span class="number">10</span>))&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">			<span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">				<span class="title function_">alert</span>(<span class="string">&quot;学霸&quot;</span>);</span><br><span class="line">				<span class="comment">// break;</span></span><br><span class="line">			<span class="attr">default</span>:</span><br><span class="line">				<span class="title function_">alert</span>(<span class="string">&quot;学渣&quot;</span>);   <span class="comment">//  虽然是default ，但是没有break，继续往下</span></span><br><span class="line">				<span class="comment">// break;</span></span><br><span class="line">			<span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">				<span class="title function_">alert</span>(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">				<span class="comment">// break;</span></span><br><span class="line">			<span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">				<span class="title function_">alert</span>(<span class="string">&quot;还行&quot;</span>);</span><br><span class="line">				<span class="keyword">break</span>;	</span><br><span class="line">		&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<h4 id="3、for循环"><a href="#3、for循环" class="headerlink" title="3、for循环"></a>3、for循环</h4><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、普通<span class="keyword">for</span>循环</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> 初始化语句; 条件表达式; 条件控制语句)&#123;    </span><br><span class="line">    循环体;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、增强<span class="keyword">for</span>循环</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> 变量名 <span class="keyword">of</span> 对象)&#123;</span><br><span class="line">    需要执行的代码;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、索引<span class="keyword">for</span>循环</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> 变量 <span class="keyword">in</span> 对象)&#123;</span><br><span class="line">    需要执行的代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>for of 与 for in之间的区别</strong></p>
<blockquote>
<p>for in可以遍历对象,for of不能遍历对象</p>
<p>for in遍历出数组中的索引,for of遍历出数组中的元素</p>
</blockquote>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 定义数组</span></span><br><span class="line">  <span class="keyword">let</span> arr = [<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>];</span><br><span class="line"> </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;===================普通for循环===================&quot;</span>);</span><br><span class="line">    <span class="comment">// 普通for循环</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; arr.<span class="property">length</span> ; i++) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;===================forof循环===================&quot;</span>);</span><br><span class="line">    <span class="comment">// for of循环</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> e <span class="keyword">of</span> arr) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;===================forin循环===================&quot;</span>);</span><br><span class="line">    <span class="comment">// for in循环</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">in</span> arr) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[index]);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<h4 id="4、while-和-do…while-同-java"><a href="#4、while-和-do…while-同-java" class="headerlink" title="4、while 和 do…while 同 java"></a>4、while 和 do…while 同 java</h4><h3 id="11、函数-及-匿名函数"><a href="#11、函数-及-匿名函数" class="headerlink" title="11、函数  及  匿名函数"></a>11、函数  及  匿名函数</h3><ul>
<li>如果定义名称相同的方法，会被覆盖，js中没有方法的重载的概念</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名(参数列表)&#123;</span><br><span class="line">    函数体;</span><br><span class="line">    [<span class="keyword">return</span> 返回值;]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>



<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="keyword">let</span> a = <span class="number">3</span>;</span><br><span class="line">		<span class="keyword">let</span> b = <span class="number">4</span>;</span><br><span class="line">		<span class="title function_">alert</span>(a+b);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//方法必须调用，不调用不执行</span></span><br><span class="line">		<span class="title function_">demo</span>();</span><br><span class="line"><span class="comment">//===============================================</span></span><br><span class="line">			</span><br><span class="line">	<span class="comment">//有参无返回值的方法</span></span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">demo2</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">		<span class="title function_">alert</span>(a+b);</span><br><span class="line">	&#125;</span><br><span class="line">	    <span class="title function_">demo2</span>(<span class="number">4</span>,<span class="number">6</span>);</span><br><span class="line"><span class="comment">//===============================================</span></span><br><span class="line">			</span><br><span class="line">	<span class="comment">//无参有返回值的方法</span></span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">demo3</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">4</span>+<span class="number">4</span>;</span><br><span class="line">	&#125;</span><br><span class="line">		<span class="keyword">let</span> sum = <span class="title function_">demo3</span>();</span><br><span class="line">		<span class="title function_">alert</span>(sum);</span><br><span class="line"><span class="comment">//===============================================</span></span><br><span class="line">			</span><br><span class="line">	<span class="comment">//有参有返回值的方法</span></span><br><span class="line">		<span class="keyword">function</span> <span class="title function_">demo4</span>(<span class="params">a , b , c</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> a+b+c;</span><br><span class="line">	&#125;</span><br><span class="line">		<span class="keyword">let</span> d =  <span class="title function_">demo4</span>(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">		<span class="title function_">alert</span>(d);</span><br></pre></td></tr></table></figure></div>

<p>++++</p>
<h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>匿名函数被创建后立即执行</p>
<p><code>(  function （）&#123;.....&#125; ) </code><strong>（）</strong>;<br>     <code>(</code> <code>function ( ) &#123;....&#125; </code><strong>（）</strong><code>） </code>    ；    即首先我们的function整体是需要括号的，  后面的（）在整体的内部还是外部都是可以的</p>
<h3 id="12、含有函数的综合小实例"><a href="#12、含有函数的综合小实例" class="headerlink" title="12、含有函数的综合小实例"></a>12、含有函数的综合小实例</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    input&#123;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        height: 300px;</span><br><span class="line">        width: 500px;</span><br><span class="line">        font-size: 100px;</span><br><span class="line">        margin: auto;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function demo()&#123;</span><br><span class="line">            alert(&quot;点我干嘛？&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;点我哦&quot; onclick=&quot;demo()&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="13、基础-获取标签内容-及-修改"><a href="#13、基础-获取标签内容-及-修改" class="headerlink" title="13、基础-获取标签内容 及 修改"></a>13、基础-获取标签内容 及 修改</h3><p>利用<strong>document.getElementById(‘id名’)；</strong></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box&#x27;</span>);  \\获取到了div</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span>	</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></div>

<p>举例：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function demo()&#123;</span><br><span class="line">        //获取p标签</span><br><span class="line">        var pid = document.getElementById(&quot;pid&quot;);     //   依据id获取</span><br><span class="line"></span><br><span class="line">        //获取p标签中的内容</span><br><span class="line">        // alert(pid.innerHTML);</span><br><span class="line"></span><br><span class="line">        pid.innerHTML = &quot;静相思&quot;; 	//修改标签中的内容</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 1、拿到要获取内容的标签</span><br><span class="line">         * 2、跟获取的标签，再【获取内容】对象名.innerHTML    【修改内容】对象名.innerHTML = &quot;修改内容&quot;</span><br><span class="line">         */</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;p id=&quot;pid&quot;&gt;唐诗三百首&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 绑定单击事件（一个动作） --&gt;</span><br><span class="line">&lt;button onclick=&quot;demo()&quot;&gt;修改内容&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="14、String"><a href="#14、String" class="headerlink" title="14、String"></a>14、String</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> s1 = <span class="string">&quot;双引号字符串&quot;</span>;       <span class="comment">//双引号</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">let</span> s2 = <span class="string">&#x27;单引号字符串&#x27;</span>;     <span class="comment">//单引号 </span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">let</span> s3 = <span class="string">`反引号字符串`</span>;  <span class="comment">// 反引号字符又叫做`字符串模板` ,模板中可以使用$&#123;&#125;来进行插值.</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">3547</span>;	</span><br><span class="line">    <span class="keyword">let</span> s5 =<span class="string">`你的验证码是：<span class="subst">$&#123;n&#125;</span>`</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s5);<span class="comment">//你的验证码是：3547</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202308310854736.png"
                      alt="image-20230831085445614" style="zoom:50%;" 
                >			

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">let</span> a = <span class="string">&quot;我爱这个世界&quot;</span>;</span><br><span class="line">	<span class="variable language_">document</span>.<span class="title function_">write</span>(a.<span class="title function_">substring</span>(<span class="number">2</span>, <span class="number">6</span>));</span><br><span class="line">	<span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>)</span><br><span class="line">	<span class="keyword">let</span> b = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">	<span class="variable language_">document</span>.<span class="title function_">write</span>(b.<span class="title function_">toLocaleUpperCase</span>());<span class="comment">//把字符串转换为大写</span></span><br><span class="line">	<span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>)</span><br><span class="line">	<span class="keyword">let</span> c=<span class="string">&quot;ABCDEFG&quot;</span>;</span><br><span class="line">	<span class="variable language_">document</span>.<span class="title function_">write</span>(c.<span class="title function_">toLocaleLowerCase</span>());<span class="comment">//把字符串转换为小写</span></span><br><span class="line">	<span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>)</span><br><span class="line">	<span class="keyword">let</span> e=<span class="string">&quot;awejjj&quot;</span>;</span><br><span class="line">	<span class="variable language_">document</span>.<span class="title function_">write</span>(e.<span class="title function_">charAt</span>(<span class="number">2</span>));<span class="comment">//从0开始 //e</span></span><br><span class="line">	<span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>)</span><br><span class="line">	<span class="keyword">let</span> f=<span class="string">&quot;  wii i  &quot;</span>;</span><br><span class="line">	<span class="variable language_">document</span>.<span class="title function_">write</span>(f.<span class="title function_">trim</span>());<span class="comment">//wii i  //只清除两边的空白  单词中间空格不清除</span></span><br><span class="line">	<span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>)</span><br><span class="line">	<span class="keyword">let</span> o=<span class="string">&quot;d,w,a,d,w&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">info</span>(o.<span class="title function_">split</span>(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="15、数组Array"><a href="#15、数组Array" class="headerlink" title="15、数组Array"></a>15、数组Array</h3><p>JS中数组长度可变，数据类型可变</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">创建：</span><br><span class="line">方法一：</span><br><span class="line">		    <span class="keyword">let</span> 数组名 = [元素<span class="number">1</span>,元素<span class="number">2</span>,元素<span class="number">3.</span>....]; <span class="comment">//  元素数据类型任意</span></span><br><span class="line">方法二：</span><br><span class="line">			<span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">11</span>,<span class="number">22</span>,<span class="string">&quot;hello&quot;</span>,<span class="string">&#x27;88&#x27;</span>,<span class="literal">true</span>);</span><br><span class="line">方法三：</span><br><span class="line">			<span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line">基本遍历：</span><br><span class="line">			<span class="comment">//遍历一</span></span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; arr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">				<span class="variable language_">document</span>.<span class="title function_">write</span>(arr[i]);</span><br><span class="line">				<span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//遍历二</span></span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">let</span> a <span class="keyword">in</span> arr)&#123;      <span class="comment">//   for  in遍历的是下标</span></span><br><span class="line">				<span class="variable language_">document</span>.<span class="title function_">write</span>(arr[a]+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>常用方法：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202308310903911.png"
                      alt="image-20230831090306863" style="zoom: 67%;" 
                >

<ul>
<li><p>push 动态向数组的尾部添加一个单元</p>
</li>
<li><p>unshit 动态向数组头部添加一个单元</p>
</li>
<li><p>pop 删除最后一个单元</p>
</li>
<li><p>shift 删除第一个单元</p>
</li>
<li><p>splice ( x , y )动态删除任意单元,即从 x 下标开始向后删除 y 个元素</p>
</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">获取长度  arr_name.<span class="property">length</span>   ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newArray = arr1.<span class="title function_">concat</span>(arr2);  <span class="comment">// 链接 arr1 和arr2</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">let</span> len = arr2.<span class="title function_">push</span>(<span class="string">&quot;新元素&quot;</span>);    <span class="comment">// push: 添加一个新的元素</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// join：按照一定的格式拼接字符串</span></span><br><span class="line">    <span class="keyword">let</span> strArray = arr2.<span class="title function_">join</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(strArray);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="16、内置对象之Math"><a href="#16、内置对象之Math" class="headerlink" title="16、内置对象之Math"></a>16、内置对象之Math</h3><p> <code>console.log</code>，<code>console</code>其实就是 JavaScript 中内置的对象，该对象中存在一个方法叫 <code>log</code>，然后调用 <code>log</code> 这个方法，即 <code>console.log()</code>。</p>
<p>除了 <code>console</code> 对象外，JavaScritp 还有其它的内置的对象，如Math</p>
<p>Math对象不用创建，直接使用。 Math.方法名();</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">round(x)</td>
<td align="left">把数四舍五入为最接近的整数。</td>
</tr>
<tr>
<td align="left">floor(x)</td>
<td align="left">向下取整</td>
</tr>
<tr>
<td align="left">ceil(x)</td>
<td align="left">向上取整</td>
</tr>
<tr>
<td align="left">random()</td>
<td align="left">随机数，返回 0 ~ 1 之间的随机数。 含0不含1</td>
</tr>
</tbody></table>
<h3 id="17、全局函数"><a href="#17、全局函数" class="headerlink" title="17、全局函数"></a>17、全局函数</h3><p>全局函数不需要对象直接可以调用  ：  方法名（）；</p>
<h4 id="1、常用全局函数"><a href="#1、常用全局函数" class="headerlink" title="1、常用全局函数"></a>1、常用全局函数</h4><table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">parseInt()</td>
<td align="left">将字符串解析成一个整数。</td>
</tr>
<tr>
<td align="left">parseFloat()</td>
<td align="left">将字符串解析成一个浮点数。</td>
</tr>
<tr>
<td align="left">isNaN()</td>
<td align="left">判断是否是一个NaN类型的数据</td>
</tr>
</tbody></table>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&quot;123.456&quot;</span>));<span class="comment">//123</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&quot;12abc3.456&quot;</span>));<span class="comment">//12</span></span><br><span class="line"> </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(<span class="string">&quot;123.456&quot;</span>));<span class="comment">//123.456</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(<span class="string">&quot;123.45abc6&quot;</span>));<span class="comment">//123.45</span></span><br><span class="line"> </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&quot;abc123&quot;</span>));<span class="comment">//NaN : not a number 不是一个数字</span></span><br><span class="line">	</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="string">&quot;abc123&quot;</span>));<span class="comment">//true</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<h4 id="2、全局函数之prompt函数"><a href="#2、全局函数之prompt函数" class="headerlink" title="2、全局函数之prompt函数"></a>2、全局函数之prompt函数</h4><p>prompt（）<strong>显示一个可用于用户输入的对话框，返回用户所输入的字符串</strong></p>
<p><code>prompt(msg,defaultText)   //对话框上方是  msg ,框内是 defaultText </code></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="title function_">prompt</span>(<span class="string">&quot;请输入你的名字&quot;</span>,<span class="string">&quot;李明&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202308311713548.png"
                      alt="image-20230831171340431" style="zoom:33%;" 
                >

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">eg：</span><br><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>实验案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&quot;JavaScript&quot;</span>&gt;</span><span class="language-javascript">       <span class="comment">//    这里有一个很有意思的地方，script写在body中</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">mytry</span>(<span class="params"></span>) &#123;       					<span class="comment">//  定义一个函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> name = <span class="title function_">prompt</span>(<span class="string">&quot;请输入你的名字&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        x = <span class="string">&quot;hello! &quot;</span> + name + <span class="string">&quot; ,很高兴认识你&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = x;     <span class="comment">//  用于在页面中 显示我们的内容</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">mytry</span>();  											<span class="comment">//   定义一个函数后还不够，我们还需要进行调用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br></pre></td></tr></table></figure></div>

<p>若想要将 prompt 函数返回串转化为 number ， 可用以下快捷操作</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x= +<span class="title function_">prompt</span>(<span class="string">&quot;你好&quot;</span>)；   <span class="comment">//  即直接在函数面前加上  +  </span></span><br></pre></td></tr></table></figure></div>

<h3 id="18、对象"><a href="#18、对象" class="headerlink" title="18、对象"></a>18、对象</h3><h4 id="1、声明："><a href="#1、声明：" class="headerlink" title="1、声明："></a>1、声明：</h4><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>, <span class="comment">// 描述人的姓名</span></span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>, <span class="comment">// 描述人的年龄</span></span><br><span class="line">    <span class="attr">stature</span>: <span class="number">185</span>, <span class="comment">// 描述人的身高</span></span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>, <span class="comment">// 描述人的性别</span></span><br><span class="line">&#125;;</span><br><span class="line">声明了一个person，其中的属性用逗号隔开，最后在 &#123;&#125; 加上分号</span><br></pre></td></tr></table></figure></div>

<h4 id="2、属性访问："><a href="#2、属性访问：" class="headerlink" title="2、属性访问："></a>2、属性访问：</h4><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">person.<span class="property">name</span>  			方法一</span><br><span class="line">person[<span class="string">&quot;gender&quot;</span>]  		方法二</span><br></pre></td></tr></table></figure></div>

<p><strong>需要注意的是，JS支持动态的为对象添加属性成员</strong></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> stu =  &#123;&#125;； <span class="comment">//声明了一个空对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态的添加 </span></span><br><span class="line">stu.<span class="property">gender</span> =<span class="string">&quot;male&quot;</span>;   <span class="comment">//法一</span></span><br><span class="line">stu[<span class="string">&#x27;name&#x27;</span>] =<span class="string">&quot;lisa&quot;</span>;    <span class="comment">//法二</span></span><br></pre></td></tr></table></figure></div>

<h4 id="3、方法及调用"><a href="#3、方法及调用" class="headerlink" title="3、方法及调用"></a>3、方法及调用</h4><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">方法名 ：<span class="keyword">function</span>（）&#123;  ...   &#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">eg：</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;小红&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  </span><br><span class="line">      <span class="attr">singing</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;            <span class="comment">// 方法是由方法名和函数两部分构成，它们之间使用 : 分隔</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;两只老虎，两只老虎，跑的快，跑的快...&#x27;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">run</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我跑的非常快...&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>调用有两种方法：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">person.<span class="property">singing</span> () ;</span><br><span class="line"></span><br><span class="line"> person[<span class="string">&#x27;run&#x27;</span>] () ;  <span class="comment">//  注意这里的括号放在外面</span></span><br></pre></td></tr></table></figure></div>

<p>动态添加方法</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">语法：   对象名.方法名 = <span class="keyword">function</span>（）&#123;  ...  &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 动态添加方法</span></span><br><span class="line">   user.<span class="property">move</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;移动一点距离...&#x27;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure></div>

<h3 id="19、null"><a href="#19、null" class="headerlink" title="19、null"></a>19、null</h3><p>null 也是 JavaScript 中数据类型的一种，通常只用它来表示不存在的对象。使用 typeof 检测类型它的类型时，结果为 <code>object</code>。</p>
<p>布尔运算时，为false 	。</p>
]]></content>
  </entry>
  <entry>
    <title>初识JSP</title>
    <url>/2023/09/04/%E5%88%9D%E8%AF%86JSP/</url>
    <content><![CDATA[<h2 id="初识JSP"><a href="#初识JSP" class="headerlink" title="初识JSP"></a>初识JSP</h2><p>JSP是简化Servlet编写的一种技术，它将Java代码和HTML语句混合在同一个文件中编写，只对网页中要动态产生的内容采用Java代码来编写。而对固定不变的静态内容采用普通静态HTML页面方式编写。</p>
<p>相比于 HTML 的静态页面，jsp其优点在于可以在页面中嵌套Java代码，可动态的显示页面数据。</p>
<p>相比于 Servlet 的难以对数据进行排版，jsp 可实现较为容易得排版、显示数据。</p>
<h3 id="1、注释"><a href="#1、注释" class="headerlink" title="1、注释"></a>1、注释</h3><p>显示注释 ：  （可以在客户端查看的注释)</p>
<div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">即从HTML风格继承而来</span><br><span class="line">&lt;!--  注释内容 --&gt; </span><br></pre></td></tr></table></figure></div>

<p>隐式注释 ：</p>
<div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">Java风格  的单行注释：  <span class="comment">//  ....    或者是  /*   ...   */</span></span><br><span class="line">jsp风格  注释  ：  &lt;%-- JSP注释 --%&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="2、Scriptlet"><a href="#2、Scriptlet" class="headerlink" title="2、Scriptlet"></a>2、Scriptlet</h3><p>即嵌套在 HTML 中的 Java 程序，一下提供三种方式，但是三种都必须使用 <code>&lt; Scriptlet &gt;</code>标记出来</p>
<div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">第一种 ：&lt;%    %&gt; : Java 脚本段，可以定义局部变量，编写语句</span><br><span class="line">&lt;% 这其中编写Java代码 ，声明局部变量 ，只在该标签中可以使用   %&gt;</span><br><span class="line"></span><br><span class="line">第二种 ：&lt;%!    %&gt; : 声明，可以定义全局变量，方法 和 类。</span><br><span class="line">在此声明的变量，可以再整个页面的任何位置进行引用</span><br><span class="line"></span><br><span class="line">第三种 ： &lt;%=  %&gt; : 表达式 ，数据一个变量或者具体内容 </span><br><span class="line">注意，该标签中的可以是全局变量，也可以是局部变量</span><br></pre></td></tr></table></figure></div>

<h3 id="3、指令标签"><a href="#3、指令标签" class="headerlink" title="3、指令标签"></a>3、指令标签</h3><p>使用包含操作，可以将一些重复的代码包含进来继续使用</p>
<h4 id="1、include静态包含"><a href="#1、include静态包含" class="headerlink" title="1、include静态包含"></a>1、include静态包含</h4><div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ include file=<span class="string">&quot;要包含的文件路径 &quot;</span>  %&gt;     &lt;!-- 注意这里的是相对路径--&gt;</span><br><span class="line">eg:</span><br><span class="line">    &lt;%@ <span class="type">include</span> <span class="variable">file</span> <span class="operator">=</span><span class="string">&quot; include.html &quot;</span> %&gt; ;</span><br></pre></td></tr></table></figure></div>

<p>下面是一个小的实例：</p>
<div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;head.jsp&quot;</span>%&gt;        <span class="comment">//include</span></span><br><span class="line">&lt;h2&gt; hello world&lt;/h2&gt;</span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;footer.jsp&quot;</span> %&gt;    <span class="comment">//  include</span></span><br></pre></td></tr></table></figure></div>

<p><strong>静态包含是将内容进行了直接的替换，在Servlet进行引擎转译时，就把此文件包含进去，只生成一个Servlet，因此包含文件和被包含文件是不可以进有同名的变量的</strong></p>
<h4 id="2、include动态包含"><a href="#2、include动态包含" class="headerlink" title="2、include动态包含"></a>2、include动态包含</h4><p>动态包含在代码编译的时候，包含和背包含的部分是独立的，在运行的时候才会将被包含的部分接入，类似于方法的调用,会出现多个源码文件<strong>可以出现同名变量</strong></p>
<div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;jsp:include page=<span class="string">&quot;被包含的页面的绝对路径&quot;</span>&gt;&lt;/jsp:incldue&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">动态包含参数</span><br><span class="line">&lt;jsp:include page=<span class="string">&quot;被包含的页面的绝对路径&quot;</span>&gt;</span><br><span class="line">    &lt;jsp:param	name=<span class="string">&quot;&quot;</span> value=<span class="string">&quot;&quot;</span>&gt;&lt;/jsp:param&gt;    <span class="comment">//  注意这里我们的name不支持表达式，value支持&lt;%=  ...  %&gt;</span></span><br><span class="line">    &lt;/jsp:incldue&gt;</span><br><span class="line"></span><br><span class="line">同时，在包含页面中，我们利用&lt;%= ...  =&gt; 进行动态的赋值，</span><br><span class="line">    在被包含页面中，利用request.getParameter（name) 对指定的name 进行获取数值</span><br><span class="line">    </span><br><span class="line">    例子如下：</span><br><span class="line">    -==========================包含页面内容：========================</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">&quot;head.jsp&quot;</span>&gt;&lt;/jsp:include&gt;</span><br><span class="line">&lt;%</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello &quot;</span>;</span><br><span class="line">    out.println(str);</span><br><span class="line">    out.print(str);</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line">&lt;%=str + str%&gt;</span><br><span class="line">&lt;h2&gt; hello world&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;jsp:include page=<span class="string">&quot;footer.jsp&quot;</span>&gt;&lt;/jsp:include&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">&quot;footer.jsp&quot;</span>&gt;</span><br><span class="line">    &lt;jsp:param name=<span class="string">&quot;uname&quot;</span> value=<span class="string">&quot;&lt;%=str%&gt;&quot;</span>/&gt;</span><br><span class="line">&lt;/jsp:include&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		-=======================被包含页面 ( footer.jsp )=======================</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;我是底部&lt;/h2&gt;</span><br><span class="line">&lt;%</span><br><span class="line">System.out.print(request.getParameter(<span class="string">&quot;uname&quot;</span>));    </span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;s</span><br></pre></td></tr></table></figure></div>

<p>Ps :  更为灵活的，page后的地址内容也可以使用表达式。</p>
<h3 id="4、使用include遇到的乱码问题"><a href="#4、使用include遇到的乱码问题" class="headerlink" title="4、使用include遇到的乱码问题"></a>4、使用include遇到的乱码问题</h3><div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;head.jsp&quot;</span>%&gt;        </span><br><span class="line">&lt;%</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello &quot;</span>;</span><br><span class="line">    out.println(str);</span><br><span class="line">    out.print(str);</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line">&lt;%=str + str%&gt;</span><br><span class="line">&lt;h2&gt; hello world&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;footer.jsp&quot;</span> %&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309021007930.png"
                      alt="image-20230902100749843" style="zoom: 50%;" 
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309021009735.png"
                      alt="image-20230902100907706" style="zoom:50%;" 
                ></p>
<p>在这里是两个极为简单的测试jsp页面，head 和 foot ，在按照上述代码进行include 时，出现一下情况 </p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309021011290.png"
                      alt="image-20230902101103262" style="zoom:50%;" 
                >

<p>但是非常奇怪的是，三个 jsp 页面，都已设置编码为  utf-8 ，这让我确实有些摸不着头脑，经网上逛圈发现，实际上我们客户端访问jsp文件要经过三个阶段：</p>
<blockquote>
<p>1、第一次访问，web容器（常用的有Tomcat等）将jsp编译为java文件，该阶段编译器会根据pageEncoding设置的编码进行读取jsp文件，翻译成统一的 utf-8 的Servlet类。</p>
</blockquote>
<blockquote>
<p>2、之后由javac将我们的java源码编译成class字节码，javac用utf-8编码读取java源码，编译成utf-8编码的二进制文件</p>
</blockquote>
<blockquote>
<p>3、web容器载入class字节码文件，将内容输出结果到客户端，这一过程的编码为contentType设置的编码</p>
</blockquote>
<p><strong>因此，我们这里就是第一步，pageEncoding未设置</strong>，只需要在每一个jsp文件前加一句</p>
<p><code>&lt;%@page pageEncoding=&quot;UTF-8&quot;%&gt;</code>之后重启服务器即可。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309021025196.png"
                      alt="image-20230902102525165" style="zoom:50%;" 
                >

<h3 id="5、四大域对象"><a href="#5、四大域对象" class="headerlink" title="5、四大域对象"></a>5、四大域对象</h3><p>JSP中使用了四种属性的保存范围，所谓的四种属性的范围，指的是一个设置的对象，可以在多个页面中保存使用。</p>
<h4 id="1、page"><a href="#1、page" class="headerlink" title="1、page"></a>1、page</h4><p>pageContext：只在一个页面中保存属性，服务端跳转页面后无效。</p>
<h4 id="2、request"><a href="#2、request" class="headerlink" title="2、request"></a>2、request</h4><p>request：只在一次请求中保存，服务器跳转后依然有效，注意是只可以一次请求，客户端跳转无效。</p>
<h4 id="3、session"><a href="#3、session" class="headerlink" title="3、session"></a>3、session</h4><p>session：在一次会话范围中，无论何种跳转都可以使用。但是重新开启一个浏览器后，无法取到之前设置的session了。对于服务器而言，每一个连接到他的客户端都是一个session，若想要属性设置一次后，使用新的浏览器打开后都可以取得，则要使用 application 。</p>
<h4 id="4、application"><a href="#4、application" class="headerlink" title="4、application"></a>4、application</h4><p>application：在整个服务器上保存，每一个用户（ session ）都可以直接访问取得，但是服务器关闭后，所有的属性都消失，需要重新设置</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309021809159.png"
                      alt="Screenshot_2023_0902_180843"
                ></p>
<h3 id="6、服务端跳转和客户端跳转-（参考原文）"><a href="#6、服务端跳转和客户端跳转-（参考原文）" class="headerlink" title="6、服务端跳转和客户端跳转  （参考原文）"></a>6、服务端跳转和客户端跳转  <a class="link"   href="https://blog.csdn.net/qq_34802416/article/details/80232780" >（参考原文） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p><code>服务器跳转（内部跳转）</code>: 客户端发送一次请求，请求当前资源，该资源在服务器内部跳转到另一个资源，再向客户端发送一个响应（客户端只响应一次）</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309030809689.png"
                      alt="image-20230903080931580" style="zoom:67%;" 
                >



<p><code>客户端跳转（外部跳转）</code>：当客户端发送一个请求，请求当前资源，该资源向客户端发送一个请求去其他地址的回应，客户端再根据这个地址去进行下一次请求（即会发生多次请求)。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309030812678.png"
                      alt="image-20230903081228625" style="zoom:50%;" 
                >



<ul>
<li><p>服务器端跳转时，<strong>未超出request的属性范围</strong>，<strong>request属性能够保存到跳转页</strong>；客户端跳转时，则超出了request的属性范围，无法进行其属性的传递。</p>
</li>
<li><p>服务器端跳转时，JSP执行到跳转语句时会<strong>立刻进行跳转</strong>，不再执行之后的代码；客户端跳转时，则会在<strong>整个页面的代码执行完后，才执行跳转</strong>。所以在执行服务器端跳转时，一定要在跳转语句之前释放掉临界资源（如数据库连接，I\O流操作等）</p>
</li>
</ul>
<h3 id="7、JSP中的跳转语句"><a href="#7、JSP中的跳转语句" class="headerlink" title="7、JSP中的跳转语句"></a>7、JSP中的跳转语句</h3><h4 id="服务器跳转"><a href="#服务器跳转" class="headerlink" title="服务器跳转"></a>服务器跳转</h4><div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;jsp:forward page=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">pageContext.forward();</span><br><span class="line">request.getRequestDispatcher(url).forward(request, response);</span><br><span class="line">服务器端跳转“/”代表站点根路径</span><br></pre></td></tr></table></figure></div>

<h4 id="客户端跳转"><a href="#客户端跳转" class="headerlink" title="客户端跳转"></a>客户端跳转</h4><div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;&quot;</span>&gt;\&lt;/a&gt;</span><br><span class="line">&lt;mate http-equiv=<span class="string">&quot;refresh&quot;</span>, content=<span class="string">&quot;sec;url&quot;</span>/&gt;</span><br><span class="line">表单提交</span><br><span class="line">response.senRedirect(url)</span><br><span class="line">response.setHeader(“refresh”, “sec;url”)</span><br><span class="line">客户端跳转“/”代表服务器跟路径webapps</span><br></pre></td></tr></table></figure></div>



<h3 id="8、四大域范围跳转测试实例"><a href="#8、四大域范围跳转测试实例" class="headerlink" title="8、四大域范围跳转测试实例"></a>8、四大域范围跳转测试实例</h3><h4 id="1、服务端跳转："><a href="#1、服务端跳转：" class="headerlink" title="1、服务端跳转："></a>1、服务端跳转：</h4><div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">初始页面内容：</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;% </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//以四个范围域，设置属性</span></span><br><span class="line">    pageContext.setAttribute(<span class="string">&quot;msg1&quot;</span>, <span class="string">&quot;page&quot;</span>);      </span><br><span class="line">    request.setAttribute(<span class="string">&quot;msg2&quot;</span>, <span class="string">&quot;request&quot;</span>);</span><br><span class="line">    session.setAttribute(<span class="string">&quot;msg3e&quot;</span>, <span class="string">&quot;session&quot;</span>);</span><br><span class="line">    application.setAttribute(<span class="string">&quot;msg4&quot;</span>, <span class="string">&quot;application&quot;</span>);</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line">&lt;jsp:forward page=<span class="string">&quot;getmsg.jsp&quot;</span>&gt;&lt;/jsp:forward&gt;     <span class="comment">//  服务器条跳转</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    =======================跳转页面内容=====================</span><br><span class="line">    </span><br><span class="line">    &lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    out.print(<span class="string">&quot;page范围&quot;</span> + pageContext.getAttribute(<span class="string">&quot;msg1&quot;</span>)+(<span class="string">&quot;&lt;br&gt;&quot;</span>));</span><br><span class="line">    out.print(<span class="string">&quot;request范围&quot;</span> + request.getAttribute(<span class="string">&quot;msg2&quot;</span>)+(<span class="string">&quot;&lt;br&gt;&quot;</span>));</span><br><span class="line">    out.print(<span class="string">&quot;session范围&quot;</span> + session.getAttribute(<span class="string">&quot;msg3&quot;</span>)+(<span class="string">&quot;&lt;br&gt;&quot;</span>));</span><br><span class="line">    out.print(<span class="string">&quot;application范围&quot;</span> + application.getAttribute(<span class="string">&quot;msg4&quot;</span>)+(<span class="string">&quot;&lt;br&gt;&quot;</span>));</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//   即跳转页面的内容是获取四个属性，并输出在我们的页面上</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309030838665.png"
                      alt="image-20230903083845624"
                ></p>
<h4 id="2、客户端跳转"><a href="#2、客户端跳转" class="headerlink" title="2、客户端跳转"></a>2、客户端跳转</h4><div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">===========================初始页面==================</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    pageContext.setAttribute(<span class="string">&quot;msg1&quot;</span>, <span class="string">&quot;page&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;msg2&quot;</span>, <span class="string">&quot;request&quot;</span>);</span><br><span class="line">    session.setAttribute(<span class="string">&quot;msg3&quot;</span>, <span class="string">&quot;session&quot;</span>);</span><br><span class="line">    application.setAttribute(<span class="string">&quot;msg4&quot;</span>, <span class="string">&quot;application&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line">&lt;%--&lt;jsp:forward page=<span class="string">&quot;getmsg.jsp&quot;</span>&gt;&lt;/jsp:forward&gt;--%&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;getmsg.jsp&quot;</span>&gt;客户端跳转&lt;/a&gt;       <span class="comment">//即我们这里使用HTML的标签进行客户端跳转</span></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">=====================跳转页面=====================</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    out.print(<span class="string">&quot;page范围&quot;</span> + pageContext.getAttribute(<span class="string">&quot;msg1&quot;</span>)+(<span class="string">&quot;&lt;br&gt;&quot;</span>));</span><br><span class="line">    out.print(<span class="string">&quot;request范围&quot;</span> + request.getAttribute(<span class="string">&quot;msg2&quot;</span>)+(<span class="string">&quot;&lt;br&gt;&quot;</span>));</span><br><span class="line">    out.print(<span class="string">&quot;session范围&quot;</span> + session.getAttribute(<span class="string">&quot;msg3&quot;</span>)+(<span class="string">&quot;&lt;br&gt;&quot;</span>));</span><br><span class="line">    out.print(<span class="string">&quot;application范围&quot;</span> + application.getAttribute(<span class="string">&quot;msg4&quot;</span>)+(<span class="string">&quot;&lt;br&gt;&quot;</span>));</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309030842515.png"
                      alt="image-20230903084206462"
                ></p>
<h3 id="7、简易用户登录"><a href="#7、简易用户登录" class="headerlink" title="7、简易用户登录"></a>7、简易用户登录</h3><p>此处涉及三部分：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309031103101.png"
                      alt="image-20230903110355037"
                ></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309031104522.png"
                      alt="image-20230903110432456" style="zoom:50%;" 
                >

<h4 id="1、login-jsp部分"><a href="#1、login-jsp部分" class="headerlink" title="1、login.jsp部分"></a>1、login.jsp部分</h4><div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: H</span><br><span class="line"> </span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;login&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">&quot;loginServlet&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    </span><br><span class="line">    name:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;uname&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    pwd:&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;upwd&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;button type=<span class="string">&quot;submit&quot;</span>&gt;LOGIN&lt;/button&gt;</span><br><span class="line">    &lt;span style=<span class="string">&quot;color:red ;font-size:12px&quot;</span>&gt; &lt;%=request.getAttribute(<span class="string">&quot;msg&quot;</span>)%&gt; &lt;/span&gt;</span><br><span class="line">    &lt;%--    <span class="comment">//获取登录反馈--%&gt;</span></span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">这里设置了一个表单form ，该页面都比较常规，是一个普通的HTML 页面，但是有一点值得注意：</span><br><span class="line">span中的表达式   request.getAtrribute(<span class="string">&quot;msg&quot;</span>)  ,在页面中显示  msg</span><br></pre></td></tr></table></figure></div>

<h4 id="2、Welcome-jsp部分"><a href="#2、Welcome-jsp部分" class="headerlink" title="2、Welcome.jsp部分"></a>2、Welcome.jsp部分</h4><div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: H</span><br><span class="line"> </span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;success！&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;欢迎登录成功！&lt;/h1&gt;</span><br><span class="line">&lt;h2&gt;</span><br><span class="line">    &lt;%=session.getAttribute(<span class="string">&quot;uname&quot;</span>)%&gt; 你好!&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">此处更为简单，只是一个普通的小测试页面，只是表达式值得一看：</span><br><span class="line">   &lt;%=session.getAttribute(<span class="string">&quot;uname&quot;</span>)%&gt;</span><br><span class="line">session.getAttribute(<span class="string">&quot;uname&quot;</span>) 表示从当前会话中获取名为 <span class="string">&quot;uname&quot;</span> 的属性值</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="3、LoginServlet-java部分"><a href="#3、LoginServlet-java部分" class="headerlink" title="3、LoginServlet.java部分"></a>3、LoginServlet.java部分</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> loginServlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.net.httpserver.HttpsServer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/loginServlet&quot;)</span>     <span class="comment">//这里实际上是对应Login.jsp中Form标签中的 action </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        该方法用于处理HTTP请求，并根据请求类型（GET、POST等）调用适当的方法来处理请求。这个方法是Servlet容器自动调用的，在每个请求到达时被调用。</span></span><br><span class="line"><span class="comment">    该方法接受两个参数，分别是HttpServletRequest和HttpServletResponse。HttpServletRequest对象包含了客户端发起的HTTP请求的信息，比如请求的URL、请求参数等。HttpServletResponse对象用于向客户端发送HTTP响应。</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        在方法签名中声明了两种异常：ServletException和IOException。ServletException是通用的Servlet异常，表示在Servlet处理过程中发生了错误。IOException表示在处理请求或发送响应时发生了I/O错误。这些异常提供了对错误进行适当处理的机制。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">      </span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);     <span class="comment">//为了防止乱码，设置客户端乱码</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//接受客户端传递的参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uname</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;uname&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">upwd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;upwd&quot;</span>);</span><br><span class="line">        <span class="comment">//判断参数是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (uname == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(uname.trim())) &#123;</span><br><span class="line">            <span class="comment">/*  这里首先判断uname不为null  ，再使用 .trim() 方法去除变量 uname 前后的空格，并使用 .equals() 方法将去除前后空格后的 uname 与空字符串 &quot;&quot; 进行比较。*/</span></span><br><span class="line">            <span class="comment">//提示用户信息不可以为空</span></span><br><span class="line">            request.setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;用户名不可以为空！&quot;</span>);</span><br><span class="line">            <span class="comment">//请求跳转到login.jsp</span></span><br><span class="line"></span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;login.jsp&quot;</span>).forward(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (upwd == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(upwd.trim())) &#123;</span><br><span class="line">            <span class="comment">//提示用户信息不可以为空</span></span><br><span class="line">            request.setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;密码不可以为空！&quot;</span>);   <span class="comment">// 设置String类型msg的value</span></span><br><span class="line">            <span class="comment">//请求跳转到login.jsp</span></span><br><span class="line"></span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;login.jsp&quot;</span>).forward(request, response);</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            在 Java Web 应用程序中，当客户端发送请求到服务器时，服务器会将请求交给相应的 Servlet 进行处理。Servlet 可以通过转发（Forward）请求将其传递给其他 Servlet、JSP 页面或者静态资源进行处理，从而实现请求的流转和处理链。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">具体到这行代码，request.getRequestDispatcher(&quot;login.jsp&quot;) 表示获取一个用于转发请求的 RequestDispatcher 对象。该对象接收一个参数，即要转发的目标页面的路径 &quot;login.jsp&quot;。这里的 &quot;login.jsp&quot; 表示项目中的一个 JSP 页面，可以是相对路径或者绝对路径。 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">接下来，.forward(request, response) 方法将请求和响应对象作为参数传递给 RequestDispatcher 的 forward() 方法。这将导致当前 Servlet 将控制权转发给目标页面（这里是 login.jsp），目标页面将负责处理请求，并生成相应的响应。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断账号密码是否正确  uanme=“admin&quot;   upwd=&quot;admin&quot;</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;admin&quot;</span>.equals(uname) || !<span class="string">&quot;admin&quot;</span>.equals(upwd)) &#123;</span><br><span class="line">            request.setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;login.jsp&quot;</span>).forward(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//登录成功   跳转到欢迎页面  设置登录信息到 session 作用域</span></span><br><span class="line">        request.getSession().setAttribute(<span class="string">&quot;uname&quot;</span>,uname);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        request.getSession() 是用于获取当前请求的会话对象，其中 request 是代表客户端发起的HTTP请求的HttpServletRequest对象。通过调用 getSession() 方法，可以获得与当前请求相关联的会话对象。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">setAttribute(&quot;uname&quot;, uname) 是用于给会话对象设置属性的方法。</span></span><br><span class="line"><span class="comment">这样，当用户在后续的请求中使用相同的会话时，就可以通过 request.getSession().getAttribute(&quot;uname&quot;) 来获取之前设置的属性值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        <span class="comment">//跳转到欢迎页面</span></span><br><span class="line">        response.sendRedirect(<span class="string">&quot;Welcome.jsp&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        response.sendRedirect(&quot;Welcome.jsp&quot;) 是用于将用户的请求重定向到另一个页面的方法。其中 response 是代表服务器响应的HttpServletResponse对象。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">此处通过调用 sendRedirect() 方法并指定目标页面的路径，服务器将会向客户端发送一个特殊的响应，告诉客户端需要跳转到指定的页面。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">当客户端接收到这个响应后，它会自动向浏览器发送一个新的请求，请求目标为所指定的页面。这样就实现了将用户的请求从当前页面重定向到目标页面的效果。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">需要注意的是，重定向会导致浏览器地址栏的URL发生改变，因为客户端会发起新的请求。而且，重定向是一种跳转方式，它不会保留原页面的任何状态信息。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="8、EL表达式"><a href="#8、EL表达式" class="headerlink" title="8、EL表达式"></a>8、EL表达式</h3><h4 id="1、概念及语法"><a href="#1、概念及语法" class="headerlink" title="1、概念及语法"></a>1、概念及语法</h4><p>EL表达式其目的是为了使得JSP更加的简单，提供了JSP中简化表达式的方法，其操作的是域对象中的数据，操作不了局部变量。</p>
<p>注意域对象是指：<code>pageContext，request，session，application</code></p>
<p>当需要指定的从某个特定的域对象中查找数据时，可以使用四个域对象对应的空间对象：<code>pageScope ，requestScope, sessionScope , applicationScope .</code></p>
<div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">语法：$&#123; expression &#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>EL表达式的默认值是空字符串，而不是NULL</strong></li>
<li><strong>对于同名的域对象变量，默认从小到大的范围去寻找</strong>**</li>
</ul>
<h4 id="2、查找指定范围的域对象"><a href="#2、查找指定范围的域对象" class="headerlink" title="2、查找指定范围的域对象"></a>2、查找指定范围的域对象</h4><div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">$&#123; pageScope . uname &#125; </span><br><span class="line"> pageScope ，requestScope, sessionScope , applicationScope .</span><br></pre></td></tr></table></figure></div>

<h4 id="3、EL表达式操作数据"><a href="#3、EL表达式操作数据" class="headerlink" title="3、EL表达式操作数据"></a>3、EL表达式操作数据</h4><h5 id="操作List"><a href="#操作List" class="headerlink" title="操作List"></a>操作List</h5><div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line">							==================定义List================</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">			List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">			<span class="comment">//List&lt;String&gt; list=new ArrayList&lt;&gt;()</span></span><br><span class="line">			list.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">			list.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">			list.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">			request.setAttribute(<span class="string">&quot;list&quot;</span>, list);      <span class="comment">// 此处前者是设置了name ，后者是为list域对象赋值</span></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%--</span><br><span class="line">			获取List中指定下标的数据</span><br><span class="line">			$&#123;list[下标] &#125;</span><br><span class="line">			获取集合的长度</span><br><span class="line">			$&#123;list.size()&#125;</span><br><span class="line">注：</span><br><span class="line">list代表的是存在域对象中的变量名（限域变量名）</span><br><span class="line">--%&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h5 id="操作Map"><a href="#操作Map" class="headerlink" title="操作Map"></a>操作Map</h5><div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">			<span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">			map.put(<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;111&quot;</span>) ;     <span class="comment">//   注意这里不同于List的add，而是put</span></span><br><span class="line">			map.put(<span class="string">&quot;bbb&quot;</span>, <span class="number">2222</span>) ;</span><br><span class="line">			map.put(<span class="string">&quot;ccc-a&quot;</span>, <span class="number">333</span>) ;</span><br><span class="line">			request.setAttribute(<span class="string">&quot;map&quot;</span>, map) ; </span><br><span class="line">%&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">				获取Map中指定值</span><br><span class="line">				$&#123;map[<span class="string">&quot;key&quot;</span>] &#125; 或 $&#123;map.key &#125;</span><br><span class="line">	注：</span><br><span class="line">				map代表的是存在域对象中的变量名（限域变量名）</span><br><span class="line">--%&gt;</span><br><span class="line">				$&#123;map.aaa &#125;</span><br><span class="line">				$&#123;map[<span class="string">&quot;bbb&quot;</span>]&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h5 id="获取JavaBean对象"><a href="#获取JavaBean对象" class="headerlink" title="获取JavaBean对象"></a>获取JavaBean对象</h5><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> String uname;</span><br><span class="line">    <span class="keyword">private</span> String upwd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getUserId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserId</span><span class="params">(Integer userId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUname</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> uname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUname</span><span class="params">(String uname)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.uname = uname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUpwd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> upwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUpwd</span><span class="params">(String upwd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.upwd = upwd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  				<span class="comment">//  前面都是定义了一个简单 的类User  </span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;El.User&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span>  isELIgnored=<span class="string">&quot;false&quot;</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;login&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    User user=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setUserId(<span class="number">1</span>);</span><br><span class="line">    user.setUname(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">    user.setUpwd(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">   application.setAttribute(<span class="string">&quot;user&quot;</span>,user);    <span class="comment">//  定义了一个域对象</span></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%-- JavBean中的属性字段需要提供get方法 --%&gt;</span><br><span class="line">$&#123;user&#125; &lt;%-- 获取对象 --%&gt;</span><br><span class="line">$&#123;user.uname&#125; &lt;%--获取对象中的属性--%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="9、empty"><a href="#9、empty" class="headerlink" title="9、empty"></a>9、empty</h3><div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line"> 判断域对象是否为空。为空，返回<span class="literal">true</span>；不为空返回<span class="literal">false</span>；</span><br><span class="line">$&#123;empty 限域变量名 &#125;</span><br><span class="line"></span><br><span class="line"> 判断对象是否不为空。 </span><br><span class="line">$&#123;!empty 限域变量名 &#125;</span><br><span class="line"></span><br><span class="line">$&#123;empty uname&#125;</span><br><span class="line">$&#123;empty list&#125;</span><br><span class="line">$&#123;empty map&#125;</span><br><span class="line">$&#123;empty user&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="10、EL表达式的运算"><a href="#10、EL表达式的运算" class="headerlink" title="10、EL表达式的运算"></a>10、EL表达式的运算</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">							==================等值比较=======================</span><br><span class="line">&lt;%--</span><br><span class="line"> 比较两个值是否相等，返回<span class="literal">true</span>或<span class="literal">false</span></span><br><span class="line">    == 或 eq </span><br><span class="line"></span><br><span class="line">--%&gt; </span><br><span class="line"></span><br><span class="line">$&#123;a == b &#125;</span><br><span class="line">$&#123;c == d &#125; </span><br><span class="line">$&#123;c eq d &#125; </span><br><span class="line">$&#123;a == <span class="number">5</span> &#125; </span><br><span class="line">$&#123;c == <span class="string">&#x27;aa&#x27;</span> &#125;</span><br><span class="line">   ===================数值运算========================</span><br><span class="line">&lt;%--</span><br><span class="line">加法： +</span><br><span class="line">减法： -</span><br><span class="line">乘法： *</span><br><span class="line">除法： / 或 div</span><br><span class="line">--%&gt;</span><br><span class="line">$&#123;a + b &#125;</span><br><span class="line">$&#123;a / b &#125; 或 $&#123;a div b &#125;</span><br><span class="line"></span><br><span class="line">   ===================大小比较========================</span><br><span class="line">&lt;%--</span><br><span class="line">大于：&gt;</span><br><span class="line">小于：&lt;</span><br><span class="line">大于等于：&gt;=</span><br><span class="line">小于等于：&lt;=</span><br><span class="line">--%&gt;</span><br><span class="line">$&#123;a &gt; b&#125;</span><br><span class="line">$&#123;a + <span class="number">1</span> &gt; <span class="number">10</span> &#125;</span><br><span class="line">$&#123;a + b &gt;= <span class="number">10</span> &#125;</span><br><span class="line">$&#123;a &gt; b &amp;&amp; b &gt; <span class="number">5</span> &#125;</span><br><span class="line">$&#123;a + b &gt; <span class="number">10</span> || a - b &gt; <span class="number">5</span> &#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>注意EL表达式只看内容不看类型类似于xml中的&#x3D;&#x3D; 和&#x3D;&#x3D;&#x3D;的区别，它属于前者</strong>**</p>
<div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">String a=<span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="type">int</span> b=<span class="number">123</span>;</span><br><span class="line">%&gt;</span><br><span class="line">$&#123;a == b &#125;</span><br><span class="line"></span><br><span class="line">这里输出的是True</span><br></pre></td></tr></table></figure></div>





<h2 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h2><h3 id="1、引入"><a href="#1、引入" class="headerlink" title="1、引入"></a>1、引入</h3><p>Java Server Pages Standard Tag Libray(JSTL)：JSP 标准标签库，是一个定制标签类库的集合，用于 解决一些常见的问题。</p>
<p>这里介绍两种常用的标签库：核心标签库、格式化标签库。</p>
<p><strong>核心标签库：包含Web的常见工作，例如循环、表达式赋值，基本输入输出等</strong></p>
<p><strong>格式化标签库：用以格式化数据的工作，例如日期格式化等</strong></p>
<p>JSP页面使用JSTL类库必须以下列格式使用 taglib 指令</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@taglib</span> uri=<span class="string">&quot;&quot;</span> prefix = <span class="string">&quot;&quot;</span> %&gt;</span><br></pre></td></tr></table></figure></div>

<p>在这里还需要引进两个jar包， <a class="link"   href="http://archive.apache.org/dist/jakarta/taglibs/standard/binaries/" >下载地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309041508960.png"
                      alt="image-20230904150825857"
                ></p>
<p>引入：</p>
<div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@taglib</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> prefix=<span class="string">&quot;c&quot;</span>%&gt;</span><br><span class="line">注意这里会有两个core核心库，这里选择jsp下的，前缀 为c  ，后面的标签引用都需要用到前缀</span><br></pre></td></tr></table></figure></div>



<h3 id="2、核心库常见标签"><a href="#2、核心库常见标签" class="headerlink" title="2、核心库常见标签"></a>2、核心库常见标签</h3><h4 id="1、if"><a href="#1、if" class="headerlink" title="1、if"></a>1、if</h4><p>如果该条件运算结果为 true, 则处理它的主体内容，测试结果保存在一 个 Boolean 对象中，并<strong>创建</strong>一个限域变量来引用 Boolean 对象。可以利用<strong>var 属性设置限域变量名</strong>， <strong>利用 scope 属性来指定其作用范围</strong>。</p>
<div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;&lt;boolean&gt;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;&lt;string&gt;&quot;</span> scope=<span class="string">&quot;&lt;string&gt;&quot;</span>&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br></pre></td></tr></table></figure></div>

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309041546428.png"
                      alt="image-20230904154613361" style="zoom:50%;" 
                >

<div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    request.setAttribute(<span class="string">&quot;flag&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;num&quot;</span>, <span class="number">1</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;flag&#125;&quot;</span>&gt;</span><br><span class="line">&lt;p&gt;结果为<span class="literal">true</span></span><br><span class="line">&lt;p&gt;</span><br><span class="line">    &lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">    &lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;num &gt; 0&#125;&quot;</span>&gt;</span><br><span class="line">&lt;p&gt;num的值比<span class="number">0</span>大</span><br><span class="line">&lt;p&gt;</span><br><span class="line">    &lt;/c:<span class="keyword">if</span>&gt;</span><br></pre></td></tr></table></figure></div>

<p><strong>JSTL中没有else标签，为了模拟 else 的情景，需要使用两个 if 标签，并且这两个标签为相反的条件。</strong></p>
<h4 id="2、choose-、when-和-otherwise"><a href="#2、choose-、when-和-otherwise" class="headerlink" title="2、choose 、when 和 otherwise"></a>2、choose 、when 和 otherwise</h4><p>choose  —  when  与 java 中的 Switch — case类似  ，otherwise 对应相应的 default</p>
<div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;&lt;boolean&gt;&quot;</span>&gt; ......    &lt;/c:when&gt;</span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">    &lt;c:when test=<span class="string">&quot;&lt;boolean&gt;&quot;</span>&gt;   ...      &lt;/c:when&gt;</span><br><span class="line">    </span><br><span class="line">...</span><br><span class="line">    &lt;c:otherwise&gt;  ...   &lt;/c:otherwise&gt;</span><br><span class="line">   </span><br><span class="line">&lt;/c:choose&gt;</span><br></pre></td></tr></table></figure></div>

<p><strong>值得注意的是choose、otherwise标签没有属性，when标签只有test属性</strong>，同样的，otherwise可省，若存在必须放在最后一个</p>
<h4 id="3、forEach"><a href="#3、forEach" class="headerlink" title="3、forEach"></a>3、forEach</h4><div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;c:forEach</span><br><span class="line">			items=<span class="string">&quot;&lt;object&gt;&quot;</span></span><br><span class="line">			begin=<span class="string">&quot;&lt;int&gt;&quot;</span></span><br><span class="line">			end=<span class="string">&quot;&lt;int&gt;&quot;</span></span><br><span class="line">			step=<span class="string">&quot;&lt;int&gt;&quot;</span></span><br><span class="line">			<span class="keyword">var</span>=<span class="string">&quot;&lt;string&gt;&quot;</span></span><br><span class="line">			varStatus=<span class="string">&quot;&lt;string&gt;&quot;</span>&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure></div>

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309041601210.png"
                      alt="image-20230904160133151" style="zoom: 50%;" 
                >

<div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;c : forEach begin=<span class="string">&quot;0&quot;</span> end=<span class="string">&quot;10&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;i&quot;</span> &gt;</span><br><span class="line">标题$&#123;i &#125;&lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">forEach遍历Map</span><br><span class="line">&lt;%</span><br><span class="line">  Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,Object&gt;();</span><br><span class="line">  map.put(<span class="string">&quot;map1&quot;</span>, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">  map.put(<span class="string">&quot;map2&quot;</span>, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">  map.put(<span class="string">&quot;map3&quot;</span>, <span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">  pageContext.setAttribute(<span class="string">&quot;map&quot;</span>, map);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;map &#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;mymap&quot;</span>&gt;</span><br><span class="line"> 键：$&#123;mymap.key &#125;-值：$&#123;mymap.value &#125; &lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

]]></content>
  </entry>
  <entry>
    <title>JAVA图形化编程基础</title>
    <url>/2023/09/05/JAVA%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="AWT-编程"><a href="#AWT-编程" class="headerlink" title="AWT 编程"></a>AWT 编程</h1><h2 id="1-1-AWT简介"><a href="#1-1-AWT简介" class="headerlink" title="1.1 AWT简介"></a>1.1 AWT简介</h2><p>​    即”抽象窗口工具集 （Abstract Window Toolkit )”，它为Java应用程序提供了基本的图形组件 。 AWT是窗口框架，它从不同平台的窗口系统中抽取出共同组件 ， 当程序运行时，将这些组件的创建和动作委托给程序所在的运行平台 。  </p>
<h2 id="1-2-AWT继承体系"><a href="#1-2-AWT继承体系" class="headerlink" title="1.2 AWT继承体系"></a>1.2 AWT继承体系</h2><p>所有和 AWT 编程相关的类都放在 java.awt 包以及它的子包中， AWT <em>编程中有两个</em>基类 :<strong>Component 和 MenuComponent。</strong></p>
<ul>
<li>Component：代表一个能以图形化方式显示出来，并可与用户交互的对象，例如 Button 代表一个按钮，TextField 代表 一个文本框等；</li>
<li>MenuComponent：则代表图形界面的菜单组件，包括 MenuBar (菜单条)、 Menultem (菜单项)等子类。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031025423.png"
                      alt="image-20230403102540206"
                ></p>
<p>其中 Container 是一种特殊的 Component，它代表一种<strong>容器</strong>，可以盛装普通的 Component。</p>
<p>AWT中还有一个非常重要的接口叫LayoutManager ，如果一个容器中有多个组件，那么容器就需要使用LayoutManager来管理这些组件的布局方式。</p>
<h3 id="下面使其常用组件-："><a href="#下面使其常用组件-：" class="headerlink" title="下面使其常用组件 ："></a>下面使其常用组件 ：</h3><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031117158.png"
                      alt="image-20230403111750804" style="zoom: 50%;" 
                >



<h2 id="1-3-Container容器"><a href="#1-3-Container容器" class="headerlink" title="1.3 Container容器"></a>1.3 Container容器</h2><h3 id="1-3-1-Container继承体系"><a href="#1-3-1-Container继承体系" class="headerlink" title="1.3.1 Container继承体系"></a>1.3.1 Container继承体系</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031027546.png"
                      alt="image-20230403102700368"
                ></p>
<blockquote>
<ul>
<li>​	Winow是可以独立存在的<strong>顶级窗口</strong>,默认使用BorderLayout管理其内部组件布局;</li>
<li>​        Panel可以容纳其他组件，但不能独立存在，<strong>它必须内嵌其他容器中使用</strong>，默认使用FlowLayout管理其内部组件布局；</li>
<li>​        ScrollPane 是 一个带滚动条的容器，它<strong>也不能独立存在</strong>，默认使用 BorderLayout 管理其内部组件布局；</li>
</ul>
</blockquote>
<h3 id="1-3-2-常见API"><a href="#1-3-2-常见API" class="headerlink" title="1.3.2 常见API"></a>1.3.2 常见API</h3><p><em>API 是用于构建应用程序软件的一组子程序定义，协议和工具。一般来说，这是一套明确定义的各种软件组件之间的通信方法</em></p>
<ul>
<li>Component作为基类，提供了如下常用的方法来设置组件的大小、位置、可见性等。</li>
</ul>
<table>
<thead>
<tr>
<th>方法签名</th>
<th>方法功能</th>
</tr>
</thead>
<tbody><tr>
<td>setLocation(int x, int y)</td>
<td>设置组件的位置。</td>
</tr>
<tr>
<td>setSize(int width, int height)</td>
<td>设置组件的大小。</td>
</tr>
<tr>
<td>setBounds(int x, int y, int width, int height)</td>
<td>同时设置组件的位置、大小。</td>
</tr>
<tr>
<td>setVisible(Boolean b):</td>
<td>设置该组件的可见性。</td>
</tr>
</tbody></table>
<p>+++++</p>
<ul>
<li>Container作为容器根类，提供了如下方法来访问容器中的组件</li>
</ul>
<table>
<thead>
<tr>
<th>方法签名</th>
<th>方法功能</th>
</tr>
</thead>
<tbody><tr>
<td>Component add(Component comp)</td>
<td>向容器中添加其他组件 (该组件既可以是普通组件，也可以 是容器) ， 并返回被添加的组件 。</td>
</tr>
<tr>
<td>Component getComponentAt(int x, int y):</td>
<td>返回指定点的组件 。</td>
</tr>
<tr>
<td>int getComponentCount():</td>
<td>返回该容器内组件的数量 。</td>
</tr>
<tr>
<td>Component[] getComponents():</td>
<td>返回该容器内的所有组件 。</td>
</tr>
</tbody></table>
<h3 id="1-3-3-容器演示"><a href="#1-3-3-容器演示" class="headerlink" title="1.3.3 容器演示"></a>1.3.3 容器演示</h3><h4 id="1-3-3-1-Window"><a href="#1-3-3-1-Window" class="headerlink" title="1.3.3.1 Window"></a>1.3.3.1 Window</h4><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031028089.png"
                      alt="image-20230403102854915" style="zoom:50%;" 
                >

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FrameDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建窗口对象</span></span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这是第一个窗口容器&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置窗口的位置和大小</span></span><br><span class="line"></span><br><span class="line">        frame.setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">500</span>,<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置窗口可见</span></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h4 id="2-3-3-2-Panel"><a href="#2-3-3-2-Panel" class="headerlink" title="2.3.3.2 Panel"></a>2.3.3.2 Panel</h4><p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031029667.png"
                      alt="image-20230403102906495" style="zoom:33%;" 
                >)</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PanelDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建Frame容器对象</span></span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这里在测试Panel&quot;</span>);</span><br><span class="line">        <span class="comment">//2.创建Panel容器对象</span></span><br><span class="line">        <span class="type">Panel</span> <span class="variable">panel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.往Panel容器中添加组件</span></span><br><span class="line">        panel.add(<span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="string">&quot;这是一个测试文本&quot;</span>));    <span class="comment">//  匿名对象</span></span><br><span class="line">        panel.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;这是一个测试按钮&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        panel.setBackground(Color.pink);   <span class="comment">//这里是自己加的</span></span><br><span class="line">        frame.setBackground(Color.green); <span class="comment">//这里是自己加的   ，最终呈现的颜色是 panel 的 pink</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//4.把Panel添加到Frame中</span></span><br><span class="line">        frame.add(panel);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.设置Frame的位置和大小</span></span><br><span class="line">        frame.setBounds(<span class="number">30</span>,<span class="number">30</span>,<span class="number">500</span>,<span class="number">300</span>);     x , y ,w , h</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.设置Frame可见</span></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>由于IDEA默认使用utf-8进行编码，但是当前我们执行代码是是在windows系统上，而windows操作系统的默认编码是gbk，所以会乱码，如果出现了乱码，那么只需要在运行当前代码前，设置一个jvm参数  -Dfile.encoding&#x3D;gbk即可。</p>
<h4 id="2-3-3-3-ScrollPane"><a href="#2-3-3-3-ScrollPane" class="headerlink" title="2.3.3.3 ScrollPane"></a>2.3.3.3 ScrollPane</h4><p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031029699.png"
                      alt="image-20230403102919519" style="zoom: 50%;" 
                ></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScrollPaneDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建Frame窗口对象</span></span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这里测试ScrollPane&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建ScrollPane对象，并且指定默认有滚动条</span></span><br><span class="line">        <span class="type">ScrollPane</span> <span class="variable">scrollPane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScrollPane</span>(ScrollPane.SCROLLBARS_ALWAYS);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.往ScrollPane中添加组件</span></span><br><span class="line">        scrollPane.add(<span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="string">&quot;这是测试文本&quot;</span>));</span><br><span class="line">        scrollPane.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;这是测试按钮&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.把ScrollPane添加到Frame中</span></span><br><span class="line">        frame.add(scrollPane);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.设置Frame的位置及大小</span></span><br><span class="line">        frame.setBounds(<span class="number">30</span>,<span class="number">30</span>,<span class="number">500</span>,<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.设置Frame可见</span></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>程序明明向 ScrollPane 容器中添加了 一个文本框和一个按钮，但只能看到 一个按钮，却看不到文本框 ，这是为什么 呢?这是因为ScrollPane 使用 BorderLayout 布局管理器的缘故，而 BorderLayout 导致了该容器中只有一个组件被显示出来 。 </p>
<h2 id="1-4-LayoutManager布局管理器"><a href="#1-4-LayoutManager布局管理器" class="headerlink" title="1.4 LayoutManager布局管理器"></a>1.4 LayoutManager布局管理器</h2><p>Component中有一个方法 setBounds() 可以设置当前容器的位置和大小，但是我们需要明确一件事，若手动的为组件设置位置和大小的话，就会造成程序的不通用性，例如：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Label</span> <span class="variable">label</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>(<span class="string">&quot;你好，世界&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p>创建了一个lable组件，很多情况下，我们需要让lable组件的宽高和“你好，世界”这个字符串自身的宽高一致，这种大小称为<strong>最佳大小</strong>。由于操作系统存在差异，例如在windows上，我们要达到这样的效果，需要把该Lable组件的宽和高分别设置为100px,20px,但是在Linux操作系统上，可能需要把Lable组件的宽和高分别设置为120px，24px，才能达到同样的效果。</p>
<p>如果要让我么的程序在不同的操作系统下，都有相同的使用体验，那么手动设置组件的位置和大小，无疑是一种灾难，因为有太多的组件，需要分别设置不同操作系统下的大小和位置。为了解决这个问题，Java提供了LayoutManager布局管理器，<strong>可以根据运行平台来自动调整组件大小，</strong>程序员不用再手动设置组件的大小和位置了，只需要为容器选择合适的布局管理器即可。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031121279.png"
                      alt="image-20230403112143090"
                ></p>
<h3 id="1-4-1-FlowLayout-流式布局管理器"><a href="#1-4-1-FlowLayout-流式布局管理器" class="headerlink" title="1.4.1 FlowLayout  流式布局管理器"></a>1.4.1 FlowLayout <code> 流式布局管理器</code></h3><p>​        在 FlowLayout 布局管理器 中，组件像水流一样向某方向流动 (排列) ，遇到障碍(边界)就折回，重头开始排列 。<strong>在默认情况下</strong>， FlowLayout 布局管理器从左向右排列所有组件，遇到边界就会折回下一行重新开始。</p>
<table>
<thead>
<tr>
<th>构造方法</th>
<th>方法功能</th>
</tr>
</thead>
<tbody><tr>
<td>FlowLayout()</td>
<td>使用默认 的对齐方式及默认的水平间距、垂直间距创建 FlowLayout 布局管理器。</td>
</tr>
<tr>
<td>FlowLayout(int align)</td>
<td>使用指定的对齐方式及默认的水平间距、垂直间距创建 FlowLayout 布局管理器。</td>
</tr>
<tr>
<td>FlowLayout(int align,int vgap，int hgap)</td>
<td>使用指定的对齐方式及指定的水平间距、垂直间距创建FlowLayout 布局管理器。</td>
</tr>
</tbody></table>
<p><strong>align参数的取值</strong> : FlowLayout. LEFT 、 FlowLayout. CENTER 、 FlowLayout. RIGHT ，默认是左对齐。</p>
<p><strong>代码演示：</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031502628.png"
                      alt="image-20230403150240438"
                ></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlowLayoutDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建Frame对象</span></span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这里测试FlowLayout&quot;</span>);</span><br><span class="line">        <span class="comment">//2.修改Frame容器的布局管理器为FlowLayout</span></span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>(FlowLayout.LEFT,<span class="number">20</span>,<span class="number">20</span>));   <span class="comment">//先是水平间距，再是垂直间距</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.往Frame中添加100个button</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            frame.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;按钮&quot;</span>+i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.设置Frame为最佳大小    </span></span><br><span class="line">        frame.pack();      <span class="comment">//Frame.pack()这个方法的作用就是根据窗口里面的布局及组件的preferedSize来确定frame的最佳大小。</span></span><br><span class="line">        <span class="comment">//5.设置Frame可见</span></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="1-4-2-BorderLayout-边框布局管理器"><a href="#1-4-2-BorderLayout-边框布局管理器" class="headerlink" title="1.4.2 BorderLayout 边框布局管理器"></a>1.4.2 BorderLayout <code>边框布局管理器</code></h3><p>BorderLayout 将容器分为 EAST 、 SOUTH 、 WEST 、 NORTH 、 CENTER五个区域，普通组件可以被放置在这 5 个区域的任意一个中 。 BorderLayout布局 管理器的布局示意图如图所示 。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031502756.png"
                      alt="image-20230403150251576" style="zoom:40%;" 
                >

<p>当改变使用 BorderLayout 的容器大小时， NORTH 、 SOUTH 和 CENTER区域水平调整，而 EAST 、 WEST 和 CENTER 区域垂直调整。使用BorderLayout 有如下两个注意点:</p>
<ol>
<li>当向使用 BorderLayout 布局管理器的容器中添加组件时 ， 需要指定要添加到哪个区域中 。 如果没有指定添加到哪个区域中，则<strong>默认添加到中间区域中</strong>；</li>
<li>如果向同一个区域中添加多个组件时 ， <strong>后放入的组件会覆盖先放入的组件；</strong></li>
</ol>
<table>
<thead>
<tr>
<th>构造方法</th>
<th>方法功能</th>
</tr>
</thead>
<tbody><tr>
<td>BorderLayout()</td>
<td>使用默认的水平间距、垂直 间距创建 BorderLayout 布局管理器 。</td>
</tr>
<tr>
<td>BorderLayout(int hgap,int vgap):</td>
<td>使用指定的水平间距、垂直间距创建 BorderLayout 布局管理器。</td>
</tr>
</tbody></table>
<p><strong>代码演示1:</strong></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031505408.png"
                      alt="image-20230403150514227" style="zoom:50%;" 
                >

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BorderLayoutDemo1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建Frame对象</span></span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这里测试BorderLayout&quot;</span>);</span><br><span class="line">        <span class="comment">//2.指定Frame对象的布局管理器为BorderLayout</span></span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>(<span class="number">30</span>,<span class="number">5</span>));         <span class="comment">//   设置布局 </span></span><br><span class="line">        <span class="comment">//3.往Frame指定东南西北中各添加一个按钮组件</span></span><br><span class="line">        frame.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;东侧按钮&quot;</span>), BorderLayout.EAST);      <span class="comment">//  规划布局</span></span><br><span class="line">        frame.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;西侧按钮&quot;</span>), BorderLayout.WEST);</span><br><span class="line">        frame.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;南侧按钮&quot;</span>), BorderLayout.SOUTH);</span><br><span class="line">        frame.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;北侧按钮&quot;</span>), BorderLayout.NORTH);   </span><br><span class="line">        frame.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;中间按钮&quot;</span>), BorderLayout.CENTER);</span><br><span class="line">        <span class="comment">//4.设置Frame为最佳大小</span></span><br><span class="line">        frame.pack();</span><br><span class="line">        <span class="comment">//5.设置Frame可见</span></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>如果不往某个区域中放入组件，那么该区域不会空白出来，而是会被其他区域占用</p>
<p><strong>代码演示2:</strong></p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031520737.png"
                      alt="image-20230403152042541" style="zoom:50%;" 
                ></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BorderLayoutDemo2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建Frame对象</span></span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这里测试BorderLayout&quot;</span>);</span><br><span class="line">        <span class="comment">//2.指定Frame对象的布局管理器为BorderLayout</span></span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>(<span class="number">30</span>,<span class="number">5</span>));</span><br><span class="line">        <span class="comment">//3.往Frame指定南，北，放入一个按钮，往中间区域放入一个Panel</span></span><br><span class="line"></span><br><span class="line">        frame.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;南侧按钮&quot;</span>), BorderLayout.SOUTH);</span><br><span class="line">        frame.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;北侧按钮&quot;</span>), BorderLayout.NORTH);</span><br><span class="line"></span><br><span class="line">        <span class="type">Panel</span> <span class="variable">panel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>();</span><br><span class="line">        panel.add(<span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="string">&quot;测试文本&quot;</span>));</span><br><span class="line">        panel.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;中间按钮&quot;</span>));</span><br><span class="line"></span><br><span class="line">        frame.add(panel, BorderLayout.CENTER);</span><br><span class="line">	</span><br><span class="line">        <span class="comment">//4.设置Frame为最佳大小</span></span><br><span class="line">        frame.pack();</span><br><span class="line">        <span class="comment">//5.设置Frame可见</span></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="1-4-3-GridLayout-网格布局管理器"><a href="#1-4-3-GridLayout-网格布局管理器" class="headerlink" title="1.4.3 GridLayout   网格布局管理器"></a>1.4.3 GridLayout   <code>网格布局管理器</code></h3><p>​        GridLayout 布局管理器将容器分割成纵横线分隔的网格 ， <strong>每个网格所占的区域大小相同</strong>。当向使用 GridLayout 布局管理器的容器中添加组件时， <strong>默认从左向右、 从上向下依次添加到每个网格中</strong> 。 与 FlowLayout不同的是，放置在 GridLayout 布局管理器中的各组件的大小由组件所处的区域决定(每 个组件将自动占满整个区域) 。    </p>
<table>
<thead>
<tr>
<th>构造方法</th>
<th>方法功能</th>
</tr>
</thead>
<tbody><tr>
<td>GridLayout(int rows,in t cols)</td>
<td>采用指定的行数、列数，以及默认的横向间距、纵向间距将容器 分割成多个网格</td>
</tr>
<tr>
<td>GridLayout(int rows,int cols,int hgap,int vgap)</td>
<td>采用指定 的行数、列 数 ，以及指定的横向间距 、 纵向间距将容器分割成多个网格。</td>
</tr>
</tbody></table>
<p><strong>案例：</strong></p>
<p>​	使用Frame+Panel，配合FlowLayout和GridLayout完成一个计算器效果。</p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031520583.png"
                      alt="image-20230403152022376" style="zoom: 50%;" 
                ></p>
<p><strong>代码：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GridLayoutDemo</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建Frame对象，并且标题设置为计算器</span></span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;计算器&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建一个Panel对象，并且往Panel中放置一个TextField组件</span></span><br><span class="line">        <span class="type">Panel</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>();</span><br><span class="line">        p1.add(<span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">30</span>));   <span class="comment">//      限制宽度</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.把上述的Panel放入到Frame的北侧区域</span></span><br><span class="line">		frame.setLayout(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>());    <span class="comment">//这一句是可以省的</span></span><br><span class="line">        frame.add(p1,BorderLayout.NORTH);     </span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.创建一个Panel对象，并且设置其布局管理器为GridLayout</span></span><br><span class="line">        <span class="type">Panel</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>();</span><br><span class="line">        p2.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">4</span>));     </span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.往上述Panel中，放置15个按钮，内容依次是：0,1,2,3,4,5,6，7,8,9，+，-，*，/,.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            p2.add(<span class="keyword">new</span> <span class="title class_">Button</span>(i+<span class="string">&quot;&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        p2.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;+&quot;</span>));</span><br><span class="line">        p2.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;-&quot;</span>));</span><br><span class="line">        p2.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;*&quot;</span>));</span><br><span class="line">        p2.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;/&quot;</span>));</span><br><span class="line">        p2.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.把上述Panel添加到Frame的中间区域中国</span></span><br><span class="line">        frame.add(p2);     <span class="comment">//   默认center</span></span><br><span class="line">        <span class="comment">//7.设置Frame为最佳大小</span></span><br><span class="line">        frame.pack();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//8.设置Frame可见</span></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="1-4-4-GridBagLayout-网格包布局管理器"><a href="#1-4-4-GridBagLayout-网格包布局管理器" class="headerlink" title="1.4.4 GridBagLayout  网格包布局管理器"></a>1.4.4 GridBagLayout  <code>网格包布局管理器</code></h3><p>GridBagLayout 布局管理器的**功能最强大 **， 但也最复杂，与 GridLayout 布局管理器不同的是， 在GridBagLayout 布局管理器中，一个组件可以跨越一个或多个网格 ， 并可以设置各网格的大小互不相同，从而增加了布局的灵活性 。 当窗口的大小发生变化时 ， GridBagLayout 布局管理器也可以准确地控制窗口各部分的拉伸 。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031521954.png"
                      alt="image-20230403152102743"
                ></p>
<p>由于在GridBagLayout 布局中，每个组件可以占用多个网格，此时，我们往容器中添加组件的时候，就需要具体的控制每个组件占用多少个网格，<strong>利用GridBagConstaints类，与特定的组件绑定，可以完成具体大小和跨越性的设置。</strong></p>
<p><strong>GridBagConstraints API:</strong></p>
<table>
<thead>
<tr>
<th>成员变量</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>gridx</td>
<td>设置受该对象控制的GUI组件左上角所在网格的横向索引</td>
</tr>
<tr>
<td>gridy</td>
<td>设置受该对象控制的GUI组件左上角所在网格的纵向索引</td>
</tr>
<tr>
<td>gridwidth</td>
<td>设置受该对象控制的 GUI 组件横向跨越多少个网格,如果属性值为 GridBagContraints.REMAIND,则表明当前组件是横向最后一个组件，如果属性值为GridBagConstraints.RELATIVE,表明当前组件是横向倒数第二个组件。</td>
</tr>
<tr>
<td>gridheight</td>
<td>设置受该对象控制的 GUI 组件纵向跨越多少个网格，如果属性值为 GridBagContraints.REMAIND,则表明当前组件是纵向最后一个组件，如果属性值为GridBagConstraints.RELATIVE,表明当前组件是纵向倒数第二个组件。</td>
</tr>
<tr>
<td>fill</td>
<td>当”显示区域”大于”组件”的时候,如何调整组件 ：<br/> GridBagConstraints.NONE : GUI 组件不扩大<br/> GridBagConstraints.HORIZONTAL: GUI 组件水平扩大 以 占据空白区域<br/> GridBagConstraints.VERTICAL: GUI 组件垂直扩大以占据空白区域<br/> GridBagConstraints.BOTH: GUI 组件水平 、 垂直同时扩大以占据空白区域.</td>
</tr>
<tr>
<td>ipadx</td>
<td>设置受该对象控制的 GUI 组件横向内部填充的大小，即 在该组件最小尺寸的基础上还需要增大多少.</td>
</tr>
<tr>
<td>ipady</td>
<td>设置受该对象控制的 GUI 组件纵向内部填充的大小，即 在该组件最小尺寸的基础上还需要增大多少.</td>
</tr>
<tr>
<td>insets</td>
<td>设置受该对象控制 的 GUI 组件的 外部填充的大小 ， 即该组件边界和显示区 域边界之间的 距离 .</td>
</tr>
<tr>
<td>weightx</td>
<td>设置受该对象控制 的 GUI 组件占据多余空间的水平比例， 假设某个容器 的水平线上包括三个 GUI 组件， 它们的水平增加比例分别是 1 、 2 、 3 ， 但容器宽度增加 60 像素 时，则第一个组件宽度增加 10 像素 ， 第二个组件宽度增加 20 像素，第三个组件宽度增加 30 像 素。 如 果其增 加比例为 0 ， 则 表示不会增加 。</td>
</tr>
<tr>
<td>weighty</td>
<td>设置受该对象控制 的 GUI 组件占据多余空间的垂直比例</td>
</tr>
<tr>
<td>anchor</td>
<td>设置受该对象控制 的 GUI 组件在其显示区域中的定位方式:<br/>GridBagConstraints .CENTER (中 间 )<br/>GridBagConstraints.NORTH (上中 ) <br/>GridBagConstraints.NORTHWEST (左上角)<br/>GridBagConstraints.NORTHEAST (右上角)<br/>GridBagConstraints.SOUTH (下中) <br/>GridBagConstraints.SOUTHEAST (右下角)<br/>GridBagConstraints.SOUTHWEST (左下角)<br/>GridBagConstraints.EAST (右中) <br/>GridBagConstraints.WEST (左中)</td>
</tr>
</tbody></table>
<p><strong>GridBagLayout使用步骤：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.创建GridBagLaout布局管理器对象，并给容器设置该布局管理器对象；</span><br><span class="line"></span><br><span class="line">2.创建GridBagConstraints对象，并设置该对象的控制属性：</span><br><span class="line"></span><br><span class="line">	gridx: 用于指定组件在网格中所处的横向索引；</span><br><span class="line"></span><br><span class="line">	gridy: 用于执行组件在网格中所处的纵向索引；</span><br><span class="line"></span><br><span class="line">	gridwidth: 用于指定组件横向跨越多少个网格；</span><br><span class="line"></span><br><span class="line">	gridheight: 用于指定组件纵向跨越多少个网格；</span><br><span class="line"></span><br><span class="line">3.调用GridBagLayout对象的 setConstraints(Component c,GridBagConstraints gbc ) 方法，把即将要添加到容器中的组件c和GridBagConstraints对象关联起来；</span><br><span class="line"></span><br><span class="line">4. 把组件添加到容器中；</span><br></pre></td></tr></table></figure></div>

<p><strong>案例：</strong></p>
<p>​	使用Frame容器，设置GridBagLayout布局管理器，实现下图中的效果：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031521851.png"
                      alt="image-20230403152133635" style="zoom:50%;" 
                >

<p><strong>演示代码：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GridBagLayoutDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建Frame对象</span></span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这里是GridBagLayout测试&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建GridBagLayout对象</span></span><br><span class="line">        <span class="type">GridBagLayout</span> <span class="variable">gbl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GridBagLayout</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.把Frame对象的布局管理器设置为GridBagLayout</span></span><br><span class="line">        frame.setLayout(gbl);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.创建GridBagConstraints对象</span></span><br><span class="line">        <span class="type">GridBagConstraints</span> <span class="variable">gbc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GridBagConstraints</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.创建容量为10的Button数组</span></span><br><span class="line">        Button[] bs = <span class="keyword">new</span> <span class="title class_">Button</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.遍历数组，初始化每一个Button</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bs.length; i++) &#123;</span><br><span class="line">            bs[i] = <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;按钮&quot;</span>+(i+<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.设置所有的GridBagConstraints对象的fill属性为GridBagConstraints.BOTH,当有空白区域时，组件自动扩大占满空白区域</span></span><br><span class="line">        gbc.fill=GridBagConstraints.BOTH;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//8.设置GridBagConstraints对象的weightx设置为1,表示横向扩展比例为1</span></span><br><span class="line">        gbc.weightx=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//9.往frame中添加数组中的前3个Button</span></span><br><span class="line">        addComponent(frame,bs[<span class="number">0</span>],gbl,gbc);</span><br><span class="line">        addComponent(frame,bs[<span class="number">1</span>],gbl,gbc);</span><br><span class="line">        addComponent(frame,bs[<span class="number">2</span>],gbl,gbc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//10.把GridBagConstraints的gridwidth设置为GridBagConstraints.REMAINDER,则表明当前组件是横向最后一个组件</span></span><br><span class="line">        gbc.gridwidth=GridBagConstraints.REMAINDER;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//11.把button数组中第四个按钮添加到frame中</span></span><br><span class="line">        addComponent(frame,bs[<span class="number">3</span>],gbl,gbc);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//12.把GridBagConstraints的weighty设置为1，表示纵向扩展比例为1</span></span><br><span class="line">        gbc.weighty=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//13.把button数组中第5个按钮添加到frame中</span></span><br><span class="line">        addComponent(frame,bs[<span class="number">4</span>],gbl,gbc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//14.把GridBagConstaints的gridheight和gridwidth设置为2，表示纵向和横向会占用两个网格</span></span><br><span class="line">        gbc.gridheight=<span class="number">2</span>;</span><br><span class="line">        gbc.gridwidth=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//15.把button数组中第6个按钮添加到frame中</span></span><br><span class="line">        addComponent(frame,bs[<span class="number">5</span>],gbl,gbc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//16.把GridBagConstaints的gridheight和gridwidth设置为1，表示纵向会占用1个网格</span></span><br><span class="line">        gbc.gridwidth=<span class="number">1</span>;</span><br><span class="line">        gbc.gridheight=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//17.把button数组中第7个按钮添加到frame中</span></span><br><span class="line">        addComponent(frame,bs[<span class="number">6</span>],gbl,gbc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//18.把GridBagConstraints的gridwidth设置为GridBagConstraints.REMAINDER,则表明当前组件是横向最后一个组件</span></span><br><span class="line">        gbc.gridwidth=GridBagConstraints.REMAINDER;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//19.把button数组中第8个按钮添加到frame中</span></span><br><span class="line">        addComponent(frame,bs[<span class="number">7</span>],gbl,gbc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//20.把GridBagConstaints的gridwidth设置为1，表示纵向会占用1个网格</span></span><br><span class="line">        gbc.gridwidth=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//21.把button数组中第9、10个按钮添加到frame中</span></span><br><span class="line">        addComponent(frame,bs[<span class="number">8</span>],gbl,gbc);</span><br><span class="line">        addComponent(frame,bs[<span class="number">9</span>],gbl,gbc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//22.设置frame为最佳大小</span></span><br><span class="line">        frame.pack();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//23.设置frame可见</span></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addComponent</span><span class="params">(Container container,Component c,GridBagLayout gridBagLayout,GridBagConstraints gridBagConstraints)</span>&#123;</span><br><span class="line">        gridBagLayout.setConstraints(c,gridBagConstraints);</span><br><span class="line">        container.add(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="1-4-5-CardLayout-卡片布局管理器"><a href="#1-4-5-CardLayout-卡片布局管理器" class="headerlink" title="1.4.5 CardLayout 卡片布局管理器"></a>1.4.5 CardLayout <code>卡片布局管理器</code></h3><p>CardLayout 布局管理器<strong>以时间而非空间</strong>来管理它里面的组件，它将加入容器的所有组件看成一叠卡片（每个卡片其实就是一个组件），每次只有最上面的那个 Component 才可见。就好像一副扑克牌，它们叠在一起，每次只有最上面的一张扑克牌才可见.</p>
<p>注意其声明的方式与上几种布局有着一些不同 ，例如 </p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>方法功能</th>
</tr>
</thead>
<tbody><tr>
<td>CardLayout()</td>
<td>创建默认的 CardLayout 布局管理器。</td>
</tr>
<tr>
<td>CardLayout(int hgap,int vgap)</td>
<td>通过指定卡片与容器左右边界的间距 C hgap) 、上下边界 Cvgap) 的间距来创建 CardLayout 布局管理器.</td>
</tr>
<tr>
<td>first(Container target)</td>
<td>显示target 容器中的第一张卡片.</td>
</tr>
<tr>
<td>last(Container target)</td>
<td>显示target 容器中的最后一张卡片.</td>
</tr>
<tr>
<td>previous(Container target)</td>
<td>显示target 容器中的前一张卡片.</td>
</tr>
<tr>
<td>next(Container target)</td>
<td>显示target 容器中的后一张卡片.</td>
</tr>
<tr>
<td>show(Container taget,String name)</td>
<td>显 示 target 容器中指定名字的卡片.</td>
</tr>
</tbody></table>
<p><strong>案例：</strong></p>
<p>​	使用Frame和Panel以及CardLayout完成下图中的效果，点击底部的按钮，切换卡片</p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031521489.png"
                      alt="image-20230403152146266" style="zoom: 50%;" 
                ></p>
<p>​	</p>
<p><strong>演示代码：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CardLayoutDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建Frame对象</span></span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这里测试CardLayout&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建一个String数组，存储不同卡片的名字</span></span><br><span class="line">        String[] names = &#123;<span class="string">&quot;第一张&quot;</span>,<span class="string">&quot;第二张&quot;</span>,<span class="string">&quot;第三张&quot;</span>,<span class="string">&quot;第四张&quot;</span>,<span class="string">&quot;第五张&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.创建一个Panel容器p1，并设置其布局管理器为CardLayout,用来存放多张卡片</span></span><br><span class="line">        <span class="type">CardLayout</span> <span class="variable">cardLayout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CardLayout</span>();</span><br><span class="line">        <span class="type">Panel</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>();</span><br><span class="line">        p1.setLayout(cardLayout);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.往p1中存储5个Button按钮，名字从String数组中取</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            p1.add(names[i],<span class="keyword">new</span> <span class="title class_">Button</span>(names[i]));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.创建一个Panel容器p2,用来存储5个按钮，完成卡片的切换</span></span><br><span class="line">        <span class="type">Panel</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.创建5个按钮，并给按钮设置监听器</span></span><br><span class="line">        <span class="type">ActionListener</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> e.getActionCommand();</span><br><span class="line">                <span class="keyword">switch</span> (command)&#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;上一张&quot;</span>:</span><br><span class="line">                        cardLayout.previous(p1);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;下一张&quot;</span>:</span><br><span class="line">                        cardLayout.next(p1);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;第一张&quot;</span>:</span><br><span class="line">                        cardLayout.first(p1);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;最后一张&quot;</span>:</span><br><span class="line">                        cardLayout.last(p1);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;第三张&quot;</span>:</span><br><span class="line">                        cardLayout.show(p1,<span class="string">&quot;第三张&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Button</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;上一张&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;下一张&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">b3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;第一张&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">b4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;最后一张&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">b5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;第三张&quot;</span>);</span><br><span class="line">        b1.addActionListener(listener);</span><br><span class="line">        b2.addActionListener(listener);</span><br><span class="line">        b3.addActionListener(listener);</span><br><span class="line">        b4.addActionListener(listener);</span><br><span class="line">        b5.addActionListener(listener);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.把5个按钮添加到p2中</span></span><br><span class="line">        p2.add(b1);</span><br><span class="line">        p2.add(b2);</span><br><span class="line">        p2.add(b3);</span><br><span class="line">        p2.add(b4);</span><br><span class="line">        p2.add(b5);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//8.把p1添加到frame的中间区域</span></span><br><span class="line">        frame.add(p1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//9.把p2添加到frame的底部区域</span></span><br><span class="line">        frame.add(p2,BorderLayout.SOUTH);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//10设置frame最佳大小并可见</span></span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="1-4-6-BoxLayout-盒布局管理器"><a href="#1-4-6-BoxLayout-盒布局管理器" class="headerlink" title="1.4.6 BoxLayout  盒布局管理器"></a>1.4.6 BoxLayout  <code>盒布局管理器</code></h3><p>为了简化开发，Swing 引入了 一个新的布局管理器 : BoxLayout 。 BoxLayout 可以在垂直和 水平两个方向上摆放 GUI 组件， BoxLayout 提供了如下一个简单的构造器:</p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>方法功能</th>
</tr>
</thead>
<tbody><tr>
<td>BoxLayout(Container target, int axis)</td>
<td>指定创建基于 target 容器的 BoxLayout 布局管理器，该布局管理器里的组件按 axis 方向排列。其中 axis 有 BoxLayout.X_AXIS( 横向)和 BoxLayout.Y _AXIS (纵向〉两个方向。</td>
</tr>
</tbody></table>
<p><strong>案例1：</strong></p>
<p>​	使用Frame和BoxLayout完成下图效果：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031522035.png"
                      alt="image-20230403152201823" style="zoom:50%;" 
                >

<p><strong>演示代码1：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BoxLayoutDemo1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建Frame对象</span></span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这里测试BoxLayout&quot;</span>);</span><br><span class="line">        <span class="comment">//2.创建BoxLayout布局管理器，并指定容器为上面的frame对象，指定组件排列方向为纵向</span></span><br><span class="line">        <span class="type">BoxLayout</span> <span class="variable">boxLayout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BoxLayout</span>(frame, BoxLayout.Y_AXIS);</span><br><span class="line">        frame.setLayout(boxLayout);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.往frame对象中添加两个按钮</span></span><br><span class="line">        frame.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;按钮1&quot;</span>));</span><br><span class="line">        frame.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;按钮2&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.设置frame最佳大小，并可见</span></span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>在java.swing包中，提供了一个新的容器Box，该容器的默认布局管理器就是BoxLayout,大多数情况下，使用Box容器去容纳多个GUI组件，然后再把Box容器作为一个组件，添加到其他的容器中，从而形成整体窗口布局。</p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>方法功能</th>
</tr>
</thead>
<tbody><tr>
<td>static Box createHorizontalBox()</td>
<td>创建一个水平排列组件的 Box 容器 。</td>
</tr>
<tr>
<td>static Box createVerticalBox()</td>
<td>创建一个垂直排列组件的 Box 容器 。</td>
</tr>
</tbody></table>
<p><strong>案例2：</strong></p>
<p>​	使用Frame和Box，完成下图效果：</p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031522570.png"
                      alt="image-20230403152211355" style="zoom:50%;" 
                ></p>
<p><strong>演示代码2：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BoxLayoutDemo2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建Frame对象</span></span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这里测试BoxLayout&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建一个横向的Box,并添加两个按钮</span></span><br><span class="line">        <span class="type">Box</span> <span class="variable">hBox</span> <span class="operator">=</span> Box.createHorizontalBox();</span><br><span class="line">        hBox.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;水平按钮一&quot;</span>));</span><br><span class="line">        hBox.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;水平按钮二&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.创建一个纵向的Box，并添加两个按钮</span></span><br><span class="line">        <span class="type">Box</span> <span class="variable">vBox</span> <span class="operator">=</span> Box.createVerticalBox();</span><br><span class="line">        vBox.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;垂直按钮一&quot;</span>));</span><br><span class="line">        vBox.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;垂直按钮二&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.把box容器添加到frame容器中</span></span><br><span class="line">        frame.add(hBox,BorderLayout.NORTH);</span><br><span class="line">        frame.add(vBox);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.设置frame最佳大小并可见</span></span><br><span class="line"></span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>通过之前的两个BoxLayout演示，我们会发现，被它管理的容器中的组件之间是没有间隔的，不是特别的美观，但之前学习的几种布局，组件之间都会有一些间距，那使用BoxLayout如何给组件设置间距呢？</p>
<p>其实很简单，我们只需要在原有的组件需要间隔的地方，添加间隔即可，而每个间隔可以是一个组件，只不过该组件没有内容，仅仅起到一种分隔的作用。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031522928.png"
                      alt="image-20230403152221698"
                ></p>
<p>Box类中，提供了5个方便的静态方法来生成这些间隔组件：</p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>方法功能</th>
</tr>
</thead>
<tbody><tr>
<td>static Component createHorizontalGlue()</td>
<td>创建一条水平 Glue (可在两个方向上同时拉伸的间距)</td>
</tr>
<tr>
<td>static Component createVerticalGlue()</td>
<td>创建一条垂直 Glue (可在两个方向上同时拉伸的间距）</td>
</tr>
<tr>
<td>static Component createHorizontalStrut(int width)</td>
<td>创建一条指定宽度(宽度固定了，不能拉伸)的水平Strut (可在垂直方向上拉伸的间距)</td>
</tr>
<tr>
<td>static Component createVerticalStrut(int height)</td>
<td>创建一条指定高度(高度固定了，不能拉伸)的垂直Strut (可在水平方向上拉伸的间距)</td>
</tr>
</tbody></table>
<p><strong>案例3：</strong></p>
<p>使用Frame和Box，完成下图效果：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031522773.png"
                      alt="image-20230403152228543" style="zoom:50%;" 
                >

<p><strong>演示代码3：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BoxLayoutDemo3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建Frame对象</span></span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这里测试BoxLayout&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建一个横向的Box,并添加两个按钮</span></span><br><span class="line">        <span class="type">Box</span> <span class="variable">hBox</span> <span class="operator">=</span> Box.createHorizontalBox();</span><br><span class="line">        hBox.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;水平按钮一&quot;</span>));</span><br><span class="line">        hBox.add(Box.createHorizontalGlue());<span class="comment">//两个方向都可以拉伸的间隔</span></span><br><span class="line">        hBox.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;水平按钮二&quot;</span>));</span><br><span class="line">        hBox.add(Box.createHorizontalStrut(<span class="number">10</span>));<span class="comment">//水平间隔固定，垂直间方向可以拉伸</span></span><br><span class="line">        hBox.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;水平按钮3&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.创建一个纵向的Box，并添加两个按钮</span></span><br><span class="line">        <span class="type">Box</span> <span class="variable">vBox</span> <span class="operator">=</span> Box.createVerticalBox();</span><br><span class="line">        vBox.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;垂直按钮一&quot;</span>));</span><br><span class="line">        vBox.add(Box.createVerticalGlue());<span class="comment">//两个方向都可以拉伸的间隔</span></span><br><span class="line">        vBox.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;垂直按钮二&quot;</span>));</span><br><span class="line">        vBox.add(Box.createVerticalStrut(<span class="number">10</span>));<span class="comment">//垂直间隔固定，水平方向可以拉伸</span></span><br><span class="line">        vBox.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;垂直按钮三&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.把box容器添加到frame容器中</span></span><br><span class="line">        frame.add(hBox, BorderLayout.NORTH);</span><br><span class="line">        frame.add(vBox);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.设置frame最佳大小并可见</span></span><br><span class="line"></span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="1-5-AWT中常用组件"><a href="#1-5-AWT中常用组件" class="headerlink" title="1.5 AWT中常用组件"></a>1.5 AWT中常用组件</h2><h3 id="1-5-1-基本组件"><a href="#1-5-1-基本组件" class="headerlink" title="1.5.1 基本组件"></a>1.5.1 基本组件</h3><table>
<thead>
<tr>
<th>组件名</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Button</td>
<td>Button</td>
</tr>
<tr>
<td>Canvas</td>
<td>用于绘图的画布</td>
</tr>
<tr>
<td>Checkbox</td>
<td>复选框组件（也可当做单选框组件使用）</td>
</tr>
<tr>
<td>CheckboxGroup</td>
<td>用于将多个Checkbox 组件组合成一组， 一组 Checkbox 组件将只有一个可以 被选中 ， 即全部变成单选框组件</td>
</tr>
<tr>
<td>Choice</td>
<td>下拉选择框</td>
</tr>
<tr>
<td>Frame</td>
<td>窗口 ， 在 GUI 程序里通过该类创建窗口</td>
</tr>
<tr>
<td>Label</td>
<td>标签类，用于放置提示性文本</td>
</tr>
<tr>
<td>List</td>
<td>JU表框组件，可以添加多项条目</td>
</tr>
<tr>
<td>Panel</td>
<td>不能单独存在基本容器类，必须放到其他容器中</td>
</tr>
<tr>
<td>Scrollbar</td>
<td>滑动条组件。如果需要用户输入位于某个范围的值 ， 就可以使用滑动条组件 ，比如调 色板中设置 RGB 的三个值所用的滑动条。当创建一个滑动条时，必须指定它的方向、初始值、 滑块的大小、最小值和最大值。</td>
</tr>
<tr>
<td>ScrollPane</td>
<td>带水平及垂直滚动条的容器组件</td>
</tr>
<tr>
<td>TextArea</td>
<td>多行文本域</td>
</tr>
<tr>
<td>TextField</td>
<td>单行文本框</td>
</tr>
</tbody></table>
<p>这些 AWT 组件的用法比较简单，可以查阅 API 文档来获取它们各自的构方法、成员方法等详细信息。</p>
<p><strong>案例：</strong> </p>
<p>​	实现下图效果：</p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031522886.png"
                      alt="image-20230403152238646"
                ></p>
<h4 id="CheckBoxGroup语法实例："><a href="#CheckBoxGroup语法实例：" class="headerlink" title="CheckBoxGroup语法实例："></a>CheckBoxGroup语法实例：</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="type">CheckboxGroup</span> <span class="variable">cbg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CheckboxGroup</span>(); <span class="comment">// 创建一个新的CheckboxGroup</span></span><br><span class="line">   <span class="type">Checkbox</span> <span class="variable">checkbox1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Checkbox</span>(<span class="string">&quot;Option 1&quot;</span>, cbg, <span class="literal">true</span>); <span class="comment">// 创建一个带有默认选项的Checkbox组件，并将其添	 		加到cbg中  true 即默认选项 </span></span><br><span class="line">   <span class="type">Checkbox</span> <span class="variable">checkbox2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Checkbox</span>(<span class="string">&quot;Option 2&quot;</span>, cbg, <span class="literal">false</span>); <span class="comment">// 创建另一个Checkbox组件，并将其添加到cbg中</span></span><br><span class="line">   <span class="type">Panel</span> <span class="variable">panel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>(); <span class="comment">// 创建一个面板</span></span><br><span class="line">panel.add(checkbox1); <span class="comment">// 将checkbox1添加到面板中</span></span><br><span class="line">   panel.add(checkbox2); <span class="comment">// 将checkbox2添加到面板中</span></span><br><span class="line">       </span><br></pre></td></tr></table></figure></div>

<p><strong>演示代码：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] arg)</span> &#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Button</span> <span class="variable">ok</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;确认&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Choice</span> <span class="variable">colorChooser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Choice</span>();   <span class="comment">//  定义一个下拉选择框</span></span><br><span class="line">        colorChooser.add(<span class="string">&quot;red&quot;</span>);</span><br><span class="line">        colorChooser.add(<span class="string">&quot;white&quot;</span>);</span><br><span class="line">        colorChooser.add(<span class="string">&quot;yellow&quot;</span>);</span><br><span class="line">        colorChooser.add(<span class="string">&quot;pink&quot;</span>);</span><br><span class="line">        colorChooser.add(<span class="string">&quot;brown&quot;</span>);</span><br><span class="line">        colorChooser.add(<span class="string">&quot;black&quot;</span>);    <span class="comment">//添加下拉选框选项</span></span><br><span class="line"></span><br><span class="line">        <span class="type">List</span> <span class="variable">colorList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">List</span>(<span class="number">6</span>, <span class="literal">true</span>);  <span class="comment">// true则表示该list 可以多选，否则即不可多选</span></span><br><span class="line">        colorList.add(<span class="string">&quot;red&quot;</span>);</span><br><span class="line">        colorList.add(<span class="string">&quot;green&quot;</span>);</span><br><span class="line">        colorList.add(<span class="string">&quot;blue&quot;</span>);    <span class="comment">// 添加列表选项</span></span><br><span class="line"></span><br><span class="line">        <span class="type">TextArea</span> <span class="variable">ta</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextArea</span>(<span class="number">5</span>, <span class="number">20</span>);   <span class="comment">//   即代表 5 行每行最大的长度是 20</span></span><br><span class="line">        <span class="type">TextField</span> <span class="variable">tf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">50</span>);   <span class="comment">//  定义了一个单行文本域</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Panel</span> <span class="variable">checkPanel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>();</span><br><span class="line">        <span class="type">CheckboxGroup</span> <span class="variable">cbg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CheckboxGroup</span>();</span><br><span class="line">        <span class="type">Checkbox</span> <span class="variable">male</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Checkbox</span>(<span class="string">&quot;男&quot;</span>, cbg, <span class="literal">true</span>);  <span class="comment">//定义的是单选框</span></span><br><span class="line">        <span class="type">Checkbox</span> <span class="variable">female</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Checkbox</span>(<span class="string">&quot;女&quot;</span>, cbg, <span class="literal">false</span>);   <span class="comment">//定义的是单选框   男女二者只能选择其中一个，类似于前段 id</span></span><br><span class="line">        <span class="type">Checkbox</span> <span class="variable">married</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Checkbox</span>(<span class="string">&quot;是否已婚&quot;</span>, <span class="literal">false</span>);    <span class="comment">//这里定义的是复选框</span></span><br><span class="line"></span><br><span class="line">        checkPanel.add(colorChooser);</span><br><span class="line">        checkPanel.add(male);</span><br><span class="line">        checkPanel.add(female);</span><br><span class="line">        checkPanel.add(married);  <span class="comment">//   Panel 承载 下拉列表 male，female，married 信息</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Panel</span> <span class="variable">buttom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>();</span><br><span class="line">        buttom.add(tf);</span><br><span class="line">        buttom.add(ok);</span><br><span class="line">        frame.add(buttom, BorderLayout.SOUTH);    <span class="comment">//  这里的结构很清楚，即使用一个Panel 承载 单行文本以及  button</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Box</span> <span class="variable">topleft</span> <span class="operator">=</span> Box.createVerticalBox();<span class="comment">//创建垂直 排列box    注意box 这里是没有new 的 </span></span><br><span class="line">        topleft.add(ta);</span><br><span class="line">        topleft.add(checkPanel);</span><br><span class="line"></span><br><span class="line">        <span class="type">Box</span> <span class="variable">top</span> <span class="operator">=</span> Box.createHorizontalBox();  <span class="comment">//创建水平box</span></span><br><span class="line"></span><br><span class="line">        top.add(colorList);</span><br><span class="line">        top.add(topleft);</span><br><span class="line">        frame.add(top);</span><br><span class="line"></span><br><span class="line">        frame.pack();  <span class="comment">//自适应</span></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);   <span class="comment">//  显示 可见</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="1-5-2-对话框Dialog"><a href="#1-5-2-对话框Dialog" class="headerlink" title="1.5.2 对话框Dialog"></a>1.5.2 对话框Dialog</h3><h4 id="1-5-2-1-Dialog"><a href="#1-5-2-1-Dialog" class="headerlink" title="1.5.2.1 Dialog"></a>1.5.2.1 Dialog</h4><p>Dialog 是 Window 类的子类，是 一个容器类，属于特殊组件 。 对话框是可以独立存在的顶级窗口， 因此用法与普通窗口的用法几乎完全一样，但是使用对话框需要注意下面两点：</p>
<ul>
<li>对话框通常依赖于其他窗口，就是通常需要有一个父窗口；</li>
<li>对话框有非模式(non-modal)和模式(modal)两种，当某个模式对话框被打开后，该模式对话框总是位于它的父窗口之上，在模式对话框被关闭之前，父窗口无法获得焦点（即无法点击）。</li>
</ul>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>方法功能</th>
</tr>
</thead>
<tbody><tr>
<td>Dialog(Frame owner, String title, boolean modal)</td>
<td>创建一个对话框对象：<br/>owner:当前对话框的父窗口<br/>title:当前对话框的标题<br/>modal：当前对话框是否是模式对话框，true&#x2F;false</td>
</tr>
</tbody></table>
<p><strong>案例1：</strong></p>
<p>​	通过Frame、Button、Dialog实现下图效果:</p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031522872.png"
                      alt="image-20230403152248636" style="zoom:50%;" 
                ></p>
<p><strong>演示代码1：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DialogDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这里测试Dialog&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Dialog</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dialog</span>(frame, <span class="string">&quot;模式对话框&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="type">Dialog</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dialog</span>(frame, <span class="string">&quot;非模式对话框&quot;</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Button</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;打开模式对话框&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;打开非模式对话框&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置对话框的大小和位置</span></span><br><span class="line">        d1.setBounds(<span class="number">20</span>,<span class="number">30</span>,<span class="number">300</span>,<span class="number">400</span>);</span><br><span class="line">        d2.setBounds(<span class="number">20</span>,<span class="number">30</span>,<span class="number">300</span>,<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给b1和b2绑定监听事件</span></span><br><span class="line">        b1.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                d1.setVisible(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        b2.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                d2.setVisible(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把按钮添加到frame中</span></span><br><span class="line">        frame.add(b1);</span><br><span class="line">        frame.add(b2,BorderLayout.SOUTH);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置frame最佳大小并可见</span></span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在Dialog对话框中，可以根据需求，自定义内容</p>
<p><strong>案例：</strong></p>
<p>​	点击按钮，弹出一个模式对话框，其内容如下:</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031523843.png"
                      alt="image-20230403152300597" style="zoom:50%;" 
                >

<p><strong>演示代码：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DialogDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这里测试Dialog&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Dialog</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dialog</span>(frame, <span class="string">&quot;模式对话框&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="type">Box</span> <span class="variable">vBox</span> <span class="operator">=</span> Box.createVerticalBox();         <span class="comment">//往对话框中添加内容</span></span><br><span class="line"></span><br><span class="line">        vBox.add(<span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">15</span>));</span><br><span class="line">        vBox.add(<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;确认&quot;</span>));</span><br><span class="line">        d1.add(vBox);</span><br><span class="line"></span><br><span class="line">        <span class="type">Button</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;打开模式对话框&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        d1.setBounds(<span class="number">20</span>,<span class="number">30</span>,<span class="number">200</span>,<span class="number">100</span>);           <span class="comment">//设置对话框的大小和位置</span></span><br><span class="line">        <span class="comment">//给b1按钮  绑定监听事件</span></span><br><span class="line">        b1.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                d1.setVisible(<span class="literal">true</span>);   <span class="comment">//收到点击， 弹出窗口</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//把按钮添加到frame中</span></span><br><span class="line">        frame.add(b1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置frame最佳大小并可见</span></span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h4 id="1-5-2-1-FileDialog"><a href="#1-5-2-1-FileDialog" class="headerlink" title="1.5.2.1 FileDialog"></a>1.5.2.1 FileDialog</h4><p>Dialog 类还有 一个子类 : FileDialog ，它代表一个文件对话框，用于打开或者保存 文件,需要注意的是FileDialog无法指定模态或者非模态，这是因为 FileDialog 依赖于运行平台的实现，如果运行平台的文件对话框是模态的，那么 FileDialog 也是模态的;否则就是非模态的 。</p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>方法功能</th>
</tr>
</thead>
<tbody><tr>
<td>FileDialog(Frame parent, String title, int mode)</td>
<td>创建一个文件对话框：<br/>parent:指定父窗口<br/>title:对话框标题<br/>mode:文件对话框类型，如果指定为FileDialog.load，用于打开文件，如果指定为FileDialog.SAVE,用于保存文件</td>
</tr>
<tr>
<td>String getDirectory()</td>
<td>获取被打开或保存文件的绝对路径</td>
</tr>
<tr>
<td>String getFile()</td>
<td>获取被打开或保存文件的文件名</td>
</tr>
</tbody></table>
<p><strong>案例2：</strong></p>
<p>​	使用 Frame、Button和FileDialog完成下图效果：</p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031523031.png"
                      alt="image-20230403152311772" style="zoom: 67%;" 
                ></p>
<p><strong>演示代码2：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDialogTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这里测试FileDialog&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">FileDialog</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileDialog</span>(frame, <span class="string">&quot;选择需要加载的文件&quot;</span>, FileDialog.LOAD);</span><br><span class="line">        <span class="type">FileDialog</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileDialog</span>(frame, <span class="string">&quot;选择需要保存的文件&quot;</span>, FileDialog.SAVE);</span><br><span class="line"></span><br><span class="line">        <span class="type">Button</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;打开文件&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;保存文件&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给按钮添加事件</span></span><br><span class="line">        b1.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                d1.setVisible(<span class="literal">true</span>);</span><br><span class="line">                <span class="comment">//打印用户选择的文件路径和名称</span></span><br><span class="line">                System.out.println(<span class="string">&quot;用户选择的文件路径:&quot;</span>+d1.getDirectory());</span><br><span class="line">                System.out.println(<span class="string">&quot;用户选择的文件名称:&quot;</span>+d1.getFile());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------&quot;</span>);</span><br><span class="line">        b2.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                d2.setVisible(<span class="literal">true</span>);</span><br><span class="line">                <span class="comment">//打印用户选择的文件路径和名称</span></span><br><span class="line">                System.out.println(<span class="string">&quot;用户选择的文件路径:&quot;</span>+d2.getDirectory());</span><br><span class="line">                System.out.println(<span class="string">&quot;用户选择的文件名称:&quot;</span>+d2.getFile());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加按钮到frame中</span></span><br><span class="line"></span><br><span class="line">        frame.add(b1);</span><br><span class="line">        frame.add(b2,BorderLayout.SOUTH);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置frame最佳大小并可见</span></span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="1-6-事件处理"><a href="#1-6-事件处理" class="headerlink" title="1.6 事件处理"></a>1.6 事件处理</h2><p>前面介绍了如何放置各种组件，从而得到了丰富多彩的图形界面，但这些界面还不能响应用户的任何操作。比如单击前面所有窗口右上角的“X”按钮，但窗口依然不会关闭。因为在 AWT 编程中 ，所有用户的操作，都必须都需要经过一套事件处理机制来完成，而 Frame 和组件本身并没有事件处理能力 。</p>
<h3 id="1-6-1-GUI事件处理机制"><a href="#1-6-1-GUI事件处理机制" class="headerlink" title="1.6.1 GUI事件处理机制"></a>1.6.1 GUI事件处理机制</h3><p><strong>定义：</strong></p>
<p>​	当在某个组件上发生某些操作的时候，会自动的触发一段代码的执行。</p>
<p>在GUI事件处理机制中涉及到4个重要的概念需要理解：</p>
<p>**事件源(Event Source)**：操作发生的场所，通常指某个组件，例如按钮、窗口等；<br><strong>事件（Event）</strong>：在事件源上发生的操作可以叫做事件，GUI会把事件都封装到一个Event对象中，如果需要知道该事件的详细信息，就可以通过Event对象来获取。<br><strong>事件监听器(Event Listener)</strong>:当在某个事件源上发生了某个事件，事件监听器就可以对这个事件进行处理。</p>
<p><strong>注册监听</strong>：把某个事件监听器(A)通过某个事件(B)绑定到某个事件源(C)上，当在事件源C上发生了事件B之后，那么事件监听器A的代码就会自动执行。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031523226.png"
                      alt="image-20230403152331933"
                ></p>
<p><strong>使用步骤：</strong></p>
<blockquote>
<p>1.创建事件源组件对象；</p>
<p>2.自定义类，实现XxxListener接口，重写方法；</p>
<p>3.创建事件监听器对象(自定义类对象)</p>
<p>4.调用事件源组件对象的addXxxListener方法完成注册监听</p>
</blockquote>
<p><strong>案例：</strong></p>
<p>​	完成下图效果，点击确定按钮，在单行文本域内显示 hello world:</p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031523752.png"
                      alt="image-20230403152339498"
                ></p>
<p>​	</p>
<p><strong>演示代码：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EventDemo1</span> &#123;</span><br><span class="line">    <span class="type">Frame</span>  <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这里测试事件处理&quot;</span>);</span><br><span class="line">    <span class="comment">//事件源</span></span><br><span class="line">    <span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;确定&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">TextField</span> <span class="variable">tf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">30</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//注册监听</span></span><br><span class="line">        button.addActionListener(<span class="keyword">new</span> <span class="title class_">MyActionListener</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加组件到frame中</span></span><br><span class="line">        frame.add(tf);</span><br><span class="line">        frame.add(button,BorderLayout.SOUTH);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置frame最佳大小并可见</span></span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义事件监听器类</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">class</span> <span class="title class_">MyActionListener</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;用户点击了确定按钮&quot;</span>);</span><br><span class="line">            tf.setText(<span class="string">&quot;hello world&quot;</span>);   <span class="comment">//  textfield 的函数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">EventDemo1</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="1-6-2-GUI中常见事件和事件监听器"><a href="#1-6-2-GUI中常见事件和事件监听器" class="headerlink" title="1.6.2 GUI中常见事件和事件监听器"></a>1.6.2 GUI中常见事件和事件监听器</h3><p><strong>事件监听器必须实现事件监听器接口</strong>， AWT 提供了大量的事件监听器接口用于实现不同类型的事件监听器，用于监听不同类型的事件 。 AWT 中提供了丰富的事件类，用于封装不同组件上所发生的特定操作， AWT 的事件类都是 AWTEvent 类的子类 ， AWTEvent是 EventObject 的子类。</p>
<h4 id="1-6-2-1-事件"><a href="#1-6-2-1-事件" class="headerlink" title="1.6.2.1 事件"></a>1.6.2.1 事件</h4><p>AWT把事件分为了两大类：</p>
<p>​	1.低级事件：这类事件是基于某个特定动作的事件。比如进入、点击、拖放等动作的鼠标事件，再比如得到焦点和失去焦点等焦点事件。</p>
<table>
<thead>
<tr>
<th>事件</th>
<th>触发时机</th>
</tr>
</thead>
<tbody><tr>
<td>ComponentEvent</td>
<td>组件事件 ， 当 组件尺寸发生变化、位置发生移动、显示&#x2F;隐藏状态发生改变时触发该事件。</td>
</tr>
<tr>
<td>ContainerEvent</td>
<td>容器事件 ， 当容器里发生添加组件、删除组件时触发该事件 。</td>
</tr>
<tr>
<td>WindowEvent</td>
<td>窗口事件， 当窗 口状态发生改变 ( 如打开、关闭、最大化、最 小化)时触发该事件 。</td>
</tr>
<tr>
<td>FocusEvent</td>
<td>焦点事件 ， 当组件得到焦点或失去焦点 时触发该事件 。</td>
</tr>
<tr>
<td>KeyEvent</td>
<td>键盘事件 ， 当按键被按下、松开、单击时触发该事件。</td>
</tr>
<tr>
<td>MouseEvent</td>
<td>鼠标事件，当进行单击、按下、松开、移动鼠标等动作 时触发该事件。</td>
</tr>
<tr>
<td>PaintEvent</td>
<td>组件绘制事件 ， 该事件是一个特殊的事件类型 ， 当 GUI 组件调 用 update&#x2F;paint 方法 来呈现自身时触发该事件，该事件并非专用于事件处理模型 。</td>
</tr>
</tbody></table>
<p>​	2.高级事件：这类事件并不会基于某个特定动作，而是根据功能含义定义的事件。</p>
<table>
<thead>
<tr>
<th>事件</th>
<th>触发时机</th>
</tr>
</thead>
<tbody><tr>
<td>ActionEvent</td>
<td>动作事件 ，当按钮、菜单项被单击，在 TextField 中按 Enter 键时触发</td>
</tr>
<tr>
<td>AjustmentEvent</td>
<td>调节事件，在滑动条上移动滑块以调节数值时触发该事件。</td>
</tr>
<tr>
<td>ltemEvent</td>
<td>选项事件，当用户选中某项， 或取消选中某项时触发该事件 。</td>
</tr>
<tr>
<td>TextEvent</td>
<td>文本事件， 当文本框、文本域里的文本发生改变时触发该事件。</td>
</tr>
</tbody></table>
<h4 id="1-6-2-事件监听器"><a href="#1-6-2-事件监听器" class="headerlink" title="1.6.2 事件监听器"></a>1.6.2 事件监听器</h4><p><strong>不同的事件需要使用不同的监听器监听</strong>，不同的监听器需要实现不同的监听器接口， 当指定事件发生后 ， 事件监听器就会调用所包含的事件处理器(实例方法)来处理事件 。</p>
<table>
<thead>
<tr>
<th>事件类别</th>
<th>描述信息</th>
<th>监听器接口名</th>
</tr>
</thead>
<tbody><tr>
<td>ActionEvent</td>
<td>激活组件</td>
<td>ActionListener</td>
</tr>
<tr>
<td>ItemEvent</td>
<td>选择了某些项目</td>
<td>ItemListener</td>
</tr>
<tr>
<td>MouseEvent</td>
<td>鼠标移动</td>
<td>MouseMotionListener</td>
</tr>
<tr>
<td>MouseEvent</td>
<td>鼠标点击等</td>
<td>MouseListener</td>
</tr>
<tr>
<td>KeyEvent</td>
<td>键盘输入</td>
<td>KeyListener</td>
</tr>
<tr>
<td>FocusEvent</td>
<td>组件收到或失去焦点</td>
<td>FocusListener</td>
</tr>
<tr>
<td>AdjustmentEvent</td>
<td>移动了滚动条等组件</td>
<td>AdjustmentListener</td>
</tr>
<tr>
<td>ComponentEvent</td>
<td>对象移动缩放显示隐藏等</td>
<td>ComponentListener</td>
</tr>
<tr>
<td>WindowEvent</td>
<td>窗口收到窗口级事件</td>
<td>WindowListener</td>
</tr>
<tr>
<td>ContainerEvent</td>
<td>容器中增加删除了组件</td>
<td>ContainerListener</td>
</tr>
<tr>
<td>TextEvent</td>
<td>文本字段或文本区发生改变</td>
<td>TextListener</td>
</tr>
</tbody></table>
<h3 id="1-6-3-案例"><a href="#1-6-3-案例" class="headerlink" title="1.6.3 案例"></a>1.6.3 案例</h3><p><strong>案例一：</strong></p>
<p>​	通过ContainerListener监听Frame容器添加组件；</p>
<p>​	通过TextListener监听TextFiled内容变化；</p>
<p>​	通过ItemListener监听Choice条目选中状态变化；</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031523086.png"
                      alt="image-20230403152350777" style="zoom:50%;" 
                >

<p><strong>演示代码一:</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ContainerAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ContainerEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.TextEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.TextListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListenerDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这里测试监听器&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个单行文本域</span></span><br><span class="line">        <span class="type">TextField</span> <span class="variable">tf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给文本域添加TextListener，监听内容的变化</span></span><br><span class="line">        tf.addTextListener(<span class="keyword">new</span> <span class="title class_">TextListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">textValueChanged</span><span class="params">(TextEvent e)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;当前内容：&quot;</span>+tf.getText());;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给frame注册ContainerListener监听器，监听容器中组件的添加</span></span><br><span class="line">        frame.addContainerListener(<span class="keyword">new</span> <span class="title class_">ContainerAdapter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">componentAdded</span><span class="params">(ContainerEvent e)</span> &#123;</span><br><span class="line">                <span class="type">Component</span> <span class="variable">child</span> <span class="operator">=</span> e.getChild();</span><br><span class="line">                System.out.println(<span class="string">&quot;容器中添加了新组件：&quot;</span>+child);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//添加tf到frame</span></span><br><span class="line">        frame.add(tf);</span><br><span class="line">        <span class="comment">//设置frame最佳大小并可见</span></span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p><strong>案例2：</strong></p>
<p>​	给Frame设置WindowListner，监听用户点击 X 的动作，如果用户点击X，则关闭当前窗口</p>
<p><strong>演示代码2：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListenerDemo2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这里测试WindowListener&quot;</span>);</span><br><span class="line"></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        frame.setBounds(<span class="number">200</span>,<span class="number">200</span>,<span class="number">500</span>,<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="1-7-菜单组件"><a href="#1-7-菜单组件" class="headerlink" title="1.7 菜单组件"></a>1.7 菜单组件</h2><p>​	前面讲解了如果构建GUI界面，其实就是把一些GUI的组件，按照一定的布局放入到容器中展示就可以了。在实际开发中，除了主界面，还有一类比较重要的内容就是菜单相关组件，可以通过菜单相关组件很方便的使用特定的功能，在AWT中，菜单相关组件的使用和之前学习的组件是一模一样的，只需要把菜单条、菜单、菜单项组合到一起，按照一定的布局，放入到容器中即可。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031524976.png"
                      alt="image-20230403152401704" style="zoom:50%;" 
                >



<p><strong>下表中给出常见的菜单相关组件：</strong></p>
<table>
<thead>
<tr>
<th>菜单组件名称</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>MenuBar</td>
<td>菜单条 ， 菜单的容器 。</td>
</tr>
<tr>
<td>Menu</td>
<td>菜单组件 ， 菜单项的容器 。 它也是Menultem的子类 ，所以可作为菜单项使用</td>
</tr>
<tr>
<td>PopupMenu</td>
<td>上下文菜单组件(右键菜单组件)</td>
</tr>
<tr>
<td>Menultem</td>
<td>菜单项组件 。</td>
</tr>
<tr>
<td>CheckboxMenuItem</td>
<td>复选框菜单项组件</td>
</tr>
</tbody></table>
<p><strong>下图是常见菜单相关组件集成体系图：</strong></p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031524493.png"
                      alt="image-20230403152413206"
                ></p>
<p><strong>菜单相关组件使用：</strong></p>
<p>1.准备菜单项组件，这些组件可以是MenuItem及其子类对象</p>
<p>2.准备菜单组件Menu或者PopupMenu(右击弹出子菜单)，把第一步中准备好的菜单项组件添加进来；</p>
<p>3.准备菜单条组件MenuBar，把第二步中准备好的菜单组件Menu添加进来；</p>
<p>4.把第三步中准备好的菜单条组件添加到窗口对象中显示。</p>
<p><strong>小技巧：</strong></p>
<p>1.如果要在某个菜单的菜单项之间添加分割线，那么只需要调用Menu的add（new MenuItem(-)）即可。</p>
<p><strong>2.如果要给某个菜单项关联快捷键功能，那么只需要在创建菜单项对象时设置即可，例如给菜单项关联 ctrl+shif+&#x2F; 快捷键，只需要：new MenuItem(“菜单项名字”,new MenuShortcut(KeyEvent.VK_Q,true);</strong></p>
<h4 id="案例1："><a href="#案例1：" class="headerlink" title="案例1："></a><strong>案例1：</strong></h4><p>​	使用awt中常用菜单组件，完成下图效果</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031524333.png"
                      alt="image-20230403152421046" style="zoom:50%;" 
                >



<p><strong>演示代码1：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这里测试菜单相关组件&quot;</span>);    <span class="comment">//创建窗口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">MenuBar</span> <span class="variable">menuBar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuBar</span>();   <span class="comment">//创建菜单条组件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Menu</span> <span class="variable">fileMenu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="string">&quot;文件&quot;</span>);    <span class="comment">//创建文件菜单组件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Menu</span> <span class="variable">editMenu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="string">&quot;编辑&quot;</span>);   <span class="comment">//  这也是menu</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">MenuItem</span> <span class="variable">newItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;新建&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">MenuItem</span> <span class="variable">saveItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;保存&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">MenuItem</span> <span class="variable">exitItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;退出&quot;</span>);    <span class="comment">//创建退出菜单项</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">CheckboxMenuItem</span> <span class="variable">autoWrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CheckboxMenuItem</span>(<span class="string">&quot;自动换行&quot;</span>);     <span class="comment">//创建自动换行选择框菜单项   这里是一个复选框</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">MenuItem</span> <span class="variable">copyItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;复制&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">MenuItem</span> <span class="variable">pasteItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;粘贴&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Menu</span> <span class="variable">formatMenu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="string">&quot;格式&quot;</span>);    <span class="comment">//   子菜单  所以这里不是 menuitem  而是menu</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">MenuItem</span> <span class="variable">commentItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;注释&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">MenuItem</span> <span class="variable">cancelItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;取消注释&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">TextArea</span> <span class="variable">ta</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextArea</span>(<span class="number">6</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//定义菜单事件监听器</span></span><br><span class="line">        <span class="type">ActionListener</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> e.getActionCommand();</span><br><span class="line">                ta.append(<span class="string">&quot;单击“&quot;</span>+command+<span class="string">&quot;菜单\n&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (command.equals(<span class="string">&quot;退出&quot;</span>))&#123;</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        commentItem.addActionListener(listener);  <span class="comment">//为注释菜单项和退出菜单项注册监听器</span></span><br><span class="line">        exitItem.addActionListener(listener);</span><br><span class="line"></span><br><span class="line">        fileMenu.add(newItem);   <span class="comment">//为文件菜单fileMenu添加菜单项</span></span><br><span class="line">        fileMenu.add(saveItem);</span><br><span class="line">        fileMenu.add(exitItem);</span><br><span class="line"></span><br><span class="line">        editMenu.add(autoWrap);  <span class="comment">//为编辑菜单editMenu添加菜单项</span></span><br><span class="line">        editMenu.add(copyItem);</span><br><span class="line">        editMenu.add(pasteItem);</span><br><span class="line"></span><br><span class="line">        formatMenu.add(commentItem);</span><br><span class="line">        formatMenu.add(cancelItem);  <span class="comment">//为格式化菜单formatMenu添加菜单项</span></span><br><span class="line"></span><br><span class="line">        editMenu.add(<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;-&quot;</span>));   <span class="comment">//将格式化菜单添加到编辑菜单中，作为二级菜单</span></span><br><span class="line">        editMenu.add(formatMenu);</span><br><span class="line"></span><br><span class="line">        menuBar.add(fileMenu);    <span class="comment">//将文件菜单和编辑菜单添加到菜单条中</span></span><br><span class="line">        menuBar.add(editMenu);</span><br><span class="line"></span><br><span class="line">        frame.setMenuBar(menuBar);    <span class="comment">//把菜单条设置到frame窗口上</span></span><br><span class="line"></span><br><span class="line">        frame.add(ta);    <span class="comment">//把文本域添加到frame中</span></span><br><span class="line"></span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Main</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="案例2："><a href="#案例2：" class="headerlink" title="案例2："></a><strong>案例2：</strong></h4><p>​	通过PopupMenu实现下图效果：</p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031524642.png"
                      alt="image-20230403152433345" style="zoom:50%;" 
                ></p>
<p><strong>实现思路：</strong></p>
<p>1.创建PopubMenu菜单组件；</p>
<p>2.创建多个MenuItem菜单项，并添加到PopupMenu中；</p>
<p>3.将PopupMenu添加到目标组件中；</p>
<p>4.为需要右击出现PopubMenu菜单的组件，注册鼠标监听事件，当监听到用户释放右键时，弹出菜单。</p>
<p><strong>演示代码2：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javafx.scene.layout.Pane;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">PopupMenu</span> <span class="variable">popmenu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PopupMenu</span>();  <span class="comment">// 添加 popupmenu</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">MenuItem</span> <span class="variable">commentItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;注释&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">MenuItem</span> <span class="variable">cancelItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;取消注释&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">MenuItem</span> <span class="variable">copyItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;复制&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">MenuItem</span> <span class="variable">pasteItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;粘贴&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">TextArea</span> <span class="variable">ta</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextArea</span>(<span class="string">&quot; i love china &quot;</span>, <span class="number">6</span>, <span class="number">30</span>);  <span class="comment">// 文本域</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Panel</span> <span class="variable">panel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>();   <span class="comment">// 定义panel</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        popmenu.add(commentItem);</span><br><span class="line">        popmenu.add(cancelItem);</span><br><span class="line">        popmenu.add(copyItem);</span><br><span class="line">        popmenu.add(pasteItem); <span class="comment">//  四个组件放进 右键菜单</span></span><br><span class="line"></span><br><span class="line">        panel.setPreferredSize(<span class="keyword">new</span> <span class="title class_">Dimension</span>(<span class="number">300</span>, <span class="number">300</span>));  <span class="comment">// 这里是   显示的设置panel的大小  ，也即右键菜单的大小</span></span><br><span class="line">        panel.add(popmenu);<span class="comment">//  右键菜单放入panel</span></span><br><span class="line"></span><br><span class="line">        panel.addMouseListener(<span class="keyword">new</span> <span class="title class_">MouseAdapter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseReleased</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> e.isPopupTrigger();<span class="comment">// 判断鼠标是否触发 popupmenu 操作</span></span><br><span class="line">                <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                    popmenu.show(panel, e.getX(), e.getY());   <span class="comment">// 即显示菜单</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        frame.add(ta);</span><br><span class="line">        frame.add(panel, BorderLayout.SOUTH);</span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Main</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="panel-setPreferredSize-new-Dimension-300-100-的解释"><a href="#panel-setPreferredSize-new-Dimension-300-100-的解释" class="headerlink" title="panel.setPreferredSize(new Dimension(300,100));的解释"></a>panel.setPreferredSize(new Dimension(300,100));的解释</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304110838217.png"
                      alt="image-20230411083846555"
                ></p>
<h2 id="1-8-绘图"><a href="#1-8-绘图" class="headerlink" title="1.8 绘图"></a>1.8 绘图</h2><p>​	很多程序如各种小游戏都需要在窗口中绘制各种图形，除此之外，即使在开发JavaEE项目时， 有 时候也必须”动态”地向客户 端生成各种图形、图表，比如 图形验证码、统计图等，这都需要利用AWT的绘图功能。</p>
<h3 id="1-8-1-组件绘图原理"><a href="#1-8-1-组件绘图原理" class="headerlink" title="1.8.1 组件绘图原理"></a>1.8.1 组件绘图原理</h3><p>​	之前我们已经学习过很多组件，例如Button、Frame、Checkbox等等，不同的组件，展示出来的图形都不一样，其实这些组件展示出来的图形，其本质就是用AWT的绘图来完成的。</p>
<p>​	在AWT中，真正提供绘图功能的是Graphics对象，那么Component组件和Graphics对象存在什么关系，才能让Component绘制自身图形呢？在Component类中，提供了下列三个方法来完成组件图形的绘制与刷新：</p>
<p>​	&#x3D;&#x3D;paint(Graphics g):绘制组件的外观；&#x3D;&#x3D;</p>
<p>&#x3D;&#x3D;update(Graphics g):内部调用paint方法，刷新组件外观；&#x3D;&#x3D;</p>
<p>&#x3D;&#x3D;repaint():调用update方法，刷新组件外观；&#x3D;&#x3D;</p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031524384.png"
                      alt="image-20230403152447021" style="zoom:50%;" 
                ></p>
<p>​	一般情况下，update和paint方法是由AWT系统负责调用，如果程序要希望系统重新绘制组件，可以调用repaint方法完成。</p>
<h3 id="1-8-2-Graphics类的使用"><a href="#1-8-2-Graphics类的使用" class="headerlink" title="1.8.2 Graphics类的使用"></a>1.8.2 Graphics类的使用</h3><p>​	实际生活中如果需要画图，首先我们得准备一张纸，然后在拿一支画笔，配和一些颜色，就可以在纸上画出来各种各样的图形，例如圆圈、矩形等等。</p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031525055.png"
                      alt="image-20230403152504673" style="zoom:50%;" 
                ></p>
<p>程序中绘图也一样，也需要画布，画笔，颜料等等。AWT中提供了Canvas类充当画布，提供了Graphics类来充当画笔，通过调用Graphics对象的setColor()方法可以给画笔设置颜色。</p>
<p><strong>画图的步骤：</strong></p>
<blockquote>
<p>1.自定义类，继承Canvas类，重写paint(Graphics g)方法完成画图；</p>
<p>2.在paint方法内部，真正开始画图之前调用Graphics对象的setColor()、setFont()等方法设置画笔的颜色、字体等属性；</p>
<p>3.调用Graphics画笔的drawXxx()方法开始画图。</p>
</blockquote>
<p>其实画图的核心就在于使用Graphics画笔在Canvas画布上画出什么颜色、什么样式的图形，所以核心在画笔上，下表中列出了Graphics类中常用的一些方法：</p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>方法功能</th>
</tr>
</thead>
<tbody><tr>
<td>setColor(Color c)</td>
<td>设置颜色</td>
</tr>
<tr>
<td>setFont(Font font)</td>
<td>设置字体</td>
</tr>
<tr>
<td>drawLine()</td>
<td>绘制直线</td>
</tr>
<tr>
<td>drawRect()</td>
<td>绘制矩形</td>
</tr>
<tr>
<td>drawRoundRect()</td>
<td>绘制圆角矩形</td>
</tr>
<tr>
<td>drawOval()</td>
<td>绘制椭圆形</td>
</tr>
<tr>
<td>drawPolygon()</td>
<td>绘制多边形</td>
</tr>
<tr>
<td>drawArc()</td>
<td>绘制圆弧</td>
</tr>
<tr>
<td>drawPolyline()</td>
<td>绘制折线</td>
</tr>
<tr>
<td>fillRect()</td>
<td>填充矩形区域</td>
</tr>
<tr>
<td>fillRoundRect()</td>
<td>填充圆角矩形区域</td>
</tr>
<tr>
<td>fillOval()</td>
<td>填充椭圆区域</td>
</tr>
<tr>
<td>fillPolygon()</td>
<td>填充多边形区域</td>
</tr>
<tr>
<td>fillArc()</td>
<td>填充圆弧对应的扇形区域</td>
</tr>
<tr>
<td>drawImage()</td>
<td>绘制位图</td>
</tr>
</tbody></table>
<p><strong>案例：</strong></p>
<p>​	使用AWT绘图API，完成下图效果</p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031525229.png"
                      alt="image-20230403152514905" style="zoom:50%;" 
                ></p>
<p><strong>演示代码：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleDraw</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String RECT_SHAPE=<span class="string">&quot;rect&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String OVAL_SHAPE=<span class="string">&quot;oval&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这里测试绘图&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Button</span> <span class="variable">drawRectBtn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;绘制矩形&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Button</span> <span class="variable">drawOvalBtn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;绘制椭圆&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String shape=<span class="string">&quot;&quot;</span>;    <span class="comment">//用来保存当前用户需要绘制什么样的图形</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">MyCanvas</span> <span class="variable">drawArea</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCanvas</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        drawRectBtn.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;        <span class="comment">//为按钮添加点击事件</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                shape = RECT_SHAPE;</span><br><span class="line">                drawArea.repaint();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        drawOvalBtn.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                shape = OVAL_SHAPE;</span><br><span class="line">                drawArea.repaint();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Panel</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>();        <span class="comment">//定义一个Panel，装载两个按钮</span></span><br><span class="line">        p.add(drawRectBtn);</span><br><span class="line">        p.add(drawOvalBtn);</span><br><span class="line"></span><br><span class="line">        frame.add(p,BorderLayout.SOUTH);        <span class="comment">//把panel添加到frame底部</span></span><br><span class="line"></span><br><span class="line">              drawArea.setPreferredSize(<span class="keyword">new</span> <span class="title class_">Dimension</span>(<span class="number">300</span>,<span class="number">200</span>));         <span class="comment">//设置画布的大小</span></span><br><span class="line">        <span class="comment">//把画布添加到frame中</span></span><br><span class="line"></span><br><span class="line">        frame.add(drawArea);</span><br><span class="line"></span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">SimpleDraw</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.自定义类，继承Canvas类，重写paint方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MyCanvas</span> <span class="keyword">extends</span> <span class="title class_">Canvas</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">            <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (shape.equals(RECT_SHAPE))&#123;</span><br><span class="line">                <span class="comment">//绘制矩形</span></span><br><span class="line">                g.setColor(Color.BLACK);</span><br><span class="line">                g.drawRect(r.nextInt(<span class="number">200</span>),r.nextInt(<span class="number">100</span>),<span class="number">40</span>,<span class="number">60</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(shape.equals(OVAL_SHAPE))&#123;</span><br><span class="line">                <span class="comment">//绘制椭圆</span></span><br><span class="line">                g.setColor(Color.RED);</span><br><span class="line">                g.drawOval(r.nextInt(<span class="number">200</span>),r.nextInt(<span class="number">100</span>),<span class="number">60</span>,<span class="number">40</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>​	</p>
<p>​	Java也可用于开发一些动画。所谓动画，就是间隔一定的时间(通常小于0 . 1秒 )重新绘制新的图像，两次绘制的图像之间差异较小，肉眼看起来就成了所谓的动画 。</p>
<p>​	为了实现间隔一定的时间就重新调用组件的 repaint()方法，可以借助于 Swing 提供的Timer类，Timer类是一个定时器， 它有如下一个构造器 ：<br>Timer(int delay, ActionListener listener): 每间隔 delay 毫秒，系统自动触发 ActionListener 监听器里的事件处理器方法，在方法内部我们就可以调用组件的repaint方法，完成组件重绘。</p>
<p><strong>案例2：</strong></p>
<p>​	使用AWT画图技术及Timer定时器，完成下图中弹球小游戏。</p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031525116.png"
                      alt="image-20230403152528775" style="zoom:50%;" 
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031525078.png"
                      style="zoom:50%;" 
                ></p>
<p><strong>演示代码2：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PinBall</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//桌面宽度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TABLE_WIDTH</span> <span class="operator">=</span> <span class="number">300</span>;</span><br><span class="line">    <span class="comment">//桌面高度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TABLE_HEIGHT</span> <span class="operator">=</span> <span class="number">400</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//球拍的高度和宽度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RACKET_WIDTH</span> <span class="operator">=</span> <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RACKET_HEIGHT</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//小球的大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BALL_SIZE</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义小球纵向运行速度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ySpeed</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//小球横向运行速度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">xSpeed</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义小球的初始坐标</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ballX</span> <span class="operator">=</span> <span class="number">120</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ballY</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义球拍的初始坐标，x坐标会发生变化，y坐标不会发生变化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">rackeX</span> <span class="operator">=</span> <span class="number">120</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RACKET_Y</span> <span class="operator">=</span> <span class="number">340</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明定时器</span></span><br><span class="line">    <span class="keyword">private</span> Timer timer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义游戏结束的标记</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">isLose</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明一个桌面</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">MyCanvas</span> <span class="variable">tableArea</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCanvas</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建窗口对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;弹球游戏&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//设置桌面区域的最佳大小</span></span><br><span class="line">        tableArea.setPreferredSize(<span class="keyword">new</span> <span class="title class_">Dimension</span>(TABLE_WIDTH,TABLE_HEIGHT));</span><br><span class="line">        <span class="comment">//把桌面添加到frame中</span></span><br><span class="line">        frame.add(tableArea);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义键盘监听器</span></span><br><span class="line">        <span class="type">KeyListener</span> <span class="variable">keyListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KeyAdapter</span>()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//监听键盘 ←  → 按下操作，当指定的键按下时，球拍的水平坐标分别会增加或者减少</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyPressed</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">keyCode</span> <span class="operator">=</span> e.getKeyCode();</span><br><span class="line">                <span class="keyword">if</span> (keyCode==KeyEvent.VK_LEFT)&#123;<span class="comment">//←</span></span><br><span class="line">                    <span class="comment">//没有到左边界，可以继续向左移动</span></span><br><span class="line">                    <span class="keyword">if</span> (rackeX&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                        rackeX-=<span class="number">10</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (keyCode==KeyEvent.VK_RIGHT)&#123;<span class="comment">//→</span></span><br><span class="line">                    <span class="comment">//没有到右边界，可以继续向右移动</span></span><br><span class="line">                    <span class="keyword">if</span> (rackeX&lt;TABLE_WIDTH-RACKET_WIDTH)&#123;</span><br><span class="line">                        rackeX+=<span class="number">10</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为窗口和tableArea分别添加键盘事件</span></span><br><span class="line">        frame.addKeyListener(keyListener);</span><br><span class="line">        tableArea.addKeyListener(keyListener);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义ActionListener，用来监听小球的变化情况</span></span><br><span class="line">        <span class="type">ActionListener</span> <span class="variable">timerTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="comment">//小球碰到左右边框</span></span><br><span class="line">                <span class="keyword">if</span> (ballX&lt;=<span class="number">0</span> || ballX&gt;=TABLE_WIDTH-BALL_SIZE)&#123;</span><br><span class="line">                    xSpeed=-xSpeed;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//小球的高度超出了球拍的位置，且横向不在球拍范围内，则游戏结束</span></span><br><span class="line">                <span class="keyword">if</span> (ballY &gt; RACKET_Y &amp;&amp; (ballX&lt;rackeX || ballX&gt;rackeX+RACKET_WIDTH))&#123;</span><br><span class="line">                    <span class="comment">//结束定时器</span></span><br><span class="line">                    timer.stop();</span><br><span class="line">                    <span class="comment">//把游戏结束的标记设置为true</span></span><br><span class="line">                    isLose = <span class="literal">true</span>;</span><br><span class="line">                    <span class="comment">//重绘界面</span></span><br><span class="line">                    tableArea.repaint();</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//如果小球横向在球拍范围内，且到达球拍位置或者到达顶端位置，则小球反弹</span></span><br><span class="line">                <span class="keyword">if</span> (ballY&lt;=<span class="number">0</span> || (ballY&gt;=RACKET_Y-BALL_SIZE &amp;&amp; ballX&gt;=rackeX &amp;&amp; ballX&lt;=rackeX+RACKET_WIDTH))&#123;<span class="comment">//上面的部分就是击打到了上边界，或者下方的拍，直接进行yspeed翻转</span></span><br><span class="line">                    ySpeed=-ySpeed;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//更新小球的坐标</span></span><br><span class="line">                ballX+=xSpeed;</span><br><span class="line">                ballY+=ySpeed;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//重绘桌面</span></span><br><span class="line">                tableArea.repaint();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置定时器，定时任务就是timerTask</span></span><br><span class="line">        timer = <span class="keyword">new</span> <span class="title class_">Timer</span>(<span class="number">100</span>,timerTask);</span><br><span class="line">        timer.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置frame最佳大小，并可视</span></span><br><span class="line"></span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">PinBall</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MyCanvas</span> <span class="keyword">extends</span> <span class="title class_">Canvas</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重写paint方法，实现绘图</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">            <span class="comment">//判断游戏是否结束</span></span><br><span class="line">            <span class="keyword">if</span> (isLose)&#123;<span class="comment">//结束</span></span><br><span class="line">                g.setColor(Color.BLUE);</span><br><span class="line">                g.setFont(<span class="keyword">new</span> <span class="title class_">Font</span>(<span class="string">&quot;Times&quot;</span>,Font.BOLD,<span class="number">30</span>));</span><br><span class="line">                g.drawString(<span class="string">&quot;游戏结束！&quot;</span>,<span class="number">50</span>,<span class="number">200</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">//没有结束</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//设置颜色并绘制小球</span></span><br><span class="line">                g.setColor(Color.RED);</span><br><span class="line">                g.fillOval(ballX,ballY,BALL_SIZE,BALL_SIZE);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//设置颜色并绘制球拍</span></span><br><span class="line">                g.setColor(Color.PINK);</span><br><span class="line">                g.fillRect(rackeX,RACKET_Y,RACKET_WIDTH,RACKET_HEIGHT);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="1-8-3-处理位图"><a href="#1-8-3-处理位图" class="headerlink" title="1.8.3 处理位图"></a>1.8.3 处理位图</h3><p>​	如果仅仅绘制一些简单的几何图形，程序的图形效果依然比较单调 。 AWT 也允许在组件上绘制位图， **&#x3D;&#x3D;Graphics 提供了 drawlmage() 方法用于绘制位图&#x3D;&#x3D;**，该方法需要一个Image参数一一代表位图，通过该方法就可 以绘制出指定的位图 。</p>
<p><strong>位图使用步骤：</strong></p>
<p>1.创建Image的子类对象BufferedImage(int width,int height,int ImageType),创建时需要指定位图的宽高及类型属性；此时相当于在内存中生成了一张图片；</p>
<p>2.调用BufferedImage对象的getGraphics()方法获取画笔，此时就可以往内存中的这张图片上绘图了，绘图的方法和之前学习的一模一样；</p>
<p>3.调用组件的drawImage()方法，一次性的内存中的图片BufferedImage绘制到特定的组件上。</p>
<p><strong>使用位图绘制组件的好处：</strong></p>
<p>使用位图来绘制组件，相当于实现了图的缓冲区，此时绘图时没有直接把图形绘制到组件上，而是先绘制到内存中的BufferedImage上，等全部绘制完毕，再一次性的图像显示到组件上即可，这样用户的体验会好一些。</p>
<p><strong>案例：</strong></p>
<p>​	通过BufferedImage实现一个简单的手绘程序：通过鼠标可以在窗口中画图。</p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031525439.png"
                      alt="image-20230403152558080" style="zoom:50%;" 
                ></p>
<p><strong>演示代码：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HandDraw</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义画图区的宽高</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">AREA_WIDTH</span> <span class="operator">=</span> <span class="number">500</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">AREA_HEIGHT</span> <span class="operator">=</span> <span class="number">400</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义变量，保存上一次鼠标拖动时，鼠标的坐标</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">preX</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">preY</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个右键菜单，用于设置画笔的颜色</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">PopupMenu</span> <span class="variable">colorMenu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PopupMenu</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">MenuItem</span> <span class="variable">redItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;红色&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">MenuItem</span> <span class="variable">greenItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;绿色&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">MenuItem</span> <span class="variable">blueItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;蓝色&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个BufferedImage对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedImage</span>(AREA_WIDTH,AREA_HEIGHT,BufferedImage.TYPE_INT_RGB);</span><br><span class="line">    <span class="comment">//获取BufferedImage对象关联的画笔</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Graphics</span> <span class="variable">g</span> <span class="operator">=</span> image.getGraphics();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义窗口对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;简单手绘程序&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义画布对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Canvas</span> <span class="variable">drawArea</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">Canvas</span>()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">            <span class="comment">//把位图image绘制到0,0坐标点</span></span><br><span class="line">            g.drawImage(image,<span class="number">0</span>,<span class="number">0</span>,<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个Color对象，用来保存用户设置的画笔颜色,默认为黑色</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Color</span> <span class="variable">forceColor</span> <span class="operator">=</span> Color.BLACK;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//定义颜色菜单项单击监听器</span></span><br><span class="line">        <span class="type">ActionListener</span> <span class="variable">menuListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> e.getActionCommand();</span><br><span class="line">                <span class="keyword">switch</span> (command)&#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;红色&quot;</span>:</span><br><span class="line">                        forceColor=Color.RED;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;绿色&quot;</span>:</span><br><span class="line">                        forceColor = Color.GREEN;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;蓝色&quot;</span>:</span><br><span class="line">                        forceColor = Color.BLUE;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为三个菜单项添加点击事件</span></span><br><span class="line">        redItem.addActionListener(menuListener);</span><br><span class="line">        greenItem.addActionListener(menuListener);</span><br><span class="line">        blueItem.addActionListener(menuListener);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把菜单项添加到右键菜单中</span></span><br><span class="line">        colorMenu.add(redItem);</span><br><span class="line">        colorMenu.add(greenItem);</span><br><span class="line">        colorMenu.add(blueItem);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把右键菜单添加到绘图区域drawArea</span></span><br><span class="line">        drawArea.add(colorMenu);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将iamge图片背景设置为白色</span></span><br><span class="line">        g.fillRect(<span class="number">0</span>,<span class="number">0</span>,AREA_WIDTH,AREA_HEIGHT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置绘图区域drawArea的大小</span></span><br><span class="line">        drawArea.setPreferredSize(<span class="keyword">new</span> <span class="title class_">Dimension</span>(AREA_WIDTH,AREA_HEIGHT));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绘图区域drawArea设置鼠标移动监听器</span></span><br><span class="line">        drawArea.addMouseMotionListener(<span class="keyword">new</span> <span class="title class_">MouseMotionAdapter</span>() &#123;</span><br><span class="line">            <span class="comment">//用于绘制图像</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseDragged</span><span class="params">(MouseEvent e)</span> &#123;<span class="comment">//按下鼠标键并拖动会触发</span></span><br><span class="line">                <span class="comment">//如果上次鼠标的坐标在绘图区域，才开始绘图</span></span><br><span class="line">                <span class="keyword">if</span> (preX&gt;<span class="number">0</span> &amp;&amp; preY&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">//设置当前选中的画笔颜色</span></span><br><span class="line">                    g.setColor(forceColor);</span><br><span class="line">                    <span class="comment">//绘制线条，需要有两组坐标，一组是上一次鼠标拖动鼠标时的坐标，一组是现在鼠标的坐标</span></span><br><span class="line">                    g.drawLine(preX,preY,e.getX(),e.getY());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//更新preX和preY</span></span><br><span class="line">                preX = e.getX();</span><br><span class="line">                preY = e.getY();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//重新绘制drawArea组件</span></span><br><span class="line">                drawArea.repaint();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        drawArea.addMouseListener(<span class="keyword">new</span> <span class="title class_">MouseAdapter</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//用于弹出右键菜单</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseReleased</span><span class="params">(MouseEvent e)</span> &#123;<span class="comment">//松开鼠标键会触发</span></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">popupTrigger</span> <span class="operator">=</span> e.isPopupTrigger();</span><br><span class="line">                <span class="keyword">if</span> (popupTrigger)&#123;</span><br><span class="line">                    <span class="comment">//把colorMenu显示到drawArea画图区域，并跟随鼠标显示</span></span><br><span class="line">                    colorMenu.show(drawArea,e.getX(),e.getY());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//当鼠标松开时，把preX和preY重置为-1</span></span><br><span class="line">                preX = -<span class="number">1</span>;</span><br><span class="line">                preY = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把drawArea添加到frame中</span></span><br><span class="line">        frame.add(drawArea);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置frame最佳大小并可见</span></span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HandDraw</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="1-8-4-ImageIO的使用"><a href="#1-8-4-ImageIO的使用" class="headerlink" title="1.8.4  ImageIO的使用"></a>1.8.4  ImageIO的使用</h3><p>在实际生活中，很多软件都支持打开本地磁盘已经存在的图片，然后进行编辑，编辑完毕后，再重新保存到本地磁盘。如果使用AWT要完成这样的功能，那么需要使用到ImageIO这个类，可以操作本地磁盘的图片文件。</p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>方法功能</th>
</tr>
</thead>
<tbody><tr>
<td>static BufferedImage read(File input)</td>
<td>读取本地磁盘图片文件</td>
</tr>
<tr>
<td>static BufferedImage read(InputStream input)</td>
<td>读取本地磁盘图片文件</td>
</tr>
<tr>
<td>static boolean write(RenderedImage im, String formatName, File output)</td>
<td>往本地磁盘中输出图片文件</td>
</tr>
</tbody></table>
<p><strong>案例：</strong></p>
<p>​	编写图片查看程序,支持另存操作</p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031526727.png"
                      alt="image-20230403152614069" style="zoom:50%;" 
                ></p>
<p><strong>演示代码：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadAndSaveImage</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;图片查看器&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BufferedImage image;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MyCanvas</span>  <span class="keyword">extends</span> <span class="title class_">Canvas</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (image!=<span class="literal">null</span>)&#123;</span><br><span class="line">                g.drawImage(image,<span class="number">0</span>,<span class="number">0</span>,image.getWidth(),image.getHeight(),<span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">MyCanvas</span> <span class="variable">imageComponent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCanvas</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置菜单项</span></span><br><span class="line">        <span class="type">MenuBar</span> <span class="variable">mb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuBar</span>();</span><br><span class="line">        <span class="type">Menu</span> <span class="variable">menu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="string">&quot;文件&quot;</span>);</span><br><span class="line">        <span class="type">MenuItem</span> <span class="variable">openItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;打开&quot;</span>);</span><br><span class="line">        <span class="type">MenuItem</span> <span class="variable">saveItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;另存为&quot;</span>);</span><br><span class="line"></span><br><span class="line">        openItem.addActionListener(e -&gt; &#123;</span><br><span class="line">            <span class="comment">//弹出对话框，选择本地图片</span></span><br><span class="line">            <span class="type">FileDialog</span> <span class="variable">oDialog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileDialog</span>(frame);</span><br><span class="line">            oDialog.setVisible(<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//读取用户选择的图片</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">dir</span> <span class="operator">=</span> oDialog.getDirectory();</span><br><span class="line">            <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> oDialog.getFile();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                image = ImageIO.read(<span class="keyword">new</span> <span class="title class_">File</span>(dir,file));</span><br><span class="line"></span><br><span class="line">                imageComponent.repaint();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        saveItem.addActionListener(e -&gt; &#123;</span><br><span class="line">            <span class="comment">//弹出对话框，另存为</span></span><br><span class="line">            <span class="type">FileDialog</span> <span class="variable">sDialog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileDialog</span>(frame,<span class="string">&quot;保存图片&quot;</span>,FileDialog.SAVE);</span><br><span class="line">            sDialog.setVisible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">dir</span> <span class="operator">=</span> sDialog.getDirectory();</span><br><span class="line">            <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> sDialog.getFile();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ImageIO.write(image,<span class="string">&quot;JPEG&quot;</span>,<span class="keyword">new</span> <span class="title class_">File</span>(dir,file));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        mb.add(menu);</span><br><span class="line">        menu.add(openItem);</span><br><span class="line">        menu.add(saveItem);</span><br><span class="line"></span><br><span class="line">        frame.setMenuBar(mb);</span><br><span class="line">        frame.add(imageComponent);</span><br><span class="line"></span><br><span class="line">        frame.setBounds(<span class="number">200</span>,<span class="number">200</span>,<span class="number">800</span>,<span class="number">600</span>);</span><br><span class="line"></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ReadAndSaveImage</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="1-8-5-五子棋"><a href="#1-8-5-五子棋" class="headerlink" title="1.8.5 五子棋"></a>1.8.5 五子棋</h3><p>接下来，我们使用之前学习的绘图技术，做一个五子棋的游戏。</p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202304031526536.png"
                      style="zoom:50%;" 
                ></p>
<p><strong>演示代码：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Gobang</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义三个BufferedImage，分别代表棋盘图、黑子图、白子图</span></span><br><span class="line">    <span class="keyword">private</span> BufferedImage table;</span><br><span class="line">    <span class="keyword">private</span> BufferedImage black;</span><br><span class="line">    <span class="keyword">private</span> BufferedImage white;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个BufferedImage，代表当鼠标移动时将要下子的选择框</span></span><br><span class="line">    <span class="keyword">private</span> BufferedImage selected;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义棋盘的宽高，这里的定义尺寸和给定的board.jpg图片的尺寸一致因为棋盘背景是通过图片加载的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TABLE_WIDTH</span> <span class="operator">=</span> <span class="number">535</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TABLE_HEIGHT</span> <span class="operator">=</span> <span class="number">536</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义棋盘中，每行和每列可下子的数目，这个数目跟给定的board.jpg中的数目是一致的，都为15</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span>  <span class="variable">BOARD_SIZE</span> <span class="operator">=</span> <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义每个棋子所占棋盘总宽度的大小比率；每个棋子所占宽度 535/15=35</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RATE</span> <span class="operator">=</span> TABLE_WIDTH/BOARD_SIZE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义棋盘有效区域与背景图坐标之间的偏移值，x坐标右移5个像素，y坐标下移6个像素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">X_OFFSET</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">Y_OFFSET</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        定义一个二维数组充当棋盘上每个位置处的棋子；</span></span><br><span class="line"><span class="comment">        该数组的索引与该棋子在棋盘上的坐标需要有一个对应关系：</span></span><br><span class="line"><span class="comment">            例如： 索引[2][3]处的棋子，对一个的真实绘制坐标应该是：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                xpos = 2*RATE+X_OFFSET=75;</span></span><br><span class="line"><span class="comment">                ypos = 3*RATE+Y_OFFSET=111;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[][] board = <span class="keyword">new</span> <span class="title class_">int</span>[BOARD_SIZE][BOARD_SIZE];<span class="comment">//如果存储0，代表没有棋子，如果存储1，代表黑棋，如果存储2，代表白棋</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义五子棋游戏窗口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">JFrame</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;五子棋游戏&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义五子棋游戏棋盘对应的Canvas组件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">ChessBoard</span> <span class="keyword">extends</span> <span class="title class_">JPanel</span>&#123;</span><br><span class="line">        <span class="comment">//重写paint方法，实现绘画</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">            <span class="comment">//绘制五子棋棋盘</span></span><br><span class="line">            g.drawImage(table,<span class="number">0</span>,<span class="number">0</span>,<span class="literal">null</span>);</span><br><span class="line">            <span class="comment">//绘制选中点的红框</span></span><br><span class="line">            <span class="keyword">if</span> (selectX&gt;<span class="number">0</span> &amp;&amp; selectY&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                g.drawImage(selected,selectX*RATE+X_OFFSET,selectY*RATE+Y_OFFSET,<span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//遍历数组，绘制棋子</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; BOARD_SIZE; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; BOARD_SIZE; j++) &#123;</span><br><span class="line">                    <span class="comment">//绘制黑棋</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (board[i][j]==<span class="number">1</span>)&#123;</span><br><span class="line">                        g.drawImage(black,i*RATE+X_OFFSET,j*RATE+Y_OFFSET,<span class="literal">null</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//绘制白棋</span></span><br><span class="line">                    <span class="keyword">if</span> (board[i][j]==<span class="number">2</span>)&#123;</span><br><span class="line">                        g.drawImage(white,i*RATE+X_OFFSET,j*RATE+Y_OFFSET,<span class="literal">null</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ChessBoard</span> <span class="variable">chessBoard</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChessBoard</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义变量，记录当前选中的坐标点对应的boad数组中对应的棋子索引；</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">selectX</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">selectY</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个变量，记录当前用户选择下的是白棋还是黑棋还是清除，清除：0，黑棋：1，白棋：2；</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">chessCategory</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义Panel,放置点击按钮</span></span><br><span class="line">    <span class="type">Panel</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Button</span> <span class="variable">whiteBtn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;白棋&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Button</span> <span class="variable">blackBtn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;黑棋&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Button</span> <span class="variable">clearBtn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;删除&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateBtnColor</span><span class="params">(Color whiteBtnColor,Color blackBtnColor,Color clearBtnColor)</span>&#123;</span><br><span class="line">        whiteBtn.setBackground(whiteBtnColor);</span><br><span class="line">        blackBtn.setBackground(blackBtnColor);</span><br><span class="line">        clearBtn.setBackground(clearBtnColor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化按钮的颜色</span></span><br><span class="line">        updateBtnColor(Color.LIGHT_GRAY,Color.GREEN,Color.LIGHT_GRAY);</span><br><span class="line">        whiteBtn.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                chessCategory = <span class="number">2</span>;</span><br><span class="line">                updateBtnColor(Color.GREEN,Color.LIGHT_GRAY,Color.LIGHT_GRAY);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        blackBtn.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                chessCategory=<span class="number">1</span>;</span><br><span class="line">                updateBtnColor(Color.LIGHT_GRAY,Color.GREEN,Color.LIGHT_GRAY);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        clearBtn.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                chessCategory=<span class="number">0</span>;</span><br><span class="line">                updateBtnColor(Color.LIGHT_GRAY,Color.LIGHT_GRAY,Color.GREEN);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        p.add(whiteBtn);</span><br><span class="line">        p.add(blackBtn);</span><br><span class="line">        p.add(clearBtn);</span><br><span class="line">        <span class="comment">//把Panel放入到frame底部</span></span><br><span class="line">        f.add(p,BorderLayout.SOUTH);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化黑棋，白棋，棋盘,选中框</span></span><br><span class="line">        table = ImageIO.read(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;awt_demo\\board.jpg&quot;</span>));</span><br><span class="line">        black = ImageIO.read(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;awt_demo\\black.gif&quot;</span>));</span><br><span class="line">        white = ImageIO.read(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;awt_demo\\white.gif&quot;</span>));</span><br><span class="line">        selected = ImageIO.read(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;awt_demo\\selected.gif&quot;</span>));</span><br><span class="line">        <span class="comment">//初始化board数组，默认情况下，所有位置处都没有棋子</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; BOARD_SIZE; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; BOARD_SIZE; j++) &#123;</span><br><span class="line">                board[i][j]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置chessBoard的最佳大小</span></span><br><span class="line">        chessBoard.setPreferredSize(<span class="keyword">new</span> <span class="title class_">Dimension</span>(TABLE_WIDTH,TABLE_HEIGHT));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给chessBoard注册鼠标监听器</span></span><br><span class="line">        chessBoard.addMouseListener(<span class="keyword">new</span> <span class="title class_">MouseAdapter</span>() &#123;</span><br><span class="line">            <span class="comment">//鼠标单击会触发</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseClicked</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line">                <span class="comment">//将用户鼠标的坐标，转换成棋子的坐标</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">xPos</span> <span class="operator">=</span> (e.getX()-X_OFFSET)/RATE;</span><br><span class="line">                <span class="type">int</span> <span class="variable">yPos</span> <span class="operator">=</span> (e.getY()-Y_OFFSET)/RATE;</span><br><span class="line"></span><br><span class="line">                board[xPos][yPos] = chessCategory;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//重绘chessBoard</span></span><br><span class="line">                chessBoard.repaint();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//当鼠标退出棋盘区域后，复位选中坐标,重绘chessBoard，要保证红色选中框显示正确</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseExited</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line">                selectX=-<span class="number">1</span>;</span><br><span class="line">                selectY=-<span class="number">1</span>;</span><br><span class="line">                chessBoard.repaint();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给chessBoard注册鼠标移动监听器</span></span><br><span class="line">        chessBoard.addMouseMotionListener(<span class="keyword">new</span> <span class="title class_">MouseMotionAdapter</span>() &#123;</span><br><span class="line">            <span class="comment">//当鼠标移动时，修正selectX和selectY，重绘chessBoard，要保证红色选中框显示正确</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseMoved</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line">                <span class="comment">//将鼠标的坐标，转换成棋子的索引</span></span><br><span class="line">                selectX = (e.getX()-X_OFFSET)/RATE;</span><br><span class="line">                selectY = (e.getY()-Y_OFFSET)/RATE;</span><br><span class="line">                chessBoard.repaint();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把chessBoard添加到Frame中</span></span><br><span class="line">        f.add(chessBoard);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置frame最佳大小并可见</span></span><br><span class="line">        f.pack();</span><br><span class="line">        f.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Gobang</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>





<h1 id="Swing-编程"><a href="#Swing-编程" class="headerlink" title="Swing 编程"></a>Swing 编程</h1><h2 id="2-1-Swing概述"><a href="#2-1-Swing概述" class="headerlink" title="2.1 Swing概述"></a>2.1 Swing概述</h2><p>​	前一章己经介绍过AWT和Swing 的关系 ， 因此不难知道 : 实际使用 Java 开发图形界面程序时 ，很少使用 AWT 组件，绝大部分时候都是用 Swing 组件开发的 。 Swing是由100%纯 Java实现的，不再依赖于本地平台的 GUI， 因此可以在所有平台上都保持相同的界面外观。独立于本地平台的Swing组件被称为<strong>轻量级组件</strong>;而依赖于本地平台的 AWT 组件被称为<strong>重量级组件</strong>。<br>​	由于 Swing 的所有组件完全采用 Java 实现，不再调用本地平台的 GUI，所以导致 Swing 图形界面的显示速度要比 AWT 图形界面的显示速度慢一些，但相对于快速发展的硬件设施而言，这种微小的速度差别无妨大碍。</p>
<p><strong>使用Swing的优势:</strong><br>    1. Swing 组件不再依赖于本地平台的 GUI，无须采用各种平台的 GUI 交集 ，因此 Swing 提供了大量图形界面组件 ， 远远超出了 AWT 所提供的图形界面组件集。<br>    2. Swing 组件不再依赖于本地平台 GUI ，因此不会产生与平台 相关的 bug 。</p>
<p>​	3. Swing 组件在各种平台上运行时可以保证具有相同的图形界面外观。</p>
<p>​	Swing 提供的这些优势，让 Java 图形界面程序真正实现了 “ Write Once, Run Anywhere” 的 目标。</p>
<p><strong>Swing的特征：</strong><br>     1. Swing 组件采用 MVC(Model-View-Controller， 即模型一视图一控制器)设计模式：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">		模型(Model): 用于维护组件的各种状态；</span><br><span class="line"></span><br><span class="line">	视图(View): 是组件的可视化表现；</span><br><span class="line">	</span><br><span class="line">	控制器(Controller):用于控制对于各种事件、组件做出响应 。</span><br><span class="line">	</span><br><span class="line">	当模型发生改变时，它会通知所有依赖它的视图，视图会根据模型数据来更新自己。Swing使用UI代理来包装视图和控制器， 还有一个模型对象来维护该组件的状态。例如，按钮JButton有一个维护其状态信息的模型ButtonModel对象 。 Swing组件的模型是自动设置的，因此一般都使用JButton，而无须关心ButtonModel对象。</span><br><span class="line"></span><br><span class="line">2. Swing在不同的平台上表现一致，并且有能力提供本地平台不支持的显示外观 。由于 Swing采用 MVC 模式来维护各组件，所以 当组件的外观被改变时，对组件的状态信息(由模型维护)没有任何影响 。因 此，Swing可以使用插拔式外观感觉 (Pluggable Look And Feel, PLAF)来控制组件外观，使得 Swing图形界面在同一个平台上运行时能拥有不同的外观，用户可以选择自己喜欢的外观 。相比之下，在 AWT 图形界面中，由于控制组件外观的对等类与具体平台相关 ，因此 AWT 组件总是具有与本地平台相同的外观 。    </span><br></pre></td></tr></table></figure></div>



<h2 id="3-2-Swing基本组件的用法"><a href="#3-2-Swing基本组件的用法" class="headerlink" title="3.2 Swing基本组件的用法"></a>3.2 Swing基本组件的用法</h2><h3 id="3-2-1-Swing组件层次"><a href="#3-2-1-Swing组件层次" class="headerlink" title="3.2.1 Swing组件层次"></a>3.2.1 Swing组件层次</h3><p><strong>Swing组件继承体系图：</strong></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="C:\Users\Forming\AppData\Roaming\Typora\typora-user-images\image-20230905104427899.png"
                      alt="image-20230905104427899" style="zoom: 33%;" 
                >

<p>​	大部分Swing 组件都是 JComponent抽象类的直接或间接子类(并不是全部的 Swing 组件)，JComponent 类定义了所有子类组件的通用方法 ，JComponent 类是 AWT 里 java.awt. Container 类的子类 ，这也是 AWT 和 Swing 的联系之一。 绝大部分 Swing 组件类继承了 Container类，所以Swing 组件都可作为 容器使用 ( JFrame继承了Frame 类)。</p>
<p><strong>Swing组件和AWT组件的对应关系：</strong></p>
<p>​	<strong>大部分情况下，只需要在AWT组件的名称前面加个J，</strong>就可以得到其对应的Swing组件名称，但有几个例外：</p>
<p>​	</p>
<ol>
<li>JComboBox: 对应于 AWT 里的 Choice 组件，但比 Choice 组件功能更丰富 。</li>
<li>JFileChooser: 对应于 AWT 里的 FileDialog 组件 。</li>
<li>JScrollBar: 对应于 AWT 里的 Scrollbar 组件，注意两个组件类名中 b 字母的大小写差别。</li>
<li>JCheckBox : 对应于 AWT 里的 Checkbox 组件， 注意两个组件类名中 b 字母的大小 写差别 。</li>
<li>JCheckBoxMenultem: 对应于 AWT 里的 CheckboxMenuItem 组件，注意两个组件类名中 b字母的大小写差别。</li>
</ol>
<p><strong>Swing组件按照功能来分类：</strong></p>
<p>​	1. 顶层容器: JFrame、JApplet、JDialog 和 JWindow 。<br>​	2. 中间容器: JPanel 、 JScrollPane 、 JSplitPane 、 JToolBar 等 。<br>​	3. 特殊容器:在用户界面上具有特殊作用的中间容器，如 JIntemalFrame 、 JRootPane 、 JLayeredPane和 JDestopPane 等 。<br>​	4. 基本组件 : 实现人机交互的组件，如 JButton、 JComboBox 、 JList、 JMenu、 JSlider 等 。<br>​	5. 不可编辑信息的显示组件:向用户显示不可编辑信息的组件，如JLabel 、 JProgressBar 和 JToolTip等。<br>​	6. 可编辑信息的显示组件:向用户显示能被编辑的格式化信息的组件，如 JTable 、 JTextArea 和JTextField 等 。<br>​	7. 特殊对话框组件:可以直接产生特殊对话框的组件 ， 如 JColorChooser 和 JFileChooser 等。</p>
<h3 id="3-2-2-AWT组件的Swing实现"><a href="#3-2-2-AWT组件的Swing实现" class="headerlink" title="3.2.2 AWT组件的Swing实现"></a>3.2.2 AWT组件的Swing实现</h3><p>​	Swing 为除 Canvas 之外的所有 AWT 组件提供了相应的实现，Swing 组件比 AWT 组件的功能更加强大。相对于 AWT 组件， Swing 组件具有如下 4 个额外的功能 :</p>
<ol>
<li><p>可以为 Swing 组件设置提示信息。使用 setToolTipText()方法，为组件设置对用户有帮助的提示信息 。</p>
</li>
<li><p>很多 Swing 组件如按钮、标签、菜单项等，除使用文字外，还可以使用图标修饰自己。为了允许在 Swing 组件中使用图标， Swing为Icon 接口提供了 一个实现类: Imagelcon ，该实现类代表一个图像图标。</p>
</li>
<li><p>支持插拔式的外观风格。每个 JComponent 对象都有一个相应的 ComponentUI 对象，为它完成所有的绘画、事件处理、决定尺寸大小等工作。 ComponentUI 对象依赖当前使用的 PLAF ， 使用 UIManager.setLookAndFeel()方法可以改变图形界面的外观风格 。</p>
</li>
<li><p>支持设置边框。Swing 组件可以设置一个或多个边框。 Swing 中提供了各式各样的边框供用户边 用，也能建立组合边框或自己设计边框。 一种空白边框可以用于增大组件，同时协助布局管理器对容器中的组件进行合理的布局。</p>
</li>
</ol>
<p>​	每个 Swing 组件都有一个对应的UI 类，例如 JButton组件就有一个对应的 ButtonUI 类来作为UI代理 。每个 Swing组件的UI代理的类名总是将该 Swing 组件类名的 J 去掉，然后在后面添加 UI 后缀 。 UI代理类通常是一个抽象基类 ， 不同的 PLAF 会有不同的UI代理实现类 。 Swing 类库中包含了几套UI代理,分别放在不同的包下， 每套UI代理都几乎包含了所有 Swing组件的 ComponentUI实现，每套这样的实现都被称为一种PLAF 实现 。以 JButton 为例，其 UI 代理的继承层次下图：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309051044268.png"
                      alt="image-20230905104452149" style="zoom:50%;" 
                >

<p>​	如果需要改变程序的外观风格， 则可以使用如下代码：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//容器：</span></span><br><span class="line"><span class="type">JFrame</span> <span class="variable">jf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置外观风格</span></span><br><span class="line">    UIManager.setLookAndFeel(<span class="string">&quot;com.sun.java.swing.plaf.windows.WindowsLookAndFeel&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//刷新jf容器及其内部组件的外观</span></span><br><span class="line">    SwingUtilities.updateComponentTreeUI(jf);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p><strong>案例：</strong></p>
<p>​	使用Swing组件，实现下图中的界面效果：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309051045048.png"
                      alt="image-20230905104509858" style="zoom: 50%;" 
                >

<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309051045407.jpg"
                      style="zoom: 67%;" 
                ></p>
<p><strong>演示代码：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.itcast.swing.util.ImagePathUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.InputEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwingComponentDemo</span> &#123;</span><br><span class="line">    <span class="type">JFrame</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;测试swing基本组件&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个按钮，并为其指定图标</span></span><br><span class="line">    <span class="type">Icon</span> <span class="variable">okIcon</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImageIcon</span>(ImagePathUtil.getRealPath(<span class="string">&quot;2\\ok.png&quot;</span>));</span><br><span class="line">    <span class="type">JButton</span> <span class="variable">ok</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;确定&quot;</span>,okIcon);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个单选按钮，初始处于选中的状态</span></span><br><span class="line">    <span class="type">JRadioButton</span> <span class="variable">male</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JRadioButton</span>(<span class="string">&quot;男&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">    <span class="type">JRadioButton</span> <span class="variable">female</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JRadioButton</span>(<span class="string">&quot;女&quot;</span>,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">ButtonGroup</span> <span class="variable">bg</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ButtonGroup</span>();      <span class="comment">//定义一个ButtonGroup，把male和female组合起来，实现单选</span></span><br><span class="line"></span><br><span class="line">    <span class="type">JCheckBox</span> <span class="variable">married</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JCheckBox</span>(<span class="string">&quot;是否已婚？&quot;</span>,<span class="literal">false</span>);    <span class="comment">//定义一个复选框，初始处于没有选中状态</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个数组存储颜色</span></span><br><span class="line">    String[] colors = &#123; <span class="string">&quot;红色&quot;</span>, <span class="string">&quot;绿色 &quot;</span> , <span class="string">&quot;蓝色 &quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个下拉选择框，展示颜色</span></span><br><span class="line">    JComboBox&lt;String&gt; colorChooser = <span class="keyword">new</span> <span class="title class_">JComboBox</span>&lt;String&gt;(colors);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定一个列表框，展示颜色</span></span><br><span class="line">    JList&lt;String&gt; colorList = <span class="keyword">new</span> <span class="title class_">JList</span>&lt;String&gt;(colors);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个8行20列的多行文本域</span></span><br><span class="line">    <span class="type">JTextArea</span> <span class="variable">ta</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextArea</span>(<span class="number">8</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个40列的单行文本域</span></span><br><span class="line">    <span class="type">JTextField</span> <span class="variable">name</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextField</span>(<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义菜单条</span></span><br><span class="line">    <span class="type">JMenuBar</span> <span class="variable">mb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuBar</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">JMenu</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenu</span>(<span class="string">&quot;文件&quot;</span>);      <span class="comment">//定义菜单</span></span><br><span class="line">    <span class="type">JMenu</span> <span class="variable">edit</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenu</span>(<span class="string">&quot;编辑&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建菜单项，并指定图标</span></span><br><span class="line">    <span class="type">JMenuItem</span> <span class="variable">newItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;新建&quot;</span>,<span class="keyword">new</span> <span class="title class_">ImageIcon</span>(ImagePathUtil.getRealPath(<span class="string">&quot;2\\new.png&quot;</span>)));</span><br><span class="line">    <span class="type">JMenuItem</span> <span class="variable">saveItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;保存&quot;</span>,<span class="keyword">new</span> <span class="title class_">ImageIcon</span>(ImagePathUtil.getRealPath(<span class="string">&quot;2\\save.png&quot;</span>)));</span><br><span class="line">    <span class="type">JMenuItem</span> <span class="variable">exitItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;退出&quot;</span>,<span class="keyword">new</span> <span class="title class_">ImageIcon</span>(ImagePathUtil.getRealPath(<span class="string">&quot;2\\exit.png&quot;</span>)));</span><br><span class="line"></span><br><span class="line">    <span class="type">JCheckBoxMenuItem</span> <span class="variable">autoWrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JCheckBoxMenuItem</span>(<span class="string">&quot;自动换行&quot;</span>);</span><br><span class="line">    <span class="type">JMenuItem</span> <span class="variable">copyItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;复制&quot;</span>,<span class="keyword">new</span> <span class="title class_">ImageIcon</span>(ImagePathUtil.getRealPath(<span class="string">&quot;2\\copy.png&quot;</span>)));</span><br><span class="line">    <span class="type">JMenuItem</span> <span class="variable">pasteItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;粘贴&quot;</span>,<span class="keyword">new</span> <span class="title class_">ImageIcon</span>(ImagePathUtil.getRealPath(<span class="string">&quot;2\\paste.png&quot;</span>)));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义二级菜单，将来会添加到编辑中</span></span><br><span class="line">    <span class="type">JMenu</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenu</span>(<span class="string">&quot;格式&quot;</span>);</span><br><span class="line">    <span class="type">JMenuItem</span> <span class="variable">commentItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;注释&quot;</span>);</span><br><span class="line">    <span class="type">JMenuItem</span> <span class="variable">cancelItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;取消注释&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个右键菜单，用于设置程序的外观风格</span></span><br><span class="line">    <span class="type">JPopupMenu</span> <span class="variable">pop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPopupMenu</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">ButtonGroup</span> <span class="variable">flavorGroup</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ButtonGroup</span>();    <span class="comment">//定义一个ButtongGroup对象，用于组合风格按钮，形成单选</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义五个单选按钮菜单项，用于设置程序风格</span></span><br><span class="line">    <span class="type">JRadioButtonMenuItem</span> <span class="variable">metalItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JRadioButtonMenuItem</span>(<span class="string">&quot;Metal 风格&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">    <span class="type">JRadioButtonMenuItem</span> <span class="variable">nimbusItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JRadioButtonMenuItem</span>(<span class="string">&quot;Nimbus 风格&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">    <span class="type">JRadioButtonMenuItem</span> <span class="variable">windowsItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JRadioButtonMenuItem</span>(<span class="string">&quot;Windows 风格&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">    <span class="type">JRadioButtonMenuItem</span> <span class="variable">classicItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JRadioButtonMenuItem</span>(<span class="string">&quot;Windows 经典风格&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">    <span class="type">JRadioButtonMenuItem</span> <span class="variable">motifItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JRadioButtonMenuItem</span>(<span class="string">&quot;Motif 风格&quot;</span>,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化界面</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//------------------------组合主区域------------------------</span></span><br><span class="line">        <span class="comment">//创建一个装载文本框和按钮的JPanel</span></span><br><span class="line">        <span class="type">JPanel</span> <span class="variable">bottom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">        bottom.add(name);</span><br><span class="line">        bottom.add(ok);</span><br><span class="line"></span><br><span class="line">        f.add(bottom, BorderLayout.SOUTH);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个装载下拉选择框、三个JChekBox的JPanel</span></span><br><span class="line">        <span class="type">JPanel</span> <span class="variable">checkPanel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">        checkPanel.add(colorChooser);</span><br><span class="line">        bg.add(male);</span><br><span class="line">        bg.add(female);</span><br><span class="line"></span><br><span class="line">        checkPanel.add(male);</span><br><span class="line">        checkPanel.add(female);</span><br><span class="line">        checkPanel.add(married);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个垂直排列的Box，装载checkPanel和多行文本域</span></span><br><span class="line">        <span class="type">Box</span> <span class="variable">topLeft</span> <span class="operator">=</span> Box.createVerticalBox();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用JScrollPane作为普通组件的JViewPort</span></span><br><span class="line">        <span class="type">JScrollPane</span> <span class="variable">taJsp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JScrollPane</span>(ta);</span><br><span class="line">        topLeft.add(taJsp);</span><br><span class="line">        topLeft.add(checkPanel);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个水平排列的Box，装载topLeft和colorList</span></span><br><span class="line">        <span class="type">Box</span> <span class="variable">top</span> <span class="operator">=</span> Box.createHorizontalBox();</span><br><span class="line">        top.add(topLeft);</span><br><span class="line">        top.add(colorList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将top Box 添加到窗口的中间</span></span><br><span class="line">        f.add(top);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//---------------------------组合菜单条----------------------------------------------</span></span><br><span class="line">        <span class="comment">//为newItem添加快捷键 ctrl+N</span></span><br><span class="line">        newItem.setAccelerator(KeyStroke.getKeyStroke(<span class="string">&#x27;N&#x27;</span>, InputEvent.CTRL_MASK));</span><br><span class="line">        newItem.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                ta.append(<span class="string">&quot;用户点击了“新建”菜单\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//为file添加菜单项</span></span><br><span class="line">        file.add(newItem);</span><br><span class="line">        file.add(saveItem);</span><br><span class="line">        file.add(exitItem);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为edit添加菜单项</span></span><br><span class="line">        edit.add(autoWrap);</span><br><span class="line">        edit.addSeparator();</span><br><span class="line">        edit.add(copyItem);</span><br><span class="line">        edit.add(pasteItem);</span><br><span class="line">        <span class="comment">//为commentItem添加提示信息</span></span><br><span class="line">        commentItem.setToolTipText(<span class="string">&quot;将程序代码注释起来&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为format菜单添加菜单项</span></span><br><span class="line">        format.add(commentItem);</span><br><span class="line">        format.add(cancelItem);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给edit添加一个分隔符</span></span><br><span class="line">        edit.addSeparator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把format添加到edit中形成二级菜单</span></span><br><span class="line">        edit.add(format);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把edit file 添加到菜单条中</span></span><br><span class="line">        mb.add(file);</span><br><span class="line">        mb.add(edit);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把菜单条设置给窗口</span></span><br><span class="line">        f.setJMenuBar(mb);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//------------------------组合右键菜单-----------------------------</span></span><br><span class="line"></span><br><span class="line">        flavorGroup.add(metalItem);</span><br><span class="line">        flavorGroup.add(nimbusItem);</span><br><span class="line">        flavorGroup.add(windowsItem);</span><br><span class="line">        flavorGroup.add(classicItem);</span><br><span class="line">        flavorGroup.add(motifItem);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给5个风格菜单创建事件监听器</span></span><br><span class="line">        <span class="type">ActionListener</span> <span class="variable">flavorLister</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> e.getActionCommand();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    changeFlavor(command);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为5个风格菜单项注册监听器</span></span><br><span class="line">        metalItem.addActionListener(flavorLister);</span><br><span class="line">        nimbusItem.addActionListener(flavorLister);</span><br><span class="line">        windowsItem.addActionListener(flavorLister);</span><br><span class="line">        classicItem.addActionListener(flavorLister);</span><br><span class="line">        motifItem.addActionListener(flavorLister);</span><br><span class="line"></span><br><span class="line">        pop.add(metalItem);</span><br><span class="line">        pop.add(nimbusItem);</span><br><span class="line">        pop.add(windowsItem);</span><br><span class="line">        pop.add(classicItem);</span><br><span class="line">        pop.add(motifItem);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用ta组件的setComponentPopupMenu即可设置右键菜单，无需使用事件</span></span><br><span class="line">        ta.setComponentPopupMenu(pop);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置关闭窗口时推出程序</span></span><br><span class="line">        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置jFrame最佳大小并可见</span></span><br><span class="line">        f.pack();</span><br><span class="line">        f.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，用于改变界面风格</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">changeFlavor</span><span class="params">(String command)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">switch</span> (command)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Metal 风格&quot;</span>:</span><br><span class="line">                UIManager.setLookAndFeel(<span class="string">&quot;javax.swing.plaf.metal.MetalLookAndFeel&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Nimbus 风格&quot;</span>:</span><br><span class="line">                UIManager.setLookAndFeel(<span class="string">&quot;javax.swing.plaf.nimbus.NimbusLookAndFeel&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Windows 风格&quot;</span>:</span><br><span class="line">                UIManager.setLookAndFeel(<span class="string">&quot;com.sun.java.swing.plaf.windows.WindowsLookAndFeel&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Windows 经典风格&quot;</span>:</span><br><span class="line">                UIManager.setLookAndFeel(<span class="string">&quot;com.sun.java.swing.plaf.windows.WindowsClassicLookAndFeel&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Motif 风格&quot;</span>:</span><br><span class="line">                UIManager.setLookAndFeel(<span class="string">&quot;com.sun.java.swing.plaf.motif.MotifLookAndFeel&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新f窗口内顶级容器以及所有组件的UI</span></span><br><span class="line">        SwingUtilities.updateComponentTreeUI(f.getContentPane());</span><br><span class="line">        <span class="comment">//更新mb菜单条及每部所有组件UI</span></span><br><span class="line">        SwingUtilities.updateComponentTreeUI(mb);</span><br><span class="line">        <span class="comment">//更新右键菜单及内部所有菜单项的UI</span></span><br><span class="line">        SwingUtilities.updateComponentTreeUI(pop);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">SwingComponentDemo</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>注意细节：</strong></p>
<p>1.Swing菜单项指定快捷键时必须通过<code>组件名.setAccelerator(keyStroke.getKeyStroke(&quot;大写字母&quot;,InputEvent.CTRL_MASK))</code>方法来设置，其中KeyStroke代表一次击键动作，可以直接通过按键对应字母来指定该击键动作 。</p>
<p>2.更新JFrame的风格时，调用了<code> SwingUtilities.updateComponentTreeUI(f.getContentPane());</code>这是因为如果直接更新 JFrame 本身 ，将会导致 JFrame 也被更新， JFrame 是一个特殊的容器 ， JFrame 依然部分依赖于本地平台的图形组件 。如果强制 JFrame 更新，则有可能导致该窗口失去标题栏和边框 。 </p>
<p>3.给组件设置右键菜单，不需要使用监听器，只需要调用setComponentPopupMenu()方法即可，更简单。</p>
<p>4.关闭JFrame窗口，也无需监听器，只需要调用setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)方法即可，更简单。</p>
<p>5.如果需要让某个组件支持滚动条，只需要把该组件放入到JScrollPane中，然后使用JScrollPane即可。</p>
<h3 id="3-2-3-为组件设置边框"><a href="#3-2-3-为组件设置边框" class="headerlink" title="3.2.3 为组件设置边框"></a>3.2.3 为组件设置边框</h3><p>​	很多情况下，我们常常喜欢给不同的组件设置边框，从而让界面的层次感更明显，swing中提供了Border对象来代表一个边框，下图是Border的继承体系图：</p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309051045753.png"
                      style="zoom:67%;" 
                ></p>
<p><strong>特殊的Border：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. TitledBorder:它的作用并不是直接为其他组件添加边框，而是为其他边框设置标题，创建该类的对象时，需要传入一个其他的Border对象；</span><br><span class="line">	2. ComoundBorder:用来组合其他两个边框，创建该类的对象时，需要传入其他两个Border对象，一个作为内边框，一个座位外边框</span><br></pre></td></tr></table></figure></div>

<p><strong>给组件设置边框步骤：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 使用BorderFactory或者XxxBorder创建Border的实例对象；</span><br><span class="line">	2. 调用Swing组件的setBorder（Border b）方法为组件设置边框；</span><br></pre></td></tr></table></figure></div>

<p><strong>案例：</strong></p>
<p>​	请使用Border实现下图效果：</p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309051045994.jpg"
                     
                ></p>
<p><strong>演示代码：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.border.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BorderTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">JFrame</span> <span class="variable">jf</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;测试边框&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//设置Jframe为网格布局</span></span><br><span class="line">        jf.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>,<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建凸起的斜边框，分别设置四条边的颜色</span></span><br><span class="line">        <span class="type">Border</span> <span class="variable">bb</span> <span class="operator">=</span> BorderFactory.createBevelBorder(BevelBorder.RAISED,Color.RED,Color.GREEN,Color.BLUE,Color.GRAY);</span><br><span class="line">        jf.add(getPanelWithBorder(bb,<span class="string">&quot;BevelBorder&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建LineBorder</span></span><br><span class="line">        <span class="type">Border</span> <span class="variable">lb</span> <span class="operator">=</span> BorderFactory.createLineBorder(Color.ORANGE, <span class="number">10</span>);</span><br><span class="line">        jf.add(getPanelWithBorder(lb,<span class="string">&quot;LineBorder&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建EmptyBorder，会在组件的四周留白</span></span><br><span class="line">        <span class="type">Border</span> <span class="variable">eb</span> <span class="operator">=</span> BorderFactory.createEmptyBorder(<span class="number">20</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">30</span>);</span><br><span class="line">        jf.add(getPanelWithBorder(eb,<span class="string">&quot;EmptyBorder&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建EtchedBorder，</span></span><br><span class="line">        <span class="type">Border</span> <span class="variable">etb</span> <span class="operator">=</span> BorderFactory.createEtchedBorder(EtchedBorder.RAISED, Color.RED, Color.GREEN);</span><br><span class="line">        jf.add(getPanelWithBorder(etb,<span class="string">&quot;EtchedBorder&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建TitledBorder,为原有的Border添加标题</span></span><br><span class="line">        <span class="type">TitledBorder</span> <span class="variable">tb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TitledBorder</span>(lb,<span class="string">&quot;测试标题&quot;</span>,TitledBorder.LEFT,TitledBorder.BOTTOM,<span class="keyword">new</span> <span class="title class_">Font</span>(<span class="string">&quot;StSong&quot;</span>,Font.BOLD,<span class="number">18</span>),Color.BLUE);</span><br><span class="line">        jf.add(getPanelWithBorder(tb,<span class="string">&quot;TitledBorder&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//直接创建MatteBorder，它是EmptyBorder的子类，EmptyBorder是留白，而MatteBorder可以给留空的区域填充颜色</span></span><br><span class="line">        <span class="type">MatteBorder</span> <span class="variable">mb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MatteBorder</span>(<span class="number">20</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">30</span>,Color.GREEN);</span><br><span class="line">        jf.add(getPanelWithBorder(mb,<span class="string">&quot;MatteBorder&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//直接创创建CompoundBorder，将两个边框组合成新边框</span></span><br><span class="line">        <span class="type">CompoundBorder</span> <span class="variable">cb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CompoundBorder</span>(<span class="keyword">new</span> <span class="title class_">LineBorder</span>(Color.RED,<span class="number">8</span>),tb);</span><br><span class="line">        jf.add(getPanelWithBorder(cb,<span class="string">&quot;CompoundBorder&quot;</span>));</span><br><span class="line"></span><br><span class="line">        jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        jf.pack();</span><br><span class="line">        jf.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> JPanel <span class="title function_">getPanelWithBorder</span><span class="params">(Border border,String borderName)</span>&#123;</span><br><span class="line">        <span class="type">JPanel</span> <span class="variable">jPanel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line"></span><br><span class="line">        jPanel.add(<span class="keyword">new</span> <span class="title class_">JLabel</span>(borderName));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为panel设置边框</span></span><br><span class="line">        jPanel.setBorder(border);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jPanel;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">BorderTest</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-2-4-使用JToolBar创建工具条"><a href="#3-2-4-使用JToolBar创建工具条" class="headerlink" title="3.2.4 使用JToolBar创建工具条"></a>3.2.4 使用JToolBar创建工具条</h3><p>Swing 提供了JToolBar类来创建工具条，并且可以往JToolBar中添加多个工具按钮。</p>
<p><strong>JToolBar  API:</strong></p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>方法功能</th>
</tr>
</thead>
<tbody><tr>
<td>JToolBar( String name , int orientation)</td>
<td>创建一个名字为name，方向为orientation的工具条对象，其orientation的是取值可以是SwingConstants.HORIZONTAL或SwingConstants.VERTICAL</td>
</tr>
<tr>
<td>JButton add(Action a)</td>
<td>通过Action对象为JToolBar工具条添加对应的工具按钮</td>
</tr>
<tr>
<td>addSeparator( Dimension size )</td>
<td>向工具条中添加指定大小的分隔符</td>
</tr>
<tr>
<td>setFloatable( boolean b )</td>
<td>设定工具条是否可以被拖动</td>
</tr>
<tr>
<td>setMargin(Insets m)</td>
<td>设置工具条与工具按钮的边距</td>
</tr>
<tr>
<td>setOrientation( int o )</td>
<td>设置工具条的方向</td>
</tr>
<tr>
<td>setRollover(boolean rollover)</td>
<td>设置此工具条的rollover状态</td>
</tr>
</tbody></table>
<p><strong>add(Action a)方法：</strong></p>
<p>​	上述API中add(Action a)这个方法比较难理解，为什么呢，之前说过，Action接口是ActionListener的一个子接口，那么它就代表一个事件监听器，而这里add方法是在给工具条添加一个工具按钮，为什么传递的是一个事件监听器呢？</p>
<p>​	首先要明确的是不管是菜单条中的菜单项还是工具条中的工具按钮，最终肯定是需要点击来完成一些操作，所以JToolBar以及JMenu都提供了更加便捷的添加子组件的方法add(Action a),在这个方法的内部会做如下几件事：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 创建一个适用于该容器的组件(例如，在工具栏中创建一个工具按钮)；</span><br><span class="line">2. 从 Action 对象中获得对应的属性来设置该组件(例如，通过 name 来设置文本，通过 lcon 来设置图标) ；</span><br><span class="line">3. 把Action监听器注册到刚才创建的组件上；</span><br></pre></td></tr></table></figure></div>

<p><strong>案例：</strong></p>
<p>​	使用JToolBar组件完成下图效果：</p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309051045921.jpg"
                     
                ></p>
<p><strong>演示代码：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.itcast.swing.util.ImagePathUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JToolBarTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">JFrame</span> <span class="variable">jf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;测试工具条&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">JTextArea</span> <span class="variable">jta</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextArea</span>(<span class="number">6</span>,<span class="number">35</span>);</span><br><span class="line">    <span class="comment">//创建工具条</span></span><br><span class="line">    <span class="type">JToolBar</span> <span class="variable">jtb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JToolBar</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建&quot;上一曲&quot;Action,该Action用于创建工具按钮</span></span><br><span class="line">    <span class="type">Action</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AbstractAction</span>(<span class="string">&quot;上一曲&quot;</span>,<span class="keyword">new</span> <span class="title class_">ImageIcon</span>(ImagePathUtil.getRealPath(<span class="string">&quot;2\\pre.png&quot;</span>))) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">            jta.append(<span class="string">&quot;上一曲.\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建&quot;暂停&quot; Action</span></span><br><span class="line">    <span class="type">Action</span> <span class="variable">pause</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AbstractAction</span>(<span class="string">&quot;暂停&quot;</span>,<span class="keyword">new</span> <span class="title class_">ImageIcon</span>(ImagePathUtil.getRealPath(<span class="string">&quot;2\\pause.png&quot;</span>))) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">           jta.append(<span class="string">&quot;暂停播放.\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建&quot;下一曲&quot; Action</span></span><br><span class="line">    <span class="type">Action</span> <span class="variable">next</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AbstractAction</span>(<span class="string">&quot;下一曲&quot;</span>,<span class="keyword">new</span> <span class="title class_">ImageIcon</span>(ImagePathUtil.getRealPath(<span class="string">&quot;2\\next.png&quot;</span>))) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">            jta.append(<span class="string">&quot;下一曲.\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给JTextArea添加滚动条</span></span><br><span class="line">        jf.add(<span class="keyword">new</span> <span class="title class_">JScrollPane</span>(jta));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//以Action的形式创建按钮，并将按钮添加到Panel中</span></span><br><span class="line">        <span class="type">JButton</span> <span class="variable">preBtn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(pre);</span><br><span class="line">        <span class="type">JButton</span> <span class="variable">pauseBtn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(pause);</span><br><span class="line">        <span class="type">JButton</span> <span class="variable">nextBtn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(next);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//往工具条中添加Action对象，该对象会转换成工具按钮</span></span><br><span class="line">        jtb.add(preBtn);</span><br><span class="line">        jtb.addSeparator();</span><br><span class="line">        jtb.add(pauseBtn);</span><br><span class="line">        jtb.addSeparator();</span><br><span class="line">        jtb.add(nextBtn);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向窗口中添加工具条</span></span><br><span class="line">        jf.add(jtb,BorderLayout.NORTH);</span><br><span class="line"></span><br><span class="line">        jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        jf.pack();</span><br><span class="line">        jf.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JToolBarTest</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-2-5-JColorChooser-和JFileChooser"><a href="#3-2-5-JColorChooser-和JFileChooser" class="headerlink" title="3.2.5 JColorChooser 和JFileChooser"></a>3.2.5 JColorChooser 和JFileChooser</h3><p>Swing提供了JColorChooser和JFileChooser这两种对话框，可以很方便的完成颜色的选择和本地文件的选择。</p>
<h4 id="3-2-5-1-JColorChooser"><a href="#3-2-5-1-JColorChooser" class="headerlink" title="3.2.5.1 JColorChooser"></a>3.2.5.1 JColorChooser</h4><p>JColorChooser 用于创建颜色选择器对话框 ， 该类的用法非常简单，只需要调用它的静态方法就可以快速生成一个颜色选择对话框：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Color <span class="title function_">showDialog</span><span class="params">(Component component, String title,Color initialColor)</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	参数：</span></span><br><span class="line"><span class="comment">		componet:指定当前对话框的父组件</span></span><br><span class="line"><span class="comment">		title：当前对话框的名称</span></span><br><span class="line"><span class="comment">		initialColor：指定默认选中的颜色</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">	返回值：</span></span><br><span class="line"><span class="comment">		返回用户选中的颜色</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<p><strong>案例：</strong></p>
<p>​	使用颜色选择器，完成下图功能：</p>
<p>​		点击按钮，改变文本域的背景色</p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309051046748.jpg"
                      style="zoom:50%;" 
                ></p>
<p><strong>演示代码：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JColorChooserDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">JFrame</span> <span class="variable">jFrame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;测试颜色选择器&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">JTextArea</span> <span class="variable">jta</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextArea</span>(<span class="string">&quot;我爱中华&quot;</span>,<span class="number">6</span>,<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">JButton</span> <span class="variable">button</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="keyword">new</span> <span class="title class_">AbstractAction</span>(<span class="string">&quot;改变文本框的本景色&quot;</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//弹出颜色选择器</span></span><br><span class="line">            <span class="type">Color</span> <span class="variable">result</span> <span class="operator">=</span> JColorChooser.showDialog(jFrame, <span class="string">&quot;颜色选择器&quot;</span>, Color.WHITE);</span><br><span class="line">            jta.setBackground(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        jFrame.add(jta);</span><br><span class="line"></span><br><span class="line">        jFrame.add(button,BorderLayout.SOUTH);</span><br><span class="line"></span><br><span class="line">        jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        jFrame.pack();</span><br><span class="line">        jFrame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JColorChooserDemo</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="3-2-5-2-JFileChooser"><a href="#3-2-5-2-JFileChooser" class="headerlink" title="3.2.5.2 JFileChooser"></a>3.2.5.2 JFileChooser</h4><p>​	JFileChooser 的功能与AWT中的 FileDialog 基本相似，也是用于生成”打开文件”、”保存文件 “对话框。与 FileDialog 不同的是 ， JFileChooser 无须依赖于本地平台的 GUI ， 它由 100%纯 Java 实现 ， 在所有平台 上具有完全相同的行为，并可以在所有平台上具有相同的外观风格。</p>
<p>JFileChooser使用步骤：</p>
<ol>
<li>创建JFileChooser对象：</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">JFileChooser</span> <span class="variable">chooser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFileChooser</span>(<span class="string">&quot;D:\\a&quot;</span>);<span class="comment">//指定默认打开的本地磁盘路径</span></span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>调用JFileChooser的一系列可选方法，进行初始化</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">setSelectedFile(File file)/setSelectedFiles(File[] selectedFiles):设定默认选中的文件</span><br><span class="line">setMultiSelectionEnabled(<span class="type">boolean</span> b)：设置是否允许多选，默认是单选</span><br><span class="line">setFileSelectionMode(<span class="type">int</span> mode)：设置可以选择内容，例如文件、文件夹等，默认只能选择文件</span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li>打开文件对话框</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">showOpenDialog(Component parent):打开文件加载对话框，并指定父组件</span><br><span class="line">showSaveDialog(Component parent):打开文件保存对话框，并指定父组件</span><br></pre></td></tr></table></figure></div>

<ol start="4">
<li>获取用户选择的结果</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">File <span class="title function_">getSelectedFile</span><span class="params">()</span>:获取用户选择的一个文件</span><br><span class="line">File[] getSelectedFiles():获取用户选择的多个文件</span><br></pre></td></tr></table></figure></div>

<p><strong>案例：</strong></p>
<p>​	使用JFileChooser完成下图效果：</p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309051046367.jpg"
                      style="zoom:50%;" 
                ></p>
<p><strong>演示代码：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JFileChooserDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建窗口对象</span></span><br><span class="line">    <span class="type">JFrame</span> <span class="variable">jf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;测试JFileChooser&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建打开文件对话框</span></span><br><span class="line">    <span class="type">JFileChooser</span> <span class="variable">chooser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFileChooser</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建菜单条</span></span><br><span class="line">    <span class="type">JMenuBar</span> <span class="variable">jmb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuBar</span>();</span><br><span class="line">    <span class="comment">//创建菜单</span></span><br><span class="line">    <span class="type">JMenu</span> <span class="variable">jMenu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenu</span>(<span class="string">&quot;文件&quot;</span>);</span><br><span class="line">    <span class="comment">//创建菜单项</span></span><br><span class="line">    <span class="type">JMenuItem</span> <span class="variable">open</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="keyword">new</span> <span class="title class_">AbstractAction</span>(<span class="string">&quot;打开&quot;</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">            chooser.showOpenDialog(jf);</span><br><span class="line">            <span class="type">File</span> <span class="variable">imageFile</span> <span class="operator">=</span> chooser.getSelectedFile();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                image = ImageIO.read(imageFile);</span><br><span class="line">                drawArea.repaint();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="type">JMenuItem</span> <span class="variable">save</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="keyword">new</span> <span class="title class_">AbstractAction</span>(<span class="string">&quot;另存为&quot;</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);</span><br><span class="line">            chooser.showSaveDialog(jf);</span><br><span class="line">            <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> chooser.getSelectedFile();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ImageIO.write(image,<span class="string">&quot;jpeg&quot;</span>,<span class="keyword">new</span> <span class="title class_">File</span>(dir,<span class="string">&quot;a.jpg&quot;</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e1) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用来记录用户选择的图片</span></span><br><span class="line">    BufferedImage image;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示图片</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">MyCanvas</span> <span class="keyword">extends</span> <span class="title class_">JPanel</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (image!=<span class="literal">null</span>)&#123;</span><br><span class="line">                g.drawImage(image,<span class="number">0</span>,<span class="number">0</span>,<span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">JPanel</span> <span class="variable">drawArea</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCanvas</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//设置图片显示区域大小</span></span><br><span class="line">        drawArea.setPreferredSize(<span class="keyword">new</span> <span class="title class_">Dimension</span>(<span class="number">500</span>,<span class="number">300</span>));</span><br><span class="line">        jf.add(drawArea);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组装并设置菜单条</span></span><br><span class="line">        jMenu.add(open);</span><br><span class="line">        jMenu.add(save);</span><br><span class="line">        jmb.add(jMenu);</span><br><span class="line">        jf.setJMenuBar(jmb);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示jf</span></span><br><span class="line">        jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        jf.pack();</span><br><span class="line">        jf.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JFileChooserDemo</span>().init();</span><br><span class="line">    &#125;    </span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-2-7-使用JOptionPane"><a href="#3-2-7-使用JOptionPane" class="headerlink" title="3.2.7 使用JOptionPane"></a>3.2.7 使用JOptionPane</h3><h4 id="3-2-7-1-基本概述"><a href="#3-2-7-1-基本概述" class="headerlink" title="3.2.7.1 基本概述"></a>3.2.7.1 基本概述</h4><p>通过 JOptionPane 可以非常方便地创建一些简单的对话框， Swing 已经为这些对话框添加了相应的组件，无须程序员手动添加组件 。 JOptionPane 提供了如下 4 个方法来创建对话框 。</p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>方法功能</th>
</tr>
</thead>
<tbody><tr>
<td>showMessageDialog&#x2F;showInternalMessageDialog</td>
<td>消息对话框 ，告知用户某事己发生 ， 用户只能单击”确定”按钮 ， 类似于 JavaScript 的 alert 函数 。</td>
</tr>
<tr>
<td>showConfirmDialog&#x2F;showInternalConfirmDialog</td>
<td>确认对话框，向用户确认某个问题，用户可以选择 yes 、 no ~ cancel 等选项 。 类似于 JavaScript 的 comfirm 函数 。该方法返回用户单击了 哪个按钮</td>
</tr>
<tr>
<td>showInputDialog&#x2F;showInternalInputDialog</td>
<td>输入对话框，提示要求输入某些信息，类似于 JavaScript的 prompt 函数。该方法返回用户输入的字符串 。</td>
</tr>
<tr>
<td>showOptionDialog&#x2F;showInternalOptionDialog</td>
<td>自定义选项对话框 ，允许使用自 定义选项 ，可以取代showConfirmDialog 所产生的对话框，只是用起来更复杂 。</td>
</tr>
</tbody></table>
<p>上述方法都有都有很多重载形式，选择其中一种最全的形式，参数解释如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">showXxxDialog(Component parentComponent,</span><br><span class="line">		Object message, </span><br><span class="line">		String title, </span><br><span class="line">		<span class="type">int</span> optionType, </span><br><span class="line">		<span class="type">int</span> messageType,</span><br><span class="line">        	Icon icon,</span><br><span class="line">		Object[] options, </span><br><span class="line">		Object initialValue)</span><br><span class="line">--参数解释：</span><br><span class="line">parentComponent：当前对话框的父组件</span><br><span class="line">message：对话框上显示的信息，信息可以是字符串、组件、图片等</span><br><span class="line">title：当前对话框的标题</span><br><span class="line">optionType：当前对话框上显示的按钮类型：DEFAULT_OPTION、YES_NO_OPTION、YES_NO_CANCEL_OPTION、OK_CANCEL_OPTION</span><br><span class="line">messageType:当前对话框的类型:ERROR_MESSAGE、INFORMATION_MESSAGE、WARNING_MESSAGE、QUESTION_MESSAGE、PLAIN_MESSAGE</span><br><span class="line">icon:当前对话框左上角的图标</span><br><span class="line">options:自定义下拉列表的选项</span><br><span class="line">initialValue:自定义选项中的默认选中项</span><br></pre></td></tr></table></figure></div>



<p><strong>当用户与对话框交互结束后，不同类型对话框的返回值如下：</strong></p>
<ul>
<li>showMessageDialog: 无返回值 。</li>
<li>showlnputDialog: 返回用户输入或选择的字符串 。</li>
<li>showConfirmDialog: 返回 一个整数代表用户选择的选项 。</li>
<li>showOptionDialog : 返回 一个整数代表用户选择的选项，如果用户选择第一项，则返回 0; 如果选择第二项，则返回1……依此类推 。</li>
</ul>
<p><strong>对 showConfirmDialog 所产生的对话框，有如下几个返回值：</strong></p>
<ul>
<li>YES OPTION: 用户 单击了 “是”按钮后返回 。</li>
<li>NO OPTION: 用 户单击了”否”按钮后返回 。</li>
<li>CANCEL OPTION: 用户单击了”取消”按钮后返回 。</li>
<li>OK OPTION : 用户单击了”确定”按钮后返回 。</li>
<li>CLOSED OPTION: 用户 单击了对话框右上角的 “ x” 按钮后返回。</li>
</ul>
<h4 id="3-2-7-2-四种对话框演示"><a href="#3-2-7-2-四种对话框演示" class="headerlink" title="3.2.7.2 四种对话框演示"></a>3.2.7.2 四种对话框演示</h4><p><strong>消息对话框：</strong></p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309051046091.jpg"
                     
                ></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.itcast.swing.util.ImagePathUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageDialogTest</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">JFrame</span> <span class="variable">jf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;测试消息对话框&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">JTextArea</span> <span class="variable">jta</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextArea</span>(<span class="number">6</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">JButton</span> <span class="variable">btn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="keyword">new</span> <span class="title class_">AbstractAction</span>(<span class="string">&quot;弹出消息对话框&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">            <span class="comment">//JOptionPane.showMessageDialog(jf, jta.getText(), &quot;消息对话框&quot;, JOptionPane.ERROR_MESSAGE);</span></span><br><span class="line">            <span class="comment">//JOptionPane.showMessageDialog(jf, jta.getText(), &quot;消息对话框&quot;, JOptionPane.INFORMATION_MESSAGE);</span></span><br><span class="line">            <span class="comment">//JOptionPane.showMessageDialog(jf, jta.getText(), &quot;消息对话框&quot;, JOptionPane.WARNING_MESSAGE);</span></span><br><span class="line">            <span class="comment">//JOptionPane.showMessageDialog(jf, jta.getText(), &quot;消息对话框&quot;, JOptionPane.QUESTION_MESSAGE);</span></span><br><span class="line">            <span class="comment">//JOptionPane.showMessageDialog(jf, jta.getText(), &quot;消息对话框&quot;, JOptionPane.PLAIN_MESSAGE);</span></span><br><span class="line">            JOptionPane.showMessageDialog(jf, jta.getText(), <span class="string">&quot;消息对话框&quot;</span>, JOptionPane.WARNING_MESSAGE, <span class="keyword">new</span> <span class="title class_">ImageIcon</span>(ImagePathUtil.getRealPath(<span class="string">&quot;2\\female.png&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        jf.add(jta);</span><br><span class="line">        jf.add(btn, BorderLayout.SOUTH);</span><br><span class="line"></span><br><span class="line">        jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        jf.pack();</span><br><span class="line">        jf.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MessageDialogTest</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<p><strong>确认对话框：</strong></p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309051046321.jpg"
                     
                ></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfirmDialogTest</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">JFrame</span> <span class="variable">jf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;测试确认对话框&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">JTextArea</span> <span class="variable">jta</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextArea</span>(<span class="number">6</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">JButton</span> <span class="variable">btn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="keyword">new</span> <span class="title class_">AbstractAction</span>(<span class="string">&quot;弹出确认对话框&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> JOptionPane.showConfirmDialog(jf, jta.getText(), <span class="string">&quot;确认对话框&quot;</span>,JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);</span><br><span class="line">            <span class="keyword">if</span> (result == JOptionPane.YES_OPTION)&#123;</span><br><span class="line">                jta.append(<span class="string">&quot;\n用户点击了确定按钮&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (result==JOptionPane.NO_OPTION)&#123;</span><br><span class="line">                jta.append(<span class="string">&quot;\n用户点击了取消按钮&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        jf.add(jta);</span><br><span class="line">        jf.add(btn, BorderLayout.SOUTH);</span><br><span class="line"></span><br><span class="line">        jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        jf.pack();</span><br><span class="line">        jf.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConfirmDialogTest</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>​	</p>
<p><strong>输入对话框：</strong></p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309051046335.jpg"
                     
                ></p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309051046610.jpg"
                     
                ></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InputDialogTest</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">JFrame</span> <span class="variable">jf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;测试输入对话框&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">JTextArea</span> <span class="variable">jta</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextArea</span>(<span class="number">6</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">JButton</span> <span class="variable">btn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="keyword">new</span> <span class="title class_">AbstractAction</span>(<span class="string">&quot;弹出输入对话框&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           <span class="comment">/* String result = JOptionPane.showInputDialog(jf, &quot;请填写您的银行账号：&quot;, &quot;输入对话框&quot;, JOptionPane.INFORMATION_MESSAGE);</span></span><br><span class="line"><span class="comment">            if(result!=null)&#123;</span></span><br><span class="line"><span class="comment">                jta.append(result.toString());</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"></span><br><span class="line">            <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> JOptionPane.showInputDialog(jf, <span class="string">&quot;&quot;</span>, <span class="string">&quot;输入对话框&quot;</span>, JOptionPane.DEFAULT_OPTION, <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;柳岩&quot;</span>, <span class="string">&quot;舒淇&quot;</span>, <span class="string">&quot;龚玥菲&quot;</span>&#125;, <span class="string">&quot;舒淇&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (result!=<span class="literal">null</span>)&#123;</span><br><span class="line">                jta.append(result.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        jf.add(jta);</span><br><span class="line">        jf.add(btn, BorderLayout.SOUTH);</span><br><span class="line"></span><br><span class="line">        jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        jf.pack();</span><br><span class="line">        jf.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InputDialogTest</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<p><strong>选项对话框：</strong></p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./images/%E9%80%89%E9%A1%B9%E5%AF%B9%E8%AF%9D%E6%A1%86.jpg"
                     
                ></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OptionDialogTest</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">JFrame</span> <span class="variable">jf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;测试选项对话框&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">JTextArea</span> <span class="variable">jta</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextArea</span>(<span class="number">6</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">JButton</span> <span class="variable">btn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="keyword">new</span> <span class="title class_">AbstractAction</span>(<span class="string">&quot;弹出选项对话框&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> JOptionPane.showOptionDialog(jf, <span class="string">&quot;请选择尿不湿号码&quot;</span>, <span class="string">&quot;选项对话框&quot;</span>,JOptionPane.DEFAULT_OPTION,JOptionPane.INFORMATION_MESSAGE,</span><br><span class="line">                    <span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;大号&quot;</span>,<span class="string">&quot;中号&quot;</span>,<span class="string">&quot;小号&quot;</span>&#125;,<span class="string">&quot;中号&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (result)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    jta.setText(<span class="string">&quot;用户选择了大号&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    jta.setText(<span class="string">&quot;用户选择了中号&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    jta.setText(<span class="string">&quot;用户选择了小号&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        jf.add(jta);</span><br><span class="line">        jf.add(btn, BorderLayout.SOUTH);</span><br><span class="line"></span><br><span class="line">        jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        jf.pack();</span><br><span class="line">        jf.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">OptionDialogTest</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h2 id="3-3-Swing中的特殊容器"><a href="#3-3-Swing中的特殊容器" class="headerlink" title="3.3 Swing中的特殊容器"></a>3.3 Swing中的特殊容器</h2><p>Swing提供了一些具有特殊功能的容器 ， 这些特殊容器可以用于创建一些更复杂的用户界面。</p>
<h3 id="3-3-1-使用JSplitPane"><a href="#3-3-1-使用JSplitPane" class="headerlink" title="3.3.1 使用JSplitPane"></a>3.3.1 使用JSplitPane</h3><p>JSplitPane 用于创建一个分割面板,它可以将 一个组件(通常是一个容器)分割成两个部分，并提供一个分割条 ， 用户可以拖动该分割条来调整两个部分的大小。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309051046876.jpg"
                     
                ></p>
<p><strong>JSplitPane使用步骤：</strong></p>
<ol>
<li>创建JSplitPane对象</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">通过如下构造方法可以创建JSplitPane对象</span><br><span class="line">JSplitPane(<span class="type">int</span> newOrientation, Component newLeftComponent,Component newRightComponent)</span><br><span class="line">    newOrientation：指定JSplitPane容器的分割方向：</span><br><span class="line">    	如果值为JSplitPane.VERTICAL_SPLIT,为纵向分割；</span><br><span class="line">    	如果值为JSplitPane.HORIZONTAL_SPLIT，为横向分割；</span><br><span class="line">    	</span><br><span class="line">    newLeftComponent：左侧或者上侧的组件；</span><br><span class="line">    newRightComponent：右侧或者下侧的组件；</span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>设置是否开启连续布局的支持(可选)</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">setContinuousLayout(<span class="type">boolean</span> newContinuousLayout):</span><br><span class="line">	默认是关闭的，如果设置为<span class="literal">true</span>，则打开连续布局的支持，但由于连续布局支持需要不断的重绘组件，所以效率会低一些</span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li>设置是否支持”一触即展”的支持(可选)</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">setOneTouchExpandable(<span class="type">boolean</span> newValue):</span><br><span class="line">	默认是关闭的，如果设置为<span class="literal">true</span>，则打开<span class="string">&quot;一触即展&quot;</span>的支持</span><br></pre></td></tr></table></figure></div>

<ol start="4">
<li>其他设置</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">setDividerLocation(<span class="type">double</span> proportionalLocation):设置分隔条的位置为JSplitPane的某个百分比</span><br><span class="line">setDividerLocation(<span class="type">int</span> location)：通过像素值设置分隔条的位置</span><br><span class="line">setDividerSize(<span class="type">int</span> newSize)：通过像素值设置分隔条的大小</span><br><span class="line">setLeftComponent(Component comp)/setTopComponent(Component comp)/setRightComponent(Component comp)/setBottomComponent(Component comp):设置指定位置的组件</span><br></pre></td></tr></table></figure></div>

<p><strong>案例：</strong></p>
<p>​	使用JSplitPane实现下图效果：</p>
<p>​		点击右侧的图书名称，在左上方显示该图书的图片，左下方显示该图书的描述</p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309051046782.jpg"
                     
                ></p>
<p><strong>演示代码：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Icon icon;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(String name, Icon icon, String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.icon = icon;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Icon <span class="title function_">getIcon</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> icon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIcon</span><span class="params">(Icon icon)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.icon = icon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDesc</span><span class="params">(String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.swing.util.ImagePathUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ListSelectionEvent;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ListSelectionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SplitPaneTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    Book[] books = &#123;<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;java自学宝典&quot;</span>, <span class="keyword">new</span> <span class="title class_">ImageIcon</span>(ImagePathUtil.getRealPath(<span class="string">&quot;3\\java.png&quot;</span>)), <span class="string">&quot;国内关于 Java 编程最全面的图书 \n 看得懂 ， 学得会&quot;</span>),</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;轻量级的JAVAEE企业应用实战&quot;</span>, <span class="keyword">new</span> <span class="title class_">ImageIcon</span>(ImagePathUtil.getRealPath(<span class="string">&quot;3\\ee.png&quot;</span>)), <span class="string">&quot;SSM整合开发的经典图书，值的拥有&quot;</span>),</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;Android基础教程&quot;</span>, <span class="keyword">new</span> <span class="title class_">ImageIcon</span>(ImagePathUtil.getRealPath(<span class="string">&quot;3\\android.png&quot;</span>)), <span class="string">&quot;全面介绍Android平台应用程序\n 开发的各方面知识&quot;</span>)</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">JFrame</span> <span class="variable">jf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;测试JSplitPane&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//列表展示图书</span></span><br><span class="line">    JList&lt;Book&gt; bookList = <span class="keyword">new</span> <span class="title class_">JList</span>&lt;&gt;(books);</span><br><span class="line"></span><br><span class="line">    <span class="type">JLabel</span> <span class="variable">bookCover</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">JTextArea</span> <span class="variable">bookDesc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextArea</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为三个组件设置最佳大小</span></span><br><span class="line">        bookList.setPreferredSize(<span class="keyword">new</span> <span class="title class_">Dimension</span>(<span class="number">150</span>,<span class="number">400</span>));</span><br><span class="line">        bookCover.setPreferredSize(<span class="keyword">new</span> <span class="title class_">Dimension</span>(<span class="number">220</span>,<span class="number">330</span>));</span><br><span class="line">        bookDesc.setPreferredSize(<span class="keyword">new</span> <span class="title class_">Dimension</span>(<span class="number">220</span>,<span class="number">70</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为列表添加事件监听器</span></span><br><span class="line">        bookList.addListSelectionListener(<span class="keyword">new</span> <span class="title class_">ListSelectionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">valueChanged</span><span class="params">(ListSelectionEvent e)</span> &#123;</span><br><span class="line">                <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookList.getSelectedValue();</span><br><span class="line">                bookCover.setIcon(book.getIcon());</span><br><span class="line">                bookDesc.setText(book.getDesc());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个垂直的分割面板</span></span><br><span class="line">        <span class="type">JSplitPane</span> <span class="variable">left</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSplitPane</span>(JSplitPane.VERTICAL_SPLIT,bookCover,<span class="keyword">new</span> <span class="title class_">JScrollPane</span>(bookDesc));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打开&quot;一触即展&quot;特性</span></span><br><span class="line">        left.setOneTouchExpandable(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置分隔条的大小</span></span><br><span class="line"></span><br><span class="line">        left.setDividerSize(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//设置分割面板根据组件的大小调整最佳布局</span></span><br><span class="line">        left.resetToPreferredSizes();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建一个水平分隔面板</span></span><br><span class="line">        <span class="type">JSplitPane</span> <span class="variable">content</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSplitPane</span>(JSplitPane.HORIZONTAL_SPLIT, left, bookList);</span><br><span class="line">        <span class="comment">//设置支持连续布局</span></span><br><span class="line">        content.setContinuousLayout(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        jf.add(content);</span><br><span class="line"></span><br><span class="line">        jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        jf.pack();</span><br><span class="line">        jf.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">SplitPaneTest</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="3-3-2-使用JTabledPane"><a href="#3-3-2-使用JTabledPane" class="headerlink" title="3.3.2 使用JTabledPane"></a>3.3.2 使用JTabledPane</h3><p>JTabbedPane可以很方便地在窗口上放置多个标签页，每个标签页相当于获得了一个与外部容器具有相同大小的组件摆放区域。通过这种方式， 就可以在一个容器里放置更多的组件 ， 例如右击桌面上的” 我的电脑 “图标，在弹出的快捷菜单里单击”属性 “ 菜单工页 ， 就可以看 到 一个”系统属性 “ 对话框 ，这个对话框里包含了 若干个标签页。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309051047090.jpg"
                      style="zoom:50%;" 
                >

<p>如果需要使用JTabbedPane在窗口上创建标签页 ，则可以按如下步骤进行:</p>
<ol>
<li>创建JTabbedPane对象</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">JTabbedPane(<span class="type">int</span> tabPlacement, <span class="type">int</span> tabLayoutPolicy):</span><br><span class="line">tabPlacement:</span><br><span class="line">	指定标签标题的放置位置，可以选择 SwingConstants中的四个常量：TOP、LEFT、BOTTOM、RIGHT</span><br><span class="line">tabLaoutPolicy:</span><br><span class="line">	指定当窗口不能容纳标签页标题时的布局策略，可以选择JTabbedPane.WRAP_TAB_LAYOUT和JTabbedPane.SCROLL_TAB_LAYOUT</span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>通过JTabbedPane对象堆标签进行增删改查</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">addTab(String title, Icon icon, Component component, String tip):添加标签</span><br><span class="line">	title:标签的名称</span><br><span class="line">	icon:标签的图标</span><br><span class="line">	component:标签对应的组件</span><br><span class="line">	tip:光标放到标签上的提示</span><br><span class="line">	</span><br><span class="line">insertTab(String title, Icon icon, Component component, String tip, <span class="type">int</span> index):插入标签页</span><br><span class="line">	title:标签的名称</span><br><span class="line">	icon:标签的图标</span><br><span class="line">	component:标签对应的组件</span><br><span class="line">	tip:光标放到标签上的提示</span><br><span class="line">	index:在哪个索引处插入标签页</span><br><span class="line">setComponentAt(<span class="type">int</span> index, Component component):修改标签页对应的组件</span><br><span class="line">	index:修改哪个索引处的标签</span><br><span class="line">	component:标签对应的组件</span><br><span class="line">removeTabAt(<span class="type">int</span> index):</span><br><span class="line">	index:删除哪个索引处的标签</span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li>设置当前显示的标签页</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">setSelectedIndex(<span class="type">int</span> index):设置哪个索引处的标签被选中</span><br></pre></td></tr></table></figure></div>

<ol start="4">
<li>设置JTabbedPane的其他属性</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">setDisabledIconAt(<span class="type">int</span> index, Icon disabledIcon): 将指定位置的禁用图标设置为 icon，该图标也可以是<span class="literal">null</span>表示不使用禁用图标。</span><br><span class="line">setEnabledAt(<span class="type">int</span> index, <span class="type">boolean</span> enabled): 设置指定位置的标签页是否启用。</span><br><span class="line">setTitleAt(<span class="type">int</span> index, String title): 设置指定位置标签页的标题为 title，该title可以是<span class="literal">null</span>,这表明设置该标签页的标题为空。</span><br><span class="line">setToolTipTextAt(<span class="type">int</span> index, String toolTipText): 设置指定位置标签页的提示文本 。</span><br></pre></td></tr></table></figure></div>

<ol start="5">
<li>为JTabbedPane设置监听器</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">addChangeListener(ChangeListener l)</span><br></pre></td></tr></table></figure></div>

<p><strong>案例：</strong></p>
<p>​	请使用JTabbedPane完成下图功能：</p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309051047991.jpg"
                     
                ></p>
<p><strong>演示代码：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ChangeEvent;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ChangeListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JTabbedPaneTest</span> &#123;</span><br><span class="line">    <span class="type">JFrame</span> <span class="variable">jf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;测试JTabbedPane&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">JTabbedPane</span> <span class="variable">tabbedPane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTabbedPane</span>(SwingConstants.TOP,JTabbedPane.WRAP_TAB_LAYOUT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置jf大小</span></span><br><span class="line">        jf.setBounds(<span class="number">400</span>,<span class="number">400</span>,<span class="number">400</span>,<span class="number">400</span>);</span><br><span class="line">        <span class="comment">//设置jf大小不能变化</span></span><br><span class="line">        jf.setResizable(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">ImageIcon</span> <span class="variable">icon</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImageIcon</span>(ImagePathUtil.getRealPath(<span class="string">&quot;3\\open.gif&quot;</span>));</span><br><span class="line">        <span class="comment">//添加标签</span></span><br><span class="line">        tabbedPane.addTab(<span class="string">&quot;用户管理&quot;</span>,icon,<span class="keyword">new</span> <span class="title class_">JList</span>&lt;String&gt;(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;用户一&quot;</span>,<span class="string">&quot;用户二&quot;</span>,<span class="string">&quot;用户三&quot;</span>&#125;));</span><br><span class="line">        tabbedPane.addTab(<span class="string">&quot;商品管理&quot;</span>,<span class="keyword">new</span> <span class="title class_">JList</span>&lt;String&gt;(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;商品一&quot;</span>,<span class="string">&quot;商品二&quot;</span>,<span class="string">&quot;商品三&quot;</span>&#125;));</span><br><span class="line">        tabbedPane.addTab(<span class="string">&quot;订单管理&quot;</span>,icon,<span class="keyword">new</span> <span class="title class_">JList</span>&lt;String&gt;(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;订单一&quot;</span>,<span class="string">&quot;订单二&quot;</span>,<span class="string">&quot;订单三&quot;</span>&#125;));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置第二个标签默认选中</span></span><br><span class="line">        tabbedPane.setSelectedIndex(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//设置第一个标签不能用</span></span><br><span class="line">        tabbedPane.setEnabledAt(<span class="number">0</span>,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        tabbedPane.addChangeListener(<span class="keyword">new</span> <span class="title class_">ChangeListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stateChanged</span><span class="params">(ChangeEvent e)</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">selectedIndex</span> <span class="operator">=</span> tabbedPane.getSelectedIndex();</span><br><span class="line">                JOptionPane.showMessageDialog(jf,<span class="string">&quot;选中了第&quot;</span>+(selectedIndex+<span class="number">1</span>)+<span class="string">&quot;个标签&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        jf.add(tabbedPane);</span><br><span class="line">        jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        jf.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JTabbedPaneTest</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h3 id="3-3-3-使用JLayeredPane、JDesktopPane、JInternalFrame"><a href="#3-3-3-使用JLayeredPane、JDesktopPane、JInternalFrame" class="headerlink" title="3.3.3 使用JLayeredPane、JDesktopPane、JInternalFrame"></a>3.3.3 使用JLayeredPane、JDesktopPane、JInternalFrame</h3><h4 id="3-3-3-1-JLayeredPane"><a href="#3-3-3-1-JLayeredPane" class="headerlink" title="3.3.3.1 JLayeredPane"></a>3.3.3.1 JLayeredPane</h4><p>JLayeredPane是 一个代表有层 次深度的容器 ， 它允许组件在需要 时 互相重叠。当向JLayeredPane容器中添加组件时， 需要为该组件指定一个深度索引 ， 其中层次索引较高 的层里的组件位于其他层的组件之上。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309051047373.gif"
                     
                ></p>
<p>JLayeredPane 还将容器的层次深度分成几个默认层 ，程序只是将组件放入相应 的层 ，从而可以更容易地确保组件的正确重叠 ， 无须为组件指定具体的深度索引。JLayeredPane 提供了如下几个默认层：</p>
<ol>
<li>DEFAULT_LAYER:大多数组件位于标准层，这是最底层；</li>
<li>PALETTE_LAYER : 调色板层位于默认层之上 。该层对于浮动工具栏和调色板很有用，因此可以位于其他组件之上 。</li>
<li>MODAL_LAYER: 该层用于显示模式对话框。它们将出现在容器中所有工具栏 、调色板或标准组件的上面 。</li>
<li>POPUP_LAYER : 该层用于显示右键菜单 ， 与对话框 、工具提示和普通组件关联的弹出式窗口将出现在对应的对话框、工具提示和普通组件之上。</li>
<li>DRAG_LAYER: 该层用于放置拖放过程中的组件(关于拖放操作请看下一节内 容) ，拖放操作中的组件位于所有组件之上 。 一旦拖放操作结束后 ， 该组件将重新分配到其所属的正常层。</li>
</ol>
<p><strong>JLayeredPane 方法：</strong></p>
<ol>
<li>moveToBack(Component c)：把当前组件c移动到所在层的所有组件的最后一个位置；</li>
<li>moveToFront(Component c)：把当前组件c移动到所在层的所有组件的第一个位置；</li>
<li>setLayer(Component c, int layer)：更改组件c所处的层；</li>
</ol>
<p>需要注意的是，往JLayeredPane中添加组件，如果要显示，则必须手动设置该组件在容器中显示的位置以及大小。</p>
<p><strong>案例：</strong></p>
<p>​	使用JLayeredPane完成下图效果：</p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309051047075.jpg"
                     
                ></p>
<p><strong>演示代码：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.itcast.swing.util.ImagePathUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JLayeredPaneTest</span> &#123;</span><br><span class="line">    <span class="type">JFrame</span> <span class="variable">jf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;测试JLayeredPane&quot;</span>);</span><br><span class="line">    <span class="type">JLayeredPane</span> <span class="variable">layeredPane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLayeredPane</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义组件，继承JPanel</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">ContentPanel</span> <span class="keyword">extends</span> <span class="title class_">JPanel</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ContentPanel</span><span class="params">(<span class="type">int</span> xPos,<span class="type">int</span> yPos,String title,String ico)</span>&#123;</span><br><span class="line">            <span class="comment">//设置边框</span></span><br><span class="line">            setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),title));</span><br><span class="line">            <span class="type">JLabel</span> <span class="variable">label</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="keyword">new</span> <span class="title class_">ImageIcon</span>(ImagePathUtil.getRealPath(<span class="string">&quot;3\\&quot;</span>+ico)));</span><br><span class="line">            add(label);</span><br><span class="line">            setBounds(xPos,yPos,<span class="number">160</span>,<span class="number">220</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//向LayeredPane中添加三个组件，往JLayeredPane中添加组件，都必须手动的设置组件显示的位置和大小，才能显示出来</span></span><br><span class="line"></span><br><span class="line">        layeredPane.add(<span class="keyword">new</span> <span class="title class_">ContentPanel</span>(<span class="number">10</span>,<span class="number">20</span>,<span class="string">&quot;java自学宝典&quot;</span>,<span class="string">&quot;java.png&quot;</span>),JLayeredPane.MODAL_LAYER);</span><br><span class="line">        layeredPane.add(<span class="keyword">new</span> <span class="title class_">ContentPanel</span>(<span class="number">100</span>,<span class="number">60</span>,<span class="string">&quot;Android基础教程&quot;</span>,<span class="string">&quot;android.png&quot;</span>),JLayeredPane.DEFAULT_LAYER);</span><br><span class="line">        layeredPane.add(<span class="keyword">new</span> <span class="title class_">ContentPanel</span>(<span class="number">80</span>,<span class="number">100</span>,<span class="string">&quot;轻量级javaEE企业应用&quot;</span>,<span class="string">&quot;ee.png&quot;</span>),JLayeredPane.DRAG_LAYER);</span><br><span class="line"></span><br><span class="line">        layeredPane.setPreferredSize(<span class="keyword">new</span> <span class="title class_">Dimension</span>(<span class="number">300</span>,<span class="number">400</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        jf.add(layeredPane);</span><br><span class="line">        jf.pack();</span><br><span class="line">        jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        jf.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JLayeredPaneTest</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="3-3-3-2-JDesktopPane和JInternalFrame"><a href="#3-3-3-2-JDesktopPane和JInternalFrame" class="headerlink" title="3.3.3.2 JDesktopPane和JInternalFrame"></a>3.3.3.2 JDesktopPane和JInternalFrame</h4><p>JDesktopPane是JLayeredPane的子类，这种容器在开发中会更常用很多应用程序都需要启动多个内部窗口来显示信息（典型的比如IDEA、NotePad++），这些内部窗口都属于同一个外部窗口，当外部窗 口 最小化时， 这些内部窗口都被隐藏起来。在 Windows 环境中，这<br>种用户界面被称为多文档界面 C Multiple Document Interface, MDI) 。</p>
<p>使用 Swing 可以非常简单地创建出这种 MDI 界面 ， 通常，内部窗口有自己的标题栏、标题、图标、三个窗口按钮，并允许拖动改变内部窗口 的大小和位置，但内部窗口不能拖出外部窗口。</p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309051047420.jpg"
                      style="zoom:50%;" 
                ></p>
<p>JDesktopPane 需要和 JIntemalFrame 结合使用，其中JDesktopPane 代表一 个虚拟桌面 ，而JIntemalFrame则用于创建内部窗口。使用 JDesktopPane 和 JIntemalFrame 创建内部窗口按如下步骤进行即可:</p>
<ol>
<li>创建 一 个 JDesktopPane 对象,代表虚拟桌面</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">JDesktopPane()</span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>使用 JIntemalFrame 创建一个内部窗口</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">JInternalFrame(String title, <span class="type">boolean</span> resizable, <span class="type">boolean</span> closable, <span class="type">boolean</span> maximizable, <span class="type">boolean</span> iconifiable):</span><br><span class="line">	title: 内部窗口标题</span><br><span class="line">	resizable:是否可改变大小</span><br><span class="line">	closeble: 是否可关闭</span><br><span class="line">	maximizable: 是否可最大化</span><br><span class="line">	iconifiable:是否可最小化</span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li>一旦获得了内部窗口之后，该窗口的用法和普通窗口的用法基本相似， 一样可以指定该窗口的布局管理器， 一样可以向窗口内添加组件、改变窗口图标等。</li>
<li>将该内部窗口以合适大小、在合适位置显示出来 。与普通窗口类似的是， 该窗口默认大小是 0x0像素，位于0，0 位置(虚拟桌面的左上角处)，并且默认处于隐藏状态，程序可以通过如下代码将内部窗口显示出来:</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">reshape(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> width, <span class="type">int</span> height):设置内部窗口的大小以及在外部窗口中的位置；</span><br><span class="line">show():设置内部窗口可见</span><br></pre></td></tr></table></figure></div>

<ol start="5">
<li>将内部窗口添加到 JDesktopPane 容器中，再将 JDesktopPane 容器添加到其他容器中。</li>
</ol>
<p><strong>案例：</strong></p>
<p>​	请使用JDesktopPane和JInternalFrame完成下图效果：</p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309051047934.jpg"
                      style="zoom:50%;" 
                ></p>
<p><strong>演示代码：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.itcast.swing.util.ImagePathUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JInternalFrameTest</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DESKTOP_WIDTH</span> <span class="operator">=</span> <span class="number">480</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DESKTOP_HEIGHT</span> <span class="operator">=</span> <span class="number">360</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">FRAME_DISTANCE</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建外部窗口</span></span><br><span class="line">    <span class="type">JFrame</span> <span class="variable">jf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;测试JInternalFrame&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建虚拟桌面</span></span><br><span class="line">    <span class="type">JDesktopPane</span> <span class="variable">desktop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JDesktopPane</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义内部窗口为的大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> <span class="number">230</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> DESKTOP_HEIGHT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义下一个内部窗口的横轴坐标</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">nextFrameX</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为外部窗口定义两个菜单</span></span><br><span class="line">    <span class="type">JMenu</span> <span class="variable">fileMenu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenu</span>(<span class="string">&quot;文件&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义Action，用于快捷创建菜单项和工具按钮</span></span><br><span class="line">    <span class="type">Action</span> <span class="variable">newAction</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AbstractAction</span>(<span class="string">&quot;新建&quot;</span>,<span class="keyword">new</span> <span class="title class_">ImageIcon</span>(ImagePathUtil.getRealPath(<span class="string">&quot;3\\new.png&quot;</span>))) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">            <span class="comment">//创建内部窗口</span></span><br><span class="line">            <span class="type">JInternalFrame</span> <span class="variable">iframe</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JInternalFrame</span>(<span class="string">&quot;新文档&quot;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//往内部窗口中添加一个8行40列的文本框</span></span><br><span class="line">            iframe.add(<span class="keyword">new</span> <span class="title class_">JScrollPane</span>(<span class="keyword">new</span> <span class="title class_">JTextArea</span>(<span class="number">8</span>,<span class="number">40</span>)));</span><br><span class="line">            <span class="comment">//将内部窗口添加到虚拟桌面中</span></span><br><span class="line">            desktop.add(iframe);</span><br><span class="line">            <span class="comment">//设置内部窗口的原始位置</span></span><br><span class="line">            iframe.reshape(nextFrameX,<span class="number">0</span>,width,height);</span><br><span class="line">            <span class="comment">//使该窗口可见</span></span><br><span class="line">            iframe.show();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//计算下一个内部窗口的位置</span></span><br><span class="line">            nextFrameX+=FRAME_DISTANCE;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (nextFrameX&gt;DESKTOP_WIDTH-width)&#123;</span><br><span class="line">                nextFrameX=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">Action</span> <span class="variable">exitAction</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AbstractAction</span>(<span class="string">&quot;退出&quot;</span>,<span class="keyword">new</span> <span class="title class_">ImageIcon</span>(ImagePathUtil.getRealPath(<span class="string">&quot;3\\exit.png&quot;</span>))) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">            <span class="comment">//结束当前程序</span></span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为窗口安装菜单条</span></span><br><span class="line">        <span class="type">JMenuBar</span> <span class="variable">menuBar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuBar</span>();</span><br><span class="line"></span><br><span class="line">        jf.setJMenuBar(menuBar);</span><br><span class="line">        menuBar.add(fileMenu);</span><br><span class="line">        fileMenu.add(newAction);</span><br><span class="line">        fileMenu.add(exitAction);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置虚拟桌面的最佳大小</span></span><br><span class="line">        desktop.setPreferredSize(<span class="keyword">new</span> <span class="title class_">Dimension</span>(DESKTOP_WIDTH,DESKTOP_HEIGHT));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将虚拟桌面添加到外部窗口中</span></span><br><span class="line">        jf.add(desktop);</span><br><span class="line"></span><br><span class="line">        jf.pack();</span><br><span class="line">        jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        jf.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JInternalFrameTest</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="3-4-JProcessBar、ProcessMonitor、BoundedRangeModel实现进度条"><a href="#3-4-JProcessBar、ProcessMonitor、BoundedRangeModel实现进度条" class="headerlink" title="3.4 JProcessBar、ProcessMonitor、BoundedRangeModel实现进度条"></a>3.4 JProcessBar、ProcessMonitor、BoundedRangeModel实现进度条</h2><p>进度条是图形界面中广泛使用的GUI 组件，当复制一个较大的文件时，操作系统会显示一个进度条，用于标识复制操作完成的比例 : 当启动 Eclipse 等程序时， 因为需要加载较多的资源 ， 故而启动速度较慢 ， 程序也会在启动过程中显示一个进度条 ， 用以表示该软件启动完成的比例 ……</p>
<h3 id="3-4-1-创建进度条"><a href="#3-4-1-创建进度条" class="headerlink" title="3.4.1 创建进度条"></a>3.4.1 创建进度条</h3><p>使用JProgressBar创建进度条的步骤：</p>
<ol>
<li>创建JProgressBar对象</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">JProgressBar</span><span class="params">(<span class="type">int</span> orient, <span class="type">int</span> min, <span class="type">int</span> max)</span>:</span><br><span class="line">	orint:方向</span><br><span class="line">	min:最小值</span><br><span class="line">	max:最大值</span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>设置属性</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">setBorderPainted(<span class="type">boolean</span> b):设置进度条是否有边框</span><br><span class="line">setIndeterminate(<span class="type">boolean</span> newValue):设置当前进度条是不是进度不确定的进度条，如果是，则将看到一个滑块在进度条中左右移动</span><br><span class="line">setStringPainted(<span class="type">boolean</span> b)：设置进度条是否显示当前完成的百分比</span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li>获取和设置当前进度条的进度状态</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">setValue(<span class="type">int</span> n):设置当前进度值</span><br><span class="line"><span class="type">double</span> <span class="title function_">getPercentComplete</span><span class="params">()</span>:获取进度条的完成百分比</span><br><span class="line">String  <span class="title function_">getStrin</span><span class="params">()</span>:返回进度字符串的当前值</span><br></pre></td></tr></table></figure></div>

<p><strong>案例：</strong></p>
<p>​	请使用JProgressBar完成下图效果：</p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309051047761.jpg"
                     
                ></p>
<p><strong>演示代码：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JProgressTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">JFrame</span> <span class="variable">jf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;测试进度条&quot;</span>);</span><br><span class="line">    <span class="comment">//创建一个垂直进度条</span></span><br><span class="line">    <span class="type">JProgressBar</span> <span class="variable">bar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JProgressBar</span>(JProgressBar.HORIZONTAL);</span><br><span class="line"></span><br><span class="line">    <span class="type">JCheckBox</span> <span class="variable">indeterminate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JCheckBox</span>(<span class="string">&quot;不确定进度&quot;</span>);</span><br><span class="line">    <span class="type">JCheckBox</span> <span class="variable">noBorder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JCheckBox</span>(<span class="string">&quot;不绘制边框&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Box</span> <span class="variable">box</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Box</span>(BoxLayout.Y_AXIS);</span><br><span class="line">        box.add(indeterminate);</span><br><span class="line">        box.add(noBorder);</span><br><span class="line"></span><br><span class="line">        jf.setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>());</span><br><span class="line">        jf.add(box);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把进度条添加到jf窗口中</span></span><br><span class="line">        jf.add(bar);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置进度条的最大值和最小值</span></span><br><span class="line">        bar.setMinimum(<span class="number">0</span>);</span><br><span class="line">        bar.setMaximum(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置进度条中绘制完成百分比</span></span><br><span class="line">        bar.setStringPainted(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据选择决定是否绘制进度条边框</span></span><br><span class="line">        noBorder.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> noBorder.isSelected();</span><br><span class="line">                bar.setBorderPainted(!flag);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据选择决定是否是不确定进度条</span></span><br><span class="line">        indeterminate.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> indeterminate.isSelected();</span><br><span class="line">                bar.setIndeterminate(flag);</span><br><span class="line">                <span class="comment">//不绘制百分比，因为之前设置了绘制百分比</span></span><br><span class="line">                bar.setStringPainted(!flag);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        jf.pack();</span><br><span class="line">        jf.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过循环不断改变进度条的完成进度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//改变进度条的完成进度</span></span><br><span class="line">            bar.setValue(i);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JProgressTest</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>在刚才的程序中，通过for循环来不断的更新进度条的进度，这仅仅是为了演示而已，实际开发中这样的操作是没有意义的。通常情况下是不断的检测一个耗时任务的完成情况，然后才去更新进度条的进度。下面的代码通过Timer定时器和Runnable接口，对上述代码进行改进，其运行结果没有变化，知识修改到了进度条进度更新的逻辑。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ChangeEvent;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ChangeListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JProgressTest2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">JFrame</span> <span class="variable">jf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;测试进度条&quot;</span>);</span><br><span class="line">    <span class="comment">//创建一个垂直进度条</span></span><br><span class="line">    <span class="type">JProgressBar</span> <span class="variable">bar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JProgressBar</span>(JProgressBar.HORIZONTAL);</span><br><span class="line"></span><br><span class="line">    <span class="type">JCheckBox</span> <span class="variable">indeterminate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JCheckBox</span>(<span class="string">&quot;不确定进度&quot;</span>);</span><br><span class="line">    <span class="type">JCheckBox</span> <span class="variable">noBorder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JCheckBox</span>(<span class="string">&quot;不绘制边框&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Box</span> <span class="variable">box</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Box</span>(BoxLayout.Y_AXIS);</span><br><span class="line">        box.add(indeterminate);</span><br><span class="line">        box.add(noBorder);</span><br><span class="line"></span><br><span class="line">        jf.setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>());</span><br><span class="line">        jf.add(box);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把进度条添加到jf窗口中</span></span><br><span class="line">        jf.add(bar);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启耗时任务</span></span><br><span class="line">        <span class="type">SimulatedActivity</span> <span class="variable">simulatedActivity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimulatedActivity</span>(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(simulatedActivity).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置进度条的最大值和最小值</span></span><br><span class="line">        bar.setMinimum(<span class="number">0</span>);</span><br><span class="line">        bar.setMaximum(simulatedActivity.getAmount());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置进度条中绘制完成百分比</span></span><br><span class="line">        bar.setStringPainted(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据选择决定是否绘制进度条边框</span></span><br><span class="line">        noBorder.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> noBorder.isSelected();</span><br><span class="line">                bar.setBorderPainted(!flag);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据选择决定是否是不确定进度条</span></span><br><span class="line">        indeterminate.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> indeterminate.isSelected();</span><br><span class="line">                bar.setIndeterminate(flag);</span><br><span class="line">                <span class="comment">//不绘制百分比，因为之前设置了绘制百分比</span></span><br><span class="line">                bar.setStringPainted(!flag);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        jf.pack();</span><br><span class="line">        jf.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过定时器，不断的读取simulatedActivity中的current值，更新进度条的进度</span></span><br><span class="line">        <span class="type">Timer</span> <span class="variable">timer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timer</span>(<span class="number">300</span>, <span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                bar.setValue(simulatedActivity.getCurrent());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        timer.start();</span><br><span class="line">        <span class="comment">//监听进度条的变化，如果进度完成为100%，那么停止定时器</span></span><br><span class="line">        bar.addChangeListener(<span class="keyword">new</span> <span class="title class_">ChangeListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stateChanged</span><span class="params">(ChangeEvent e)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (   bar.getValue()==bar.getMaximum())&#123;</span><br><span class="line">                    timer.stop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JProgressTest2</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个线程任务，模拟耗时操作</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">SimulatedActivity</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">        <span class="comment">//内存可见</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> amount;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">SimulatedActivity</span><span class="params">(<span class="type">int</span> amount)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.amount = amount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCurrent</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> current;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCurrent</span><span class="params">(<span class="type">int</span> current)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.current = current;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAmount</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> amount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAmount</span><span class="params">(<span class="type">int</span> amount)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.amount = amount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">//通过循环，不断的修改current的值，模拟任务完成量</span></span><br><span class="line">            <span class="keyword">while</span>(current&lt;amount)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                current++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>之前我们学习过，其实Swing中很多组件的界面与数据都采用了MVC的设计思想：</p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309051047774.png"
                     
                ></p>
<p>Swing 组件大都将外观显示和 内部数据分离 ， JProgressBar 也不例外， JProgressBar 组件有一个内置的用于保存其状态数据的Model对象 ， 这个对象由BoundedRangeModel对象表示，程序调用JProgressBar对象的方法完成进度百分比的设置，监听进度条的数据变化，其实都是通过它内置的BoundedRangeModel对象完成的。下面的代码是对之前代码的改进，通过BoundedRangeModel完成数据的设置，获取与监听。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ChangeEvent;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ChangeListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JProgressTest3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">JFrame</span> <span class="variable">jf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;测试进度条&quot;</span>);</span><br><span class="line">    <span class="comment">//创建一个垂直进度条</span></span><br><span class="line">    <span class="type">JProgressBar</span> <span class="variable">bar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JProgressBar</span>(JProgressBar.HORIZONTAL);</span><br><span class="line"></span><br><span class="line">    <span class="type">JCheckBox</span> <span class="variable">indeterminate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JCheckBox</span>(<span class="string">&quot;不确定进度&quot;</span>);</span><br><span class="line">    <span class="type">JCheckBox</span> <span class="variable">noBorder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JCheckBox</span>(<span class="string">&quot;不绘制边框&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Box</span> <span class="variable">box</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Box</span>(BoxLayout.Y_AXIS);</span><br><span class="line">        box.add(indeterminate);</span><br><span class="line">        box.add(noBorder);</span><br><span class="line"></span><br><span class="line">        jf.setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>());</span><br><span class="line">        jf.add(box);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把进度条添加到jf窗口中</span></span><br><span class="line">        jf.add(bar);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启耗时任务</span></span><br><span class="line">        <span class="type">SimulatedActivity</span> <span class="variable">simulatedActivity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimulatedActivity</span>(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(simulatedActivity).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置进度条的最大值和最小值</span></span><br><span class="line">        bar.getModel().setMinimum(<span class="number">0</span>);</span><br><span class="line">        bar.getModel().setMaximum(simulatedActivity.getAmount());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置进度条中绘制完成百分比</span></span><br><span class="line">        bar.setStringPainted(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据选择决定是否绘制进度条边框</span></span><br><span class="line">        noBorder.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> noBorder.isSelected();</span><br><span class="line">                bar.setBorderPainted(!flag);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据选择决定是否是不确定进度条</span></span><br><span class="line">        indeterminate.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> indeterminate.isSelected();</span><br><span class="line">                bar.setIndeterminate(flag);</span><br><span class="line">                <span class="comment">//不绘制百分比，因为之前设置了绘制百分比</span></span><br><span class="line">                bar.setStringPainted(!flag);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        jf.pack();</span><br><span class="line">        jf.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过定时器，不断的读取simulatedActivity中的current值，更新进度条的进度</span></span><br><span class="line">        <span class="type">Timer</span> <span class="variable">timer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timer</span>(<span class="number">300</span>, <span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                bar.getModel().setValue(simulatedActivity.getCurrent());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        timer.start();</span><br><span class="line">        <span class="comment">//监听进度条的变化，如果进度完成为100%，那么停止定时器</span></span><br><span class="line">        bar.getModel().addChangeListener(<span class="keyword">new</span> <span class="title class_">ChangeListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stateChanged</span><span class="params">(ChangeEvent e)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (   bar.getModel().getValue()==bar.getModel().getMaximum())&#123;</span><br><span class="line">                    timer.stop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JProgressTest3</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个线程任务，模拟耗时操作</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">SimulatedActivity</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">        <span class="comment">//内存可见</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> amount;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">SimulatedActivity</span><span class="params">(<span class="type">int</span> amount)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.amount = amount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCurrent</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> current;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCurrent</span><span class="params">(<span class="type">int</span> current)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.current = current;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAmount</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> amount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAmount</span><span class="params">(<span class="type">int</span> amount)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.amount = amount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">//通过循环，不断的修改current的值，模拟任务完成量</span></span><br><span class="line">            <span class="keyword">while</span>(current&lt;amount)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                current++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-4-2-创建进度对话框"><a href="#3-4-2-创建进度对话框" class="headerlink" title="3.4.2 创建进度对话框"></a>3.4.2 创建进度对话框</h3><p>ProgressMonitor的用法与JProgressBa 的用法基本相似，只是ProgressMonitor可以直接创 建一个进度对话框，它提供了下面的构造器完成对话框的创建：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ProgressMonitor</span><span class="params">(Component parentComponent,Object message,String note, <span class="type">int</span> min,<span class="type">int</span> max)</span>:</span><br><span class="line">parentComponent:对话框的父组件</span><br><span class="line">message:对话框的描述信息</span><br><span class="line">note:对话框的提示信息</span><br><span class="line">min:进度条的最小值</span><br><span class="line">max:进度条的最大值</span><br></pre></td></tr></table></figure></div>

<p>使用 ProgressMonitor 创建的对话框里包含的进度条是非常固定的，程序甚至不能设置该进度条是否包含边框(总是包含边框) ， 不能设置进度不确定，不能改变进度条的方向(总是水平方向) 。</p>
<p><strong>案例：</strong></p>
<p>​	使用ProgressMonitor完成下图效果：</p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309051047755.jpg"
                     
                ></p>
<p><strong>演示代码：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProgressMonitorTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    Timer timer;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">SimulatedActivity</span> <span class="variable">simulatedActivity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimulatedActivity</span>(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">final</span> Thread targetThread= <span class="keyword">new</span> <span class="title class_">Thread</span>(simulatedActivity);</span><br><span class="line">        targetThread.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">ProgressMonitor</span> <span class="variable">dialog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProgressMonitor</span>(<span class="literal">null</span>, <span class="string">&quot;等待任务完成&quot;</span>, <span class="string">&quot;已完成：&quot;</span>, <span class="number">0</span>, simulatedActivity.getAmount());</span><br><span class="line"></span><br><span class="line">        timer = <span class="keyword">new</span> <span class="title class_">Timer</span>(<span class="number">300</span>, <span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                dialog.setProgress(simulatedActivity.getCurrent());</span><br><span class="line">                <span class="keyword">if</span> (dialog.isCanceled())&#123;</span><br><span class="line">                    timer.stop();</span><br><span class="line">                    targetThread.interrupt();</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        timer.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ProgressMonitorTest</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个线程任务，模拟耗时操作</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">SimulatedActivity</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">        <span class="comment">//内存可见</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> amount;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">SimulatedActivity</span><span class="params">(<span class="type">int</span> amount)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.amount = amount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCurrent</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> current;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCurrent</span><span class="params">(<span class="type">int</span> current)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.current = current;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAmount</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> amount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAmount</span><span class="params">(<span class="type">int</span> amount)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.amount = amount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">//通过循环，不断的修改current的值，模拟任务完成量</span></span><br><span class="line">            <span class="keyword">while</span>(current&lt;amount)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                current++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="3-5-JList、JComboBox实现列表框"><a href="#3-5-JList、JComboBox实现列表框" class="headerlink" title="3.5 JList、JComboBox实现列表框"></a>3.5 JList、JComboBox实现列表框</h2><p>无论从哪个角度来看， JList 和 JComboBox 都是极其相似的，它们都有一个列表框，只是 JComboBox的列表框需要 以下拉方式显示出来; JList 和 JComboBox 都可以通过调用 setRendererO方法来改变列表项的表现形式 。甚至维护这两个组件的 Model 都是相似的， JList 使用 ListModel, JComboBox 使用ComboBoxModel ，而 ComboBoxModel 是 ListModel 的子类 。</p>
<h3 id="3-5-1-简单列表框"><a href="#3-5-1-简单列表框" class="headerlink" title="3.5.1 简单列表框"></a>3.5.1 简单列表框</h3><p>使用JList或JComboBox实现简单列表框的步骤：</p>
<ol>
<li>创建JList或JComboBox对象</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">JList(<span class="keyword">final</span> E[] listData):创建JList对象，把listData数组中的每项内容转换成一个列表项展示</span><br><span class="line">JList(<span class="keyword">final</span> Vector&lt;? <span class="keyword">extends</span> <span class="title class_">E</span>&gt; listData):创建JList对象，把listData数组中的每项内容转换成一个列表项展示</span><br><span class="line">JComboBox(E[] items):</span><br><span class="line">JComboBox(Vector&lt;E&gt; items):</span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>设置JList或JComboBox的外观行为</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">---------------------------JList----------------------------------------------</span><br><span class="line">addSelectionInterval(<span class="type">int</span> anchor, <span class="type">int</span> lead):在已经选中列表项的基础上，增加选中从anchor到lead索引范围内的所有列表项</span><br><span class="line">setFixedCellHeight(<span class="type">int</span> height)/setFixedCellWidth(<span class="type">int</span> width):设置列表项的高度和宽度</span><br><span class="line">setLayoutOrientation(<span class="type">int</span> layoutOrientation)：设置列表框的布局方向</span><br><span class="line">setSelectedIndex(<span class="type">int</span> index)：设置默认选中项</span><br><span class="line">setSelectedIndices(<span class="type">int</span>[] indices)：设置默认选中的多个列表项</span><br><span class="line">setSelectedValue(Object anObject,<span class="type">boolean</span> shouldScroll)：设置默认选中项，并滚动到该项显示</span><br><span class="line">setSelectionBackground(Color selectionBackground)：设置选中项的背景颜色</span><br><span class="line">setSelectionForeground(Color selectionForeground)：设置选中项的前景色</span><br><span class="line">setSelectionInterval(<span class="type">int</span> anchor, <span class="type">int</span> lead):设置从anchor到lead范围内的所有列表项被选中</span><br><span class="line">setSelectionMode(<span class="type">int</span> selectionMode)：设置选中模式，默认没有限制，也可以设置为单选或者区域选中</span><br><span class="line">setVisibleRowCount(<span class="type">int</span> visibleRowCount)：设置列表框的可是高度足以显示多少行列表项</span><br><span class="line">---------------------------JComboBox---------------------------------------------- </span><br><span class="line">setEditable(<span class="type">boolean</span> aFlag)：设置是否可以直接修改列表文本框的值，默认为不可以</span><br><span class="line">setMaximumRowCount(<span class="type">int</span> count)：设置列表框的可是高度足以显示多少行列表项</span><br><span class="line">setSelectedIndex(<span class="type">int</span> anIndex)：设置默认选中项</span><br><span class="line">setSelectedItem(Object anObject)：根据列表项的值，设置默认选中项</span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li>设置监听器，监听列表项的变化，JList通过addListSelectionListener完成，JComboBox通过addItemListener完成</li>
</ol>
<p><strong>案例：</strong></p>
<p>​	使用JList和JComboBox完成下图效果：</p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309051047737.jpg"
                      style="zoom: 67%;" 
                ></p>
<p><strong>演示代码：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.border.EtchedBorder;</span><br><span class="line"><span class="keyword">import</span> javax.swing.border.TitledBorder;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ListSelectionEvent;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ListSelectionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ItemEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ItemListener;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListTest</span> &#123;</span><br><span class="line">    <span class="type">JFrame</span> <span class="variable">mainWin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;列表框测试&quot;</span>);</span><br><span class="line">    String[] books = &#123;<span class="string">&quot;java自学宝典&quot;</span>,<span class="string">&quot;轻量级javaEE企业应用实战&quot;</span>,<span class="string">&quot;Android基础教程&quot;</span>,<span class="string">&quot;jQuery实战教程&quot;</span>,<span class="string">&quot;SpringBoot企业级开发&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用一个字符串数组来创建一个JList对象</span></span><br><span class="line">    JList&lt;String&gt; bookList = <span class="keyword">new</span> <span class="title class_">JList</span>&lt;&gt;(books);</span><br><span class="line">    JComboBox&lt;String&gt; bookSelector;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义 布局选择按钮 所在的面板</span></span><br><span class="line">    <span class="type">JPanel</span> <span class="variable">layoutPanel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">    <span class="type">ButtonGroup</span> <span class="variable">layoutGroup</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ButtonGroup</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义 选择模式按钮 所在面板</span></span><br><span class="line">    <span class="type">JPanel</span> <span class="variable">selectModePanel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">    <span class="type">ButtonGroup</span> <span class="variable">selectModeGroup</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ButtonGroup</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">JTextArea</span> <span class="variable">favorite</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextArea</span>(<span class="number">4</span>,<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//设置JList的可视高度可以同时展示3个列表项</span></span><br><span class="line">        bookList.setVisibleRowCount(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置Jlist默认选中第三项到第五项</span></span><br><span class="line">        bookList.setSelectionInterval(<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">        addLayoutButton(<span class="string">&quot;纵向滚动&quot;</span>,JList.VERTICAL);</span><br><span class="line">        addLayoutButton(<span class="string">&quot;纵向换行&quot;</span>,JList.VERTICAL_WRAP);</span><br><span class="line">        addLayoutButton(<span class="string">&quot;横向换行&quot;</span>,JList.HORIZONTAL_WRAP);</span><br><span class="line"></span><br><span class="line">        addSelectModeButton(<span class="string">&quot;无限制&quot;</span>, ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);</span><br><span class="line">        addSelectModeButton(<span class="string">&quot;单选&quot;</span>, ListSelectionModel.SINGLE_SELECTION);</span><br><span class="line">        addSelectModeButton(<span class="string">&quot;单范围&quot;</span>, ListSelectionModel.SINGLE_INTERVAL_SELECTION);</span><br><span class="line"></span><br><span class="line">        <span class="type">Box</span> <span class="variable">listBox</span> <span class="operator">=</span> Box.createVerticalBox();</span><br><span class="line">        <span class="comment">//将JList组件放置到JScrollPane中，并将JScrollPane放置到box中</span></span><br><span class="line">        listBox.add(<span class="keyword">new</span> <span class="title class_">JScrollPane</span>(bookList));</span><br><span class="line">        listBox.add(layoutPanel);</span><br><span class="line">        listBox.add(selectModePanel);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为JList添加事件监听器</span></span><br><span class="line">        bookList.addListSelectionListener(<span class="keyword">new</span> <span class="title class_">ListSelectionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">valueChanged</span><span class="params">(ListSelectionEvent e)</span> &#123;</span><br><span class="line">                List&lt;String&gt; selectedValuesList = bookList.getSelectedValuesList();</span><br><span class="line">                favorite.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (String s : selectedValuesList) &#123;</span><br><span class="line">                    favorite.append(s+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个Vector对象</span></span><br><span class="line">        Vector&lt;String&gt; bookCollection = <span class="keyword">new</span> <span class="title class_">Vector</span>&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; books = List.of(<span class="string">&quot;java自学宝典&quot;</span>,<span class="string">&quot;轻量级javaEE企业应用实战&quot;</span>,<span class="string">&quot;Android基础教程&quot;</span>,<span class="string">&quot;jQuery实战教程&quot;</span>,<span class="string">&quot;SpringBoot企业级开发&quot;</span>);</span><br><span class="line">        bookCollection.addAll(books);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建JComboBox对象</span></span><br><span class="line">        bookSelector = <span class="keyword">new</span> <span class="title class_">JComboBox</span>&lt;&gt;(bookCollection);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为JComboBox添加事件监听器</span></span><br><span class="line">        bookSelector.addItemListener(<span class="keyword">new</span> <span class="title class_">ItemListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">itemStateChanged</span><span class="params">(ItemEvent e)</span> &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">selectedItem</span> <span class="operator">=</span> bookSelector.getSelectedItem();</span><br><span class="line">                favorite.setText(selectedItem.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置JComboBox的列表项可编辑</span></span><br><span class="line">        bookSelector.setEditable(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置下拉列表的可视高度最多显示4个列表项</span></span><br><span class="line">        bookSelector.setMaximumRowCount(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">JPanel</span> <span class="variable">panel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">        panel.add(bookSelector);</span><br><span class="line">        <span class="type">Box</span> <span class="variable">box</span> <span class="operator">=</span> Box.createHorizontalBox();</span><br><span class="line">        box.add(listBox);</span><br><span class="line">        box.add(panel);</span><br><span class="line"></span><br><span class="line">        <span class="type">JPanel</span> <span class="variable">favoritePanel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">        favoritePanel.setLayout(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>());</span><br><span class="line">        favoritePanel.add(<span class="keyword">new</span> <span class="title class_">JScrollPane</span>(favorite));</span><br><span class="line">        favoritePanel.add(<span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;您最喜欢的图书：&quot;</span>),BorderLayout.NORTH);</span><br><span class="line"></span><br><span class="line">        mainWin.add(box);</span><br><span class="line">        mainWin.add(favoritePanel,BorderLayout.SOUTH);</span><br><span class="line">        mainWin.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        mainWin.pack();</span><br><span class="line">        mainWin.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addLayoutButton</span><span class="params">(String label,<span class="type">int</span> orientation)</span>&#123;</span><br><span class="line">        layoutPanel.setBorder(<span class="keyword">new</span> <span class="title class_">TitledBorder</span>(<span class="keyword">new</span> <span class="title class_">EtchedBorder</span>(),<span class="string">&quot;确定选项布局&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">JRadioButton</span> <span class="variable">button</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JRadioButton</span>(label);</span><br><span class="line"></span><br><span class="line">        layoutPanel.add(button);</span><br><span class="line">        <span class="comment">//默认选中第一个按钮</span></span><br><span class="line">        <span class="keyword">if</span> (layoutGroup.getButtonCount()==<span class="number">0</span>)&#123;</span><br><span class="line">            button.setSelected(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        layoutGroup.add(button);</span><br><span class="line">        button.addActionListener(e-&gt;&#123;</span><br><span class="line">            <span class="comment">//改变列表框里列表项的布局方向</span></span><br><span class="line">            bookList.setLayoutOrientation(orientation);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addSelectModeButton</span><span class="params">(String label,<span class="type">int</span> selectMode)</span>&#123;</span><br><span class="line">        selectModePanel.setBorder(<span class="keyword">new</span> <span class="title class_">TitledBorder</span>(<span class="keyword">new</span> <span class="title class_">EtchedBorder</span>(),<span class="string">&quot;确定选择模式&quot;</span>));</span><br><span class="line">        <span class="type">JRadioButton</span> <span class="variable">button</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JRadioButton</span>(label);</span><br><span class="line">        selectModePanel.add(button);</span><br><span class="line">        <span class="keyword">if</span> (selectModeGroup.getButtonCount()==<span class="number">0</span>)&#123;</span><br><span class="line">            button.setSelected(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        selectModeGroup.add(button);</span><br><span class="line">        button.addActionListener(e-&gt;&#123;</span><br><span class="line">            bookList.setSelectionMode(selectMode);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ListTest</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-5-2-不强制存储列表项的ListModel和ComboBoxModel"><a href="#3-5-2-不强制存储列表项的ListModel和ComboBoxModel" class="headerlink" title="3.5.2 不强制存储列表项的ListModel和ComboBoxModel"></a>3.5.2 不强制存储列表项的ListModel和ComboBoxModel</h3><p>与JProgressBar一样，JList和JComboBox也采用了MVC的设计模式，JList和JComboBox只负责外观的显示，而组件底层的状态数据则由对应的Model来维护。JList对应的Model是ListModel接口，JComboBox对应的Model是ComboBox接口，其代码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ListModel</span>&lt;E&gt;&#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> <span class="title function_">getSize</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">  E <span class="title function_">getElementAt</span><span class="params">(<span class="type">int</span> index)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">addListDataListener</span><span class="params">(ListDataListener l)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">removeListDataListener</span><span class="params">(ListDataListener l)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ComboBoxModel</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">ListModel</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">setSelectedItem</span><span class="params">(Object anItem)</span>;</span><br><span class="line"></span><br><span class="line">  Object <span class="title function_">getSelectedItem</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>从上面接口来看，这个 ListMode l 不管 JList 里的所有列表项的存储形式，它甚至不强制存储所有的列表项，只要 ListModel的实现类提供了getSize()和 getElementAt()两个方法 ， JList 就可以根据该ListModel 对象来生成列表框 。ComboBoxModel 继承了 ListModel ，它添加了”选择项”的概念，选择项代表 JComboBox 显示区域内可见的列表项 。 </p>
<p>在使用JList和JComboBox时，除了可以使用jdk提供的Model实现类，程序员自己也可以根据需求，自己定义Model的实现类，实现对应的方法使用。</p>
<p><strong>案例：</strong></p>
<p>​	自定义NumberListModel和NumberComboBoxModel实现类，允许使用数值范围来创建JList和JComboBox</p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309051048668.jpg"
                     
                ></p>
<p><strong>演示代码：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.math.RoundingMode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NumberListModel</span> <span class="keyword">extends</span> <span class="title class_">AbstractListModel</span>&lt;BigDecimal&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> BigDecimal start;</span><br><span class="line">    <span class="keyword">protected</span> BigDecimal end;</span><br><span class="line">    <span class="keyword">protected</span> BigDecimal step;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NumberListModel</span><span class="params">(<span class="type">double</span> start,<span class="type">double</span> end,<span class="type">double</span> step)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.start = <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(start);</span><br><span class="line">        <span class="built_in">this</span>.end = <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(end);</span><br><span class="line">        <span class="built_in">this</span>.step = <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(step);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">floor</span> <span class="operator">=</span> (<span class="type">int</span>) Math.floor(end.subtract(start).divide(step,<span class="number">2</span>, RoundingMode.HALF_DOWN).doubleValue());</span><br><span class="line">        <span class="keyword">return</span> floor+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> BigDecimal <span class="title function_">getElementAt</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BigDecimal.valueOf(index).multiply(step).add(start).setScale(<span class="number">1</span>,RoundingMode.HALF_DOWN);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.math.RoundingMode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NumberComboBoxModel</span> <span class="keyword">extends</span> <span class="title class_">NumberListModel</span> <span class="keyword">implements</span> <span class="title class_">ComboBoxModel</span>&lt;BigDecimal&gt; &#123;</span><br><span class="line">    <span class="comment">//用于保存用户选中项的索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">selectId</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NumberComboBoxModel</span><span class="params">(<span class="type">double</span> start, <span class="type">double</span> end, <span class="type">double</span> step)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(start, end, step);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置选择项</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSelectedItem</span><span class="params">(Object anItem)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (anItem <span class="keyword">instanceof</span> BigDecimal)&#123;</span><br><span class="line">            <span class="type">BigDecimal</span> <span class="variable">target</span> <span class="operator">=</span> (BigDecimal) anItem;</span><br><span class="line">            selectId = target.subtract(<span class="built_in">super</span>.start).divide(<span class="built_in">super</span>.step,<span class="number">2</span>, RoundingMode.HALF_DOWN).intValue();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取选中项的索引</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> BigDecimal <span class="title function_">getSelectedItem</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> BigDecimal.valueOf(selectId).multiply(step).add(start).setScale(<span class="number">1</span>,RoundingMode.HALF_DOWN);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ListSelectionEvent;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ListSelectionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ItemEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ItemListener;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListModelTest</span> &#123;</span><br><span class="line">    <span class="type">JFrame</span> <span class="variable">mainWin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;测试ListModel&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据NumberListModel对象创建一个JList</span></span><br><span class="line">    JList&lt;BigDecimal&gt; numScopeList = <span class="keyword">new</span> <span class="title class_">JList</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">NumberListModel</span>(<span class="number">1</span>,<span class="number">21</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据NumberComboBoxModel对象创建一个JComboBox</span></span><br><span class="line">    JComboBox&lt;BigDecimal&gt; numScopeSelector = <span class="keyword">new</span> <span class="title class_">JComboBox</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">NumberComboBoxModel</span>(<span class="number">0.1</span>,<span class="number">1.2</span>,<span class="number">0.1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">JTextField</span> <span class="variable">showVal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextField</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//JList可视高度可同时显示四个列表项</span></span><br><span class="line">        numScopeList.setVisibleRowCount(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//默认选中第三项到第五项</span></span><br><span class="line">        numScopeList.setSelectionInterval(<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置每个列表项具有指定高度和宽度</span></span><br><span class="line">        numScopeList.setFixedCellHeight(<span class="number">30</span>);</span><br><span class="line">        numScopeList.setFixedCellWidth(<span class="number">90</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为numScopeList添加监听器</span></span><br><span class="line">        numScopeList.addListSelectionListener(<span class="keyword">new</span> <span class="title class_">ListSelectionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">valueChanged</span><span class="params">(ListSelectionEvent e)</span> &#123;</span><br><span class="line">                <span class="comment">//获取用户选中的所有数字</span></span><br><span class="line">                List&lt;BigDecimal&gt; selectedValuesList = numScopeList.getSelectedValuesList();</span><br><span class="line">                showVal.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (BigDecimal bigDecimal : selectedValuesList) &#123;</span><br><span class="line">                    showVal.setText(showVal.getText()+bigDecimal.toString()+<span class="string">&quot;, &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置下拉列表的可视高度可显示5个列表项</span></span><br><span class="line">        numScopeSelector.setMaximumRowCount(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Box</span> <span class="variable">box</span> <span class="operator">=</span> Box.createHorizontalBox();</span><br><span class="line">        box.add(<span class="keyword">new</span> <span class="title class_">JScrollPane</span>(numScopeList));</span><br><span class="line"></span><br><span class="line">        <span class="type">JPanel</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">        p.add(numScopeSelector);</span><br><span class="line">        box.add(p);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为numberScopeSelector添加监听器</span></span><br><span class="line">        numScopeSelector.addItemListener(<span class="keyword">new</span> <span class="title class_">ItemListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">itemStateChanged</span><span class="params">(ItemEvent e)</span> &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> numScopeSelector.getSelectedItem();</span><br><span class="line">                showVal.setText(value.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">JPanel</span> <span class="variable">bottom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">        bottom.add(<span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;您选择的值是：&quot;</span>));</span><br><span class="line">        bottom.add(showVal);</span><br><span class="line"></span><br><span class="line">        mainWin.add(box);</span><br><span class="line">        mainWin.add(bottom, BorderLayout.SOUTH);</span><br><span class="line">        mainWin.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        mainWin.pack();</span><br><span class="line">        mainWin.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ListModelTest</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-5-3-强制存储列表项的DefaultListModel和DefaultComboBoxModel"><a href="#3-5-3-强制存储列表项的DefaultListModel和DefaultComboBoxModel" class="headerlink" title="3.5.3 强制存储列表项的DefaultListModel和DefaultComboBoxModel"></a>3.5.3 强制存储列表项的DefaultListModel和DefaultComboBoxModel</h3><p>前面只是介绍了如何创建 JList 、 JComboBox 对象， 当 调用 JList 和 JComboBox构造方法时时传入数组或 Vector 作为参数，这些数组元素或集合元素将会作为列表项。当使用JList 或 JComboBox 时 常常还需要动态地增加、删除列表项,例如JCombox提供了下列方法完成增删操作：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">addItem(E item):添加一个列表项</span><br><span class="line">insertItemAt(E item, <span class="type">int</span> index)：向指定索引处插入一个列表项</span><br><span class="line">removeAllItems()：删除所有列表项</span><br><span class="line">removeItem(Object anObject)：删除指定列表项</span><br><span class="line">removeItemAt(<span class="type">int</span> anIndex)：删除指定索引处的列表项</span><br></pre></td></tr></table></figure></div>

<p>JList 并没有提供这些类似的方法。如果需要创建一个可以增加、删除列表项的 JList 对象，则应该在创建 JLi st 时显式使用 DefaultListModel作为构造参数 。因为 DefaultListModel 作为 JList 的 Model，它负责维护 JList 组件的所有列表数据，所以可以通过向 DefaultListModel 中添加、删除元素来实现向 JList 对象中增加 、删除列表项 。DefaultListModel 提供了如下几个方法来添加、删除元素:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">add(<span class="type">int</span> index, E element): 在该 ListModel 的指定位置处插入指定元素 。</span><br><span class="line">addElement(E obj): 将指定元素添加到该 ListModel 的末尾 。</span><br><span class="line">insertElementAt(E obj, <span class="type">int</span> index): 在该 ListModel 的指定位置处插入指定元素 。</span><br><span class="line">Object <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span>: 删除该 ListModel 中指定位置处的元素 </span><br><span class="line">removeAllElements(): 删 除该 ListModel 中的所有元素，并将其的大小设置为零 。</span><br><span class="line">removeElement(E obj): 删除该 ListModel 中第一个与参数匹配的元素。</span><br><span class="line">removeElementAt(<span class="type">int</span> index): 删除该 ListModel 中指定索引处的元素 。</span><br><span class="line">removeRange(<span class="type">int</span> 企omIndex ， <span class="type">int</span> toIndex): 删除该 ListModel 中指定范围内的所有元素。</span><br><span class="line">set(<span class="type">int</span> index, E element) : 将该 ListModel 指定索引处的元素替换成指定元素。</span><br><span class="line">setElementAt(E obj, <span class="type">int</span> index): 将该 ListModel 指定索引处的元素替换成指定元素。</span><br></pre></td></tr></table></figure></div>

<p><strong>案例：</strong></p>
<p>​	使用DefaultListModel完成下图效果：</p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309051048380.jpg"
                     
                ></p>
<p><strong>演示代码：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultListModelTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">JFrame</span> <span class="variable">mainWin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;测试DefaultListModel&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个JList对象</span></span><br><span class="line">    JList&lt;String&gt; bookList;</span><br><span class="line">    <span class="comment">//定义一个DefaultListModel对象</span></span><br><span class="line">    DefaultListModel&lt;String&gt; bookModel = <span class="keyword">new</span> <span class="title class_">DefaultListModel</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="type">JTextField</span> <span class="variable">bookName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextField</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">JButton</span> <span class="variable">removeBtn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;删除选中图书&quot;</span>);</span><br><span class="line">    <span class="type">JButton</span> <span class="variable">addBtn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;添加指定图书&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//向bookModel中添加元素</span></span><br><span class="line">        bookModel.addElement(<span class="string">&quot;java自学宝典&quot;</span>);</span><br><span class="line">        bookModel.addElement(<span class="string">&quot;轻量级javaEE企业应用实战&quot;</span>);</span><br><span class="line">        bookModel.addElement(<span class="string">&quot;Android基础教程&quot;</span>);</span><br><span class="line">        bookModel.addElement(<span class="string">&quot;jQuery实战教程&quot;</span>);</span><br><span class="line">        bookModel.addElement(<span class="string">&quot;SpringBoot企业级开发&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据DefaultListModel创建一个JList对象</span></span><br><span class="line">        bookList = <span class="keyword">new</span> <span class="title class_">JList</span>&lt;&gt;(bookModel);</span><br><span class="line">        <span class="comment">//设置最大可视高度</span></span><br><span class="line">        bookList.setVisibleRowCount(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置只能单选</span></span><br><span class="line">        bookList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为addBtn添加事件监听器</span></span><br><span class="line">        addBtn.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="comment">//当bookName文本框内容不为空时添加列表项</span></span><br><span class="line">                <span class="keyword">if</span> (!bookName.getText().trim().equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line"></span><br><span class="line">                    bookModel.addElement(bookName.getText());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为removeBtn添加事件监听器</span></span><br><span class="line">        removeBtn.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">selectedIndex</span> <span class="operator">=</span> bookList.getSelectedIndex();</span><br><span class="line">                <span class="keyword">if</span> (selectedIndex&gt;=<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    bookModel.remove(selectedIndex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">JPanel</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">        p.add(bookName);</span><br><span class="line">        p.add(addBtn);</span><br><span class="line">        p.add(removeBtn);</span><br><span class="line"></span><br><span class="line">        mainWin.add(<span class="keyword">new</span> <span class="title class_">JScrollPane</span>(bookList));</span><br><span class="line">        mainWin.add(p, BorderLayout.SOUTH);</span><br><span class="line">        mainWin.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        mainWin.pack();</span><br><span class="line">        mainWin.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">DefaultListModelTest</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="3-5-4-使用ListCellRenderer改变列表外观"><a href="#3-5-4-使用ListCellRenderer改变列表外观" class="headerlink" title="3.5.4 使用ListCellRenderer改变列表外观"></a>3.5.4 使用ListCellRenderer改变列表外观</h3><p>前面程序中的 JList 和 JComboBox 采用的都是简单的字符串列表项， 实际上 ， JList 和 JComboBox还可以支持图标列表项，如果在创建 JList 或 JComboBox 时传入图标数组，则创建的 JList 和 JComboBox的列表项就是图标 。</p>
<p>如果希望列表项是更复杂 的组件，例如，希望像 QQ 程序那样每个列表项既有图标，此时需要使用ListCellRenderer接口的实现类对象，自定义每个条目组件的渲染过程：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ListCellRenderer</span>&lt;E&gt;</span><br><span class="line">&#123;</span><br><span class="line">    Component <span class="title function_">getListCellRendererComponent</span><span class="params">(</span></span><br><span class="line"><span class="params">        JList&lt;? extends E&gt; list,//列表组件</span></span><br><span class="line"><span class="params">        E value,//当前列表项的值额索引</span></span><br><span class="line"><span class="params">        <span class="type">int</span> index,//当前列表项d</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> isSelected,//当前列表项是否被选中</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> cellHasFocus)</span>;<span class="comment">//当前列表项是否获取了焦点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>通过JList的<code>setCellRenderer(ListCellRenderer&lt;? super E&gt; cellRenderer)</code>方法，把自定义的ListCellRenderer对象传递给JList，就可以按照自定义的规则绘制列表项组件了。</p>
<p><strong>案例：</strong></p>
<p>​	使用ListCellRenderer实现下图效果：</p>
<p>​	<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309051048481.jpg"
                      style="zoom:50%;" 
                ></p>
<p><strong>演示代码：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.itcast.swing.util.ImagePathUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListCellRendererTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">JFrame</span> <span class="variable">mainWin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;好友列表&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] friends = &#123;</span><br><span class="line">            <span class="string">&quot;李清照&quot;</span>,</span><br><span class="line">            <span class="string">&quot;苏格拉底&quot;</span>,</span><br><span class="line">            <span class="string">&quot;李白&quot;</span>,</span><br><span class="line">            <span class="string">&quot;弄玉&quot;</span>,</span><br><span class="line">            <span class="string">&quot;虎头&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个JList对象</span></span><br><span class="line">    <span class="type">JList</span> <span class="variable">friendsList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JList</span>(friends);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//设置JList使用ImageCellRenderer作为列表项绘制器</span></span><br><span class="line">        friendsList.setCellRenderer(<span class="keyword">new</span> <span class="title class_">ImageCellRenderer</span>());</span><br><span class="line"></span><br><span class="line">        mainWin.add(<span class="keyword">new</span> <span class="title class_">JScrollPane</span>(friendsList));</span><br><span class="line">        mainWin.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        mainWin.pack();</span><br><span class="line">        mainWin.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ListCellRendererTest</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">ImageCellRenderer</span> <span class="keyword">extends</span> <span class="title class_">JPanel</span> <span class="keyword">implements</span> <span class="title class_">ListCellRenderer</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> ImageIcon icon;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="comment">//定义绘制单元格的背景色</span></span><br><span class="line">        <span class="keyword">private</span> Color background;</span><br><span class="line">        <span class="comment">//定义绘制单元格的前景色</span></span><br><span class="line">        <span class="keyword">private</span> Color foreground;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Component <span class="title function_">getListCellRendererComponent</span><span class="params">(JList list, Object value, <span class="type">int</span> index, <span class="type">boolean</span> isSelected, <span class="type">boolean</span> cellHasFocus)</span> &#123;</span><br><span class="line"></span><br><span class="line">            icon = <span class="keyword">new</span> <span class="title class_">ImageIcon</span>(ImagePathUtil.getRealPath(<span class="string">&quot;9\\&quot;</span> + value + <span class="string">&quot;.gif&quot;</span>));</span><br><span class="line">            name = value.toString();</span><br><span class="line">            background = isSelected ? list.getSelectionBackground() : list.getBackground();</span><br><span class="line">            foreground = isSelected ? list.getSelectionForeground() : list.getForeground();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//返回当前JPanel对象，作为列表项绘制器</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">paintComponent</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> icon.getImage().getWidth(<span class="literal">null</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> icon.getImage().getHeight(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//填充背景矩形</span></span><br><span class="line">            g.setColor(background);</span><br><span class="line">            g.fillRect(<span class="number">0</span>,<span class="number">0</span>,getWidth(),getHeight());</span><br><span class="line"></span><br><span class="line">            g.setColor(foreground);</span><br><span class="line">            <span class="comment">//绘制好友头像</span></span><br><span class="line">            g.drawImage(icon.getImage(),getWidth()/<span class="number">2</span>-width/<span class="number">2</span>,<span class="number">10</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//绘制好友昵称</span></span><br><span class="line">            g.setFont(<span class="keyword">new</span> <span class="title class_">Font</span>(<span class="string">&quot;SansSerif&quot;</span>,Font.BOLD,<span class="number">18</span>));</span><br><span class="line">            g.drawString(name,getWidth()/<span class="number">2</span>-name.length()*<span class="number">10</span>,height+<span class="number">30</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Dimension <span class="title function_">getPreferredSize</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Dimension</span>(<span class="number">60</span>,<span class="number">80</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>









]]></content>
  </entry>
  <entry>
    <title>记一次数据库连接失败错误</title>
    <url>/2023/09/09/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p>记一次数据库连接失败，问题报错如下：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309091054364.png"
                      alt="image-20230909105355220" style="zoom:50%;" 
                >

<p>网上提供了很多解决此类报错问题的具体出现原因和解决方案。</p>
<h3 id="首先是方案一："><a href="#首先是方案一：" class="headerlink" title="首先是方案一："></a>首先是方案一：</h3><p>在 url 配置后 加上<code> useSSL=false</code>,确实我的dbutils中的配置没有写它，于是加上后——依旧没有用。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309091123093.png"
                      alt="image-20230909112333009"
                ></p>
<h3 id="方案二："><a href="#方案二：" class="headerlink" title="方案二："></a>方案二：</h3><p>我观察到，在我阅览相关的资料时，经常会遇到一个名字——时区，阅览中，各类博客文章中指出，未经配置的 mysql 时区显示的是 System ，应该调制为 +8:00，于是又是查阅资料，使用如下命令进行设置</p>
<p><code>set global time_zone = ‘+8:00’;</code></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309091104724.png"
                      alt="image-20230909110456672" style="zoom:50%;" 
                >

<p>但是比较有意思的是，设置完之后发现，时区貌似并不会影响数据库的链接，其主要影响的是<strong>存储和检索的时间数据将默认使用服务器的系统时区。这可能会导致数据不一致性，在不同时区的客户端使用相同的查询时，可能得到不同的结果。</strong></p>
<p>显而易见，问题依旧没有解决。</p>
<h3 id="方案三："><a href="#方案三：" class="headerlink" title="方案三："></a>方案三：</h3><p>由于我的端口号使用的是3306，因此不禁思考，是否是3306端口被防火墙拦截。</p>
<p>于是，使用<code>netstat</code>命令去查看是否3306已经开启，并去按照 <a class="link"   href="https://blog.csdn.net/qyt_722/article/details/117603055?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169422903716800180683098%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=169422903716800180683098&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-117603055-null-null.142%5Ev93%5Einsert_down28v1&utm_term=win%E6%89%93%E5%BC%803306%E7%AB%AF%E5%8F%A3&spm=1018.2226.3001.4187" >该文章 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>去进行端口的打开。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309091111368.png"
                      alt="image-20230909111144282" style="zoom:50%;" 
                >

<p>重启项目，结果非常喜人 ——  没有解决。<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309091112564.png"
                      alt="image-20230909111212485"
                ></p>
<h3 id="方案四："><a href="#方案四：" class="headerlink" title="方案四："></a>方案四：</h3><p>在查阅文章时，其中一篇文章指出，是否是依赖中 jdbc 的版本不匹配。</p>
<p>由于我是跟着视频中做的，其版本为 8.0.19，因为我的版本也为8.0，一开始变没有去管他，但是使用 Mysql workbench 输入命令 <code>select version()</code> 去查看版本时，发现，我的竟然是 8.0.32 ，狂喜啊，真是狂喜啊，于是赶紧修改，然后运行，皇天不负有心人，果然！！！依旧报错。</p>
<h3 id="最后，实在顶不住了，去咸鱼上找了程序员去帮我，他一眼就看出我的错我！在3306前，我输入了两个冒号！，多了一个！！！！！！！！！！！！！我真无语。"><a href="#最后，实在顶不住了，去咸鱼上找了程序员去帮我，他一眼就看出我的错我！在3306前，我输入了两个冒号！，多了一个！！！！！！！！！！！！！我真无语。" class="headerlink" title="最后，实在顶不住了，去咸鱼上找了程序员去帮我，他一眼就看出我的错我！在3306前，我输入了两个冒号！，多了一个！！！！！！！！！！！！！我真无语。"></a>最后，实在顶不住了，去咸鱼上找了程序员去帮我，他一眼就看出我的错我！在3306前，我输入了两个冒号！，多了一个！！！！！！！！！！！！！我真无语。</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309091122780.png"
                      alt="image-20230909112248697"
                ></p>
<p>修改完后，运行，看到结果出现的那一刻，我的眼泪掉下来 0.O</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309091125628.png"
                      alt="image-20230909112504516"
                ></p>
<h3>END</h3>
>总结：其实心中是慨叹万千的，但是实际上这种情况我遇到过很多次了，一个bug去耗费一个上午，但是据我了解，一个bug卡几天的也大有人在，所以倒也不值得一提，但是可能学习阶段就是这样，只有不断地去尝试，去犯错，去纠错，最后才能有所得，以及在纠错之后所获得的一种成就感。尽管在寻求解决方案时，有很多方案并没有起到作用，但往往这类看似无用的过程，也让我了解到了更多，让我学习了不少我从前未曾了解的。

<blockquote>
<p>仍旧是路漫漫其修远兮。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>注解@WebServlet 的初识</title>
    <url>/2023/09/13/WebServlet%E7%9A%84%E4%BD%9C%E7%94%A8/</url>
    <content><![CDATA[<ul>
<li>Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。</li>
<li>我对这句话的理解就是,如果没有配置web.xml文件也没有在代码中添加@WebServlet注解，那么在Servlet容器中就无法正确地找到和加载该Servlet类。这意味着无法通过URL访问到该Servlet，并且它也无法响应任何请求。</li>
</ul>
<p>@WebServlet注解中的属性</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202309130907417.png"
                      alt="image-20230913090700314"
                ></p>
<p>下面就最长用的 urlPatterns 和 name属性进行举例：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/hello&quot;, name = &quot;HelloServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        response.getWriter().println(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在上述示例中，我们创建了一个名为HelloServlet的Servlet类，并通过@WebServlet注解对其进行配置。</p>
<ul>
<li><p><code>urlPatterns</code>属性用于设置Servlet的URL映射，这里我们将HelloServlet映射到路径”&#x2F;hello”。当用户通过访问<code>http://localhost:8080/hello</code>时，该Servlet将会处理该请求。同时，我们的浏览器前段页面要进行访问Servlet的时候，此时跳转的路径也是此UrlPatterns</p>
</li>
<li><p><code>name</code>属性用于设置Servlet的名称。Servlet是Java Web应用程序中的一种组件，用于处理客户端的HTTP请求并生成相应的响应。通过设置name属性，可以为Servlet指定一个唯一的名称，以便在Web应用程序中进行引用和调用</p>
</li>
<li><p>在HelloServlet类中，我们重写了doGet()方法，该方法处理HTTP的GET请求。在本例中，它简单地向响应输出了”Hello, World!”。</p>
</li>
</ul>
<p>通过使用@WebServlet注解，我们不再需要在web.xml文件中手动配置Servlet的映射和初始化参数等信息，而是直接在Servlet类上添加注解进行配置。这样简化了开发过程，并提高了代码的可读性和维护性。</p>
]]></content>
  </entry>
  <entry>
    <title>关于Post和Get提交数据遇到的问题</title>
    <url>/2023/10/01/%E5%85%B3%E4%BA%8EPost%E5%92%8CGet%E6%8F%90%E4%BA%A4%E6%95%B0%E6%8D%AE%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="关于-Post-和-Get-提交参数遇到的问题"><a href="#关于-Post-和-Get-提交参数遇到的问题" class="headerlink" title="关于 Post 和 Get 提交参数遇到的问题"></a>关于 Post 和 Get 提交参数遇到的问题</h2><p>在对于表单<code>&lt;form   method=get &gt;</code>提交参数时报错，语句如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;.....?action=list&quot;</span> method=<span class="string">&quot;get&quot;</span> &gt;</span><br></pre></td></tr></table></figure></div>

<p>但是修改成以下样式问题解决：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&lt;form action=......<span class="string">&quot; method=&quot;</span>get<span class="string">&quot; &gt;</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;</span>hidden<span class="string">&quot; name=&quot;</span>action<span class="string">&quot; value=&quot;</span>lsit<span class="string">&quot;&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>在这里感觉到了困惑，于是去查询。首先说说为什么第二种可行：</p>
<p>对于 Get 提交参数，我们的表单数据会自动将 action 参数附加到 URL 末尾，从而被接收方解析。而对于第一情况，那是 Post 的提交数据的方式，而若是我们的Get 也采用第一种策略，<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://forming1picgp.oss-cn-nanjing.aliyuncs.com/img/202310010849593.png"
                      alt="image-20231001084948540"
                ></p>
]]></content>
  </entry>
  <entry>
    <title>关于-Jsp-include-和-include</title>
    <url>/2023/10/03/%E5%85%B3%E4%BA%8E-Jsp-include-%E5%92%8C-include/</url>
    <content><![CDATA[<p>在包含Jsp页面时，遇到&lt; jsp:include &gt;包含页面使得样式乱序，而使用&lt; %@include% &gt;却不会发生此现象，查阅资料了解到：</p>
<p>在JSP中，<code>&lt;jsp:include&gt;</code> 和 <code>&lt;%@include%&gt;</code> 是两种不同的包含方式，它们在处理页面包含时有不同的行为，这可能会导致样式丢失或保留的差异。</p>
<ul>
<li><p><code>&lt;jsp:include&gt;</code>:  是一个动态包含方式，它在运行时包含指定的JSP页面。这意味着包含的内容会在包含它的页面被渲染时执行，然后将结果合并到包含页面中。因此，如果被包含的页面中有任何与样式相关的客户端脚本或CSS链接，它们可能会在包含页面被渲染时执行，并且可能会导致样式丢失或冲突。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">其步骤分为以下五步：</span><br><span class="line">	将被包含的 jsp文件<span class="number">1</span> 直接放入服务器解析</span><br><span class="line">	生成文件<span class="number">1.</span>java文件</span><br><span class="line">	将文件<span class="number">1</span>的结果放入文件<span class="number">2</span>中</span><br><span class="line">	再将文件<span class="number">2</span> 放入服务器解析</span><br><span class="line">	生成一个文件<span class="number">2.</span>java 文件</span><br></pre></td></tr></table></figure></div>


</li>
<li><p><code>&lt;%@include%&gt;</code>:  是一个静态包含方式，它在JSP页面编译时将被包含的内容合并到包含页面中。这是一个纯文本合并，不会在运行时执行被包含的页面。因此，被包含的页面中的任何样式或客户端脚本都会被直接包含到包含页面中，不会导致样式丢失或冲突。<strong>即 &lt;%@include%&gt; 包含相当于在编译的时候将我们的包含语句整体的替换为被包含页面内容</strong></p>
</li>
</ul>
<p>所以，样式在使用 <code>&lt;jsp:include&gt;</code> 时丢失，可能是因为它们与包含页面的其他内容发生了冲突或覆盖，或者由于运行时执行的原因导致了不一致的行为。而使用 <code>&lt;%@include%&gt;</code> 会直接将被包含的内容合并到包含页面，不会发生这些问题，因此样式可以得到完全保留。但需要注意的是，<code>&lt;%@include%&gt;</code> 是静态的，无法根据运行时条件来动态选择包含哪个页面。</p>
<p><em>最后我使用 &lt; Jsp：include &gt;的方式包含，并且将一些样式等内容放入被包含页面，最后解决问题</em></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">最后，二者还有一个比较重要的区别：</span><br><span class="line">	动态包含可以给被包含的页面传递参数。</span><br><span class="line">	静态包含不能给被包含的页面传递参数。</span><br></pre></td></tr></table></figure></div>]]></content>
  </entry>
  <entry>
    <title>反射技术实现 Servlet 请求方法的动态选择</title>
    <url>/2023/10/03/%E5%8F%8D%E5%B0%84%E6%8A%80%E6%9C%AF%E5%AE%9E%E7%8E%B0-Servlet-%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95%E7%9A%84%E5%8A%A8%E6%80%81%E9%80%89%E6%8B%A9/</url>
    <content><![CDATA[<p>假设一个Servlet类，其中包含了多个处理请求的方法，那我们在处理请求时就需要进行判断具体使用哪一种处理方法，这其中难免使用到较多的  <code>if - else</code> 语句子，此时就可以使用反射技术。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleRequest1</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="comment">// 处理请求1的逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleRequest2</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="comment">// 处理请求2的逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更多的处理请求方法...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="使用反射"><a href="#使用反射" class="headerlink" title="使用反射"></a>使用反射</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">action</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;action&quot;</span>);  <span class="comment">//   拿到浏览器传递过来的acation参数</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 获取对应的方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getMethod(<span class="string">&quot;handle&quot;</span> + action, HttpServletRequest.class, HttpServletResponse.class);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        method.invoke(<span class="built_in">this</span>, request, response);</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">// 处理异常</span></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleRequest1</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="comment">// 处理请求1的逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleRequest2</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="comment">// 处理请求2的逻辑</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>





<h5 id="核心代码："><a href="#核心代码：" class="headerlink" title="核心代码："></a>核心代码：</h5><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getMethod(<span class="string">&quot;handle&quot;</span> + action, HttpServletRequest.class, HttpServletResponse.class);</span><br><span class="line"> </span><br><span class="line"> method.invoke(<span class="built_in">this</span>, request, response);</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p><code>this.getClass()</code>: 获取当前对象（即Servlet对象）的Class对象，<code>this</code> 代表当前对象的实例。</p>
</li>
<li><p>&amp;emsp; &amp;emsp; <code>.getMethod(&quot;handle&quot; + action, HttpServletRequest.class, HttpServletResponse.class)</code>: 在获得的Class对象上调用 <code>getMethod</code> 方法来获取一个特定的方法。这里方法名是通过拼接字符串来生成的，<code>&quot;handle&quot; + action</code> 就是将请求参数 <code>action</code> 的值拼接到字符串 “handle” 前面，以构建要调用的方法名。这一行代码首先获取了当前Servlet对象的类对象，然后使用<code>getMethod</code>方法来获取一个名为<code>handle</code>加上请求参数<code>action</code>值组成的方法。<strong>这里的<code>action</code>通常是从请求中获取的，用于标识要执行哪个具体的处理方法。</strong></p>
</li>
<li><ul>
<li><code>&quot;handle&quot; + action</code> 会根据请求的 <code>action</code> 参数来构建方法名，比如如果 <code>action</code> 的值是 “Request1”，那么将会获取到名为 <code>handleRequest1</code> 的方法。</li>
</ul>
</li>
<li><ul>
<li><code>HttpServletRequest.class</code> 和 <code>HttpServletResponse.class</code> 是方法的参数类型，这里是告诉反射机制要找一个方法，这个方法接受一个 <code>HttpServletRequest</code> 和一个 <code>HttpServletResponse</code> 作为参数。</li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">method.invoke(<span class="built_in">this</span>, request, response);</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>method.invoke(...)</code>: 这是反射机制的一部分，它用于调用特定的方法。<code>invoke</code> 方法需要传入两个参数</li>
</ul>
<ul>
<li><p>第一个参数是要调用该方法的对象实例，在这里是当前的Servlet对象，用 <code>this</code> 表示。一旦我们获得了方法对象，就可以使用<code>invoke</code>方法来动态调用该方法。</p>
</li>
<li><p>第二个参数是该方法的实际参数，这里是 <code>request</code> 和 <code>response</code>。</p>
</li>
</ul>
<p><strong>如此使用反射后就可以<code>xxxxx?action=方法名</code>实现动态的调用请求处理方法，达到简化的效果</strong></p>
]]></content>
  </entry>
  <entry>
    <title>swal配合匿名函数实现客户端与Servlet的交互</title>
    <url>/2023/10/04/swal%E9%85%8D%E5%90%88%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8EServlet%E7%9A%84%E4%BA%A4%E4%BA%92/</url>
    <content><![CDATA[<h3 id="swal配合匿名函数实现点击事件"><a href="#swal配合匿名函数实现点击事件" class="headerlink" title="swal配合匿名函数实现点击事件"></a>swal配合匿名函数实现点击事件</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">swal(&#123;</span><br><span class="line">           title: <span class="string">&quot;您确定要删除该用户信息吗&quot;</span>,</span><br><span class="line">           text: <span class="string">&quot;删除后将无法恢复，请谨慎操作！&quot;</span>,</span><br><span class="line">           type: <span class="string">&quot;warning&quot;</span>,</span><br><span class="line">           showCancelButton: <span class="literal">true</span>,</span><br><span class="line">           confirmButtonColor: <span class="string">&quot;#DD6B55&quot;</span>,</span><br><span class="line">           confirmButtonText: <span class="string">&quot;删除&quot;</span>,</span><br><span class="line">           closeOnConfirm: <span class="literal">false</span></span><br><span class="line">       &#125;, function () &#123;  <span class="comment">//  ==============这里是一个匿名的函数=======</span></span><br><span class="line"></span><br><span class="line">           $.get(<span class="string">&quot;/xxxServlet?action=remove&amp;id=&quot;</span> + id, function (msg) &#123;</span><br><span class="line">                    <span class="comment">//  注：↑↑此处使用反射技术action参数即为调用函数</span></span><br><span class="line">               <span class="keyword">if</span>(msg===<span class="string">&#x27;ok&#x27;</span>)&#123;</span><br><span class="line">                   <span class="comment">//表示删除</span></span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   <span class="comment">//表示不可被删除</span></span><br><span class="line">                   swal(<span class="string">&quot;删除失败！&quot;</span>, <span class="string">&quot;该角色已经被分配，不可删除。&quot;</span>, <span class="string">&quot;Warning&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="comment">//之后再发起一个查询操作</span></span><br><span class="line">               window.location.href = <span class="string">&quot;/sys/roleServlet?action=list&quot;</span></span><br><span class="line">           &#125;)</span><br><span class="line"></span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure></div>

<ol>
<li><code>swal</code> 函数调用：<ul>
<li><code>title</code>: 弹窗的标题，显示的文本是”您确定要删除该用户信息吗”。</li>
<li><code>text</code>: 弹窗的文本内容，显示的文本是”删除后将无法恢复，请谨慎操作！”。</li>
<li><code>type</code>: 弹窗的类型，这里是一个警告框（”warning”）。</li>
<li><code>showCancelButton</code>: 是否显示取消按钮，这里为 true，表示会显示取消按钮。</li>
<li><code>confirmButtonColor</code>: 确认按钮的颜色。</li>
<li><code>confirmButtonText</code>: 确认按钮上显示的文本，这里是”删除”。</li>
<li><code>closeOnConfirm</code>: 是否在点击确认按钮后关闭弹窗，这里是 false，表示需要手动关闭。</li>
</ul>
</li>
<li>匿名函数： 这是 <code>swal</code> 函数的第二个参数，它是一个回调函数，会在用户点击确认按钮后执行。<ul>
<li><code>$.get()</code> 是 jQuery 中的一个 AJAX 请求，<strong>用来向服务器发送一个 GET 请求。</strong></li>
<li><code>&quot;/xxxServlet?action=remove&amp;id=&quot; + id</code> 是请求的 URL，其中 <code>id</code> 是一个变量，为传递的参数</li>
<li>在请求成功后，会执行一个匿名函数，其中 <code>msg</code> 是从服务器返回的数据。</li>
<li>如果 <code>msg</code> 的值是 “ok”，表示删除成功，可以添加相应的处理逻辑。</li>
<li>如果 <code>msg</code> 的值不是 “ok”，表示删除失败，会弹出一个新的 SweetAlert 提示框，显示”删除失败！”和”该角色已经被分配，不可删除。”。</li>
<li>无论成功与否，最后都会执行 <code>window.location.href = &quot;xxxServlet?action=list&quot;</code>，将页面重定</li>
</ul>
</li>
</ol>
<h3 id="这里又牵扯出一个问题，msg是如何获得Servlet返回的信息的呢？"><a href="#这里又牵扯出一个问题，msg是如何获得Servlet返回的信息的呢？" class="headerlink" title="这里又牵扯出一个问题，msg是如何获得Servlet返回的信息的呢？"></a>这里又牵扯出一个问题，msg是如何获得Servlet返回的信息的呢？</h3><p>这里继续转到servlet中对应的remove（id）函数 :</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">       <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">           <span class="comment">//表示没有被分配可以删除</span></span><br><span class="line">           service.deleteById(Integer.parseInt(id));</span><br><span class="line">           writer.write(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           writer.write(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">           <span class="comment">//表示不可以被删除</span></span><br><span class="line">       &#125;</span><br><span class="line">       writer.flush();</span><br><span class="line">       writer.close();</span><br></pre></td></tr></table></figure></div>

<p>此处出现了一个   <code> PrintWriter writer = resp.getWriter();</code></p>
<ul>
<li><code>resp</code> 是一个 <code>HttpServletResponse</code> 对象，它代表了服务器对客户端的响应。</li>
<li><code>getWriter()</code> 是 <code>HttpServletResponse</code> 对象的一个方法，它返回一个 <code>PrintWriter</code> 对象，可以用于向客户端发送文本数据</li>
</ul>
<p>一旦获得了 <code>PrintWriter</code> 对象，就可以使用它的 <code>write</code> 方法将数据发送到客户端,即此时msg获得数据</p>
]]></content>
  </entry>
  <entry>
    <title>## req.getRequestDispatcher  和  resp.sendRedirect()   的区别</title>
    <url>/2023/10/09/req-getRequestDispatcher-%E5%92%8C-resp-sendRedirect-%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p><code>req.getRequestDispatcher()</code> 和 <code>resp.sendRedirect()</code> 是在Java Servlet中用于页面跳转的两种不同方法，它们有一些重要的区别：</p>
<h3 id="req-：-针对的是请求"><a href="#req-：-针对的是请求" class="headerlink" title="req.**：   **针对的是请求"></a>req.**：   **针对的是请求</h3><p><code>req.getRequestDispatcher()</code> 用于在服务器端进行内部页面跳转，它返回一个 <code>RequestDispatcher</code> 对象，该对象可以用于将请求转发到另一个资源（如另一个Servlet、JSP页面等），由于请求转发是在服务器内部完成的，客户端对此一无所知，因此在客户端浏览器的地址栏中看不到新的URL，并且是服务器内部操作，可以共享同一个请求的信息（如请求参数等）。</p>
<p>示例代码：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RequestDispatcher</span> <span class="variable">dispatcher</span> <span class="operator">=</span> req.getRequestDispatcher(<span class="string">&quot;/path/to/destination&quot;</span>);</span><br><span class="line">dispatcher.forward(req, resp);</span><br></pre></td></tr></table></figure></div>

<h4 id="req-getRequestDispatcher-方法之-请求转发（Forward）："><a href="#req-getRequestDispatcher-方法之-请求转发（Forward）：" class="headerlink" title="req.getRequestDispatcher()方法之 请求转发（Forward）："></a>req.getRequestDispatcher()方法之 <strong>请求转发（Forward）</strong>：</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">req.getRequestDispatcher().forward(request, response);</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>forward()</code> 方法用于将请求转发到另一个资源（如Servlet、JSP页面等）。</li>
<li>通过调用 <code>forward()</code> 方法，当前Servlet将控制权交给目标资源，目标资源会处理请求，并将响应返回给客户端。</li>
<li>在转发期间，客户端的浏览器不知道发生了请求转发，地址栏中仍然显示原始请求的URL。</li>
<li>通常情况下，请求转发用于在应用程序内的不同组件之间共享请求数据。</li>
</ul>
<h4 id="req-getRequestDispatcher-方法之-请求包含（Include）："><a href="#req-getRequestDispatcher-方法之-请求包含（Include）：" class="headerlink" title="req.getRequestDispatcher()方法之 请求包含（Include）："></a>req.getRequestDispatcher()方法之 <strong>请求包含（Include）</strong>：</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">req.getRequestDispatcher().include(request, response);</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>include()</code> 方法用于将目标资源的输出包含到当前的响应中。</li>
<li>这意味着当前Servlet可以处理目标资源的响应并将其与自己的响应合并。</li>
<li>在包含期间，客户端的浏览器不知道发生了请求包含，目标资源的响应会与当前响应合并后一起发送给客户端。</li>
<li>通常情况下，请求包含用于在一个页面中嵌入其他页面的内容。</li>
</ul>
<h3 id="resp-sendRedirect-：-针对的是响应"><a href="#resp-sendRedirect-：-针对的是响应" class="headerlink" title="**resp.sendRedirect()**：    针对的是响应"></a>**resp.sendRedirect()**：    <strong>针对的是响应</strong></h3><p><code>resp.sendRedirect()</code> 用于在客户端进行页面重定向，它发送一个HTTP响应给客户端，*<em>让客户端重新发送一个新的请求到指定的URL。</em>，因为是客户端发起了新的请求，所以在客户端的地址栏中会显示新的URL。需要注意的是会导致之前的请求的信息丢失，因为它相当于发起了一个全新的请求。</p>
<p>示例代码：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">resp.sendRedirect(<span class="string">&quot;/path/to/destination&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p>区别总结：</p>
<ul>
<li>使用 <code>req.getRequestDispatcher()</code> 实现的是服务器端的跳转，不会改变客户端的地址栏内容，适用于在同一个应用内部进行页面跳转并共享请求信息。</li>
<li>使用 <code>resp.sendRedirect()</code> 实现的是客户端的重定向，会改变客户端的地址栏内容，适用于跳转到其他应用或者外部URL，或者在跳转时不需要保留之前请求的信息。</li>
</ul>
]]></content>
  </entry>
</search>
